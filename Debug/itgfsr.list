
itgfsr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800c09c  0800c09c  0001c09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c308  0800c308  000203fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c308  0800c308  000203fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c308  0800c308  000203fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c308  0800c308  0001c308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c30c  0800c30c  0001c30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003fc  20000000  0800c310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd4  200003fc  0800c70c  000203fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200013d0  0800c70c  000213d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185e8  00000000  00000000  00020425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000431d  00000000  00000000  00038a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003cd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003e0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ced7  00000000  00000000  0003f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8f7  00000000  00000000  0005c15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094316  00000000  00000000  00076a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ad6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  0010adbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200003fc 	.word	0x200003fc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c084 	.word	0x0800c084

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000400 	.word	0x20000400
 8000148:	0800c084 	.word	0x0800c084

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b58      	ldr	r3, [pc, #352]	; (80002d0 <MX_ADC1_Init+0x174>)
 800016e:	4a59      	ldr	r2, [pc, #356]	; (80002d4 <MX_ADC1_Init+0x178>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000172:	4b57      	ldr	r3, [pc, #348]	; (80002d0 <MX_ADC1_Init+0x174>)
 8000174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800017a:	4b55      	ldr	r3, [pc, #340]	; (80002d0 <MX_ADC1_Init+0x174>)
 800017c:	2200      	movs	r2, #0
 800017e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000180:	4b53      	ldr	r3, [pc, #332]	; (80002d0 <MX_ADC1_Init+0x174>)
 8000182:	2200      	movs	r2, #0
 8000184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000186:	4b52      	ldr	r3, [pc, #328]	; (80002d0 <MX_ADC1_Init+0x174>)
 8000188:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800018c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018e:	4b50      	ldr	r3, [pc, #320]	; (80002d0 <MX_ADC1_Init+0x174>)
 8000190:	2200      	movs	r2, #0
 8000192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8000194:	4b4e      	ldr	r3, [pc, #312]	; (80002d0 <MX_ADC1_Init+0x174>)
 8000196:	220a      	movs	r2, #10
 8000198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019a:	484d      	ldr	r0, [pc, #308]	; (80002d0 <MX_ADC1_Init+0x174>)
 800019c:	f001 f8e4 	bl	8001368 <HAL_ADC_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80001a6:	f000 fed9 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001b2:	2300      	movs	r3, #0
 80001b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	4619      	mov	r1, r3
 80001ba:	4845      	ldr	r0, [pc, #276]	; (80002d0 <MX_ADC1_Init+0x174>)
 80001bc:	f001 fbb4 	bl	8001928 <HAL_ADC_ConfigChannel>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001c6:	f000 fec9 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	4619      	mov	r1, r3
 80001d6:	483e      	ldr	r0, [pc, #248]	; (80002d0 <MX_ADC1_Init+0x174>)
 80001d8:	f001 fba6 	bl	8001928 <HAL_ADC_ConfigChannel>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001e2:	f000 febb 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001e6:	2302      	movs	r3, #2
 80001e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001ea:	2303      	movs	r3, #3
 80001ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	4837      	ldr	r0, [pc, #220]	; (80002d0 <MX_ADC1_Init+0x174>)
 80001f4:	f001 fb98 	bl	8001928 <HAL_ADC_ConfigChannel>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001fe:	f000 fead 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000202:	2303      	movs	r3, #3
 8000204:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000206:	2304      	movs	r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4619      	mov	r1, r3
 800020e:	4830      	ldr	r0, [pc, #192]	; (80002d0 <MX_ADC1_Init+0x174>)
 8000210:	f001 fb8a 	bl	8001928 <HAL_ADC_ConfigChannel>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800021a:	f000 fe9f 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800021e:	2304      	movs	r3, #4
 8000220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000222:	2305      	movs	r3, #5
 8000224:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4619      	mov	r1, r3
 800022a:	4829      	ldr	r0, [pc, #164]	; (80002d0 <MX_ADC1_Init+0x174>)
 800022c:	f001 fb7c 	bl	8001928 <HAL_ADC_ConfigChannel>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000236:	f000 fe91 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800023a:	2305      	movs	r3, #5
 800023c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800023e:	2306      	movs	r3, #6
 8000240:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4619      	mov	r1, r3
 8000246:	4822      	ldr	r0, [pc, #136]	; (80002d0 <MX_ADC1_Init+0x174>)
 8000248:	f001 fb6e 	bl	8001928 <HAL_ADC_ConfigChannel>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000252:	f000 fe83 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000256:	2306      	movs	r3, #6
 8000258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800025a:	2307      	movs	r3, #7
 800025c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4619      	mov	r1, r3
 8000262:	481b      	ldr	r0, [pc, #108]	; (80002d0 <MX_ADC1_Init+0x174>)
 8000264:	f001 fb60 	bl	8001928 <HAL_ADC_ConfigChannel>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800026e:	f000 fe75 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000272:	2307      	movs	r3, #7
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000276:	2308      	movs	r3, #8
 8000278:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4619      	mov	r1, r3
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <MX_ADC1_Init+0x174>)
 8000280:	f001 fb52 	bl	8001928 <HAL_ADC_ConfigChannel>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800028a:	f000 fe67 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800028e:	2308      	movs	r3, #8
 8000290:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000292:	2309      	movs	r3, #9
 8000294:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4619      	mov	r1, r3
 800029a:	480d      	ldr	r0, [pc, #52]	; (80002d0 <MX_ADC1_Init+0x174>)
 800029c:	f001 fb44 	bl	8001928 <HAL_ADC_ConfigChannel>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80002a6:	f000 fe59 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80002aa:	2309      	movs	r3, #9
 80002ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80002ae:	230a      	movs	r3, #10
 80002b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <MX_ADC1_Init+0x174>)
 80002b8:	f001 fb36 	bl	8001928 <HAL_ADC_ConfigChannel>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80002c2:	f000 fe4b 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000418 	.word	0x20000418
 80002d4:	40012400 	.word	0x40012400

080002d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a37      	ldr	r2, [pc, #220]	; (80003d0 <HAL_ADC_MspInit+0xf8>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d167      	bne.n	80003c8 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002f8:	4b36      	ldr	r3, [pc, #216]	; (80003d4 <HAL_ADC_MspInit+0xfc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a35      	ldr	r2, [pc, #212]	; (80003d4 <HAL_ADC_MspInit+0xfc>)
 80002fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b33      	ldr	r3, [pc, #204]	; (80003d4 <HAL_ADC_MspInit+0xfc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800030c:	617b      	str	r3, [r7, #20]
 800030e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <HAL_ADC_MspInit+0xfc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a2f      	ldr	r2, [pc, #188]	; (80003d4 <HAL_ADC_MspInit+0xfc>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <HAL_ADC_MspInit+0xfc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <HAL_ADC_MspInit+0xfc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a29      	ldr	r2, [pc, #164]	; (80003d4 <HAL_ADC_MspInit+0xfc>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <HAL_ADC_MspInit+0xfc>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0308 	and.w	r3, r3, #8
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000340:	23ff      	movs	r3, #255	; 0xff
 8000342:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000344:	2303      	movs	r3, #3
 8000346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000348:	f107 0318 	add.w	r3, r7, #24
 800034c:	4619      	mov	r1, r3
 800034e:	4822      	ldr	r0, [pc, #136]	; (80003d8 <HAL_ADC_MspInit+0x100>)
 8000350:	f002 f822 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000354:	2303      	movs	r3, #3
 8000356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000358:	2303      	movs	r3, #3
 800035a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035c:	f107 0318 	add.w	r3, r7, #24
 8000360:	4619      	mov	r1, r3
 8000362:	481e      	ldr	r0, [pc, #120]	; (80003dc <HAL_ADC_MspInit+0x104>)
 8000364:	f002 f818 	bl	8002398 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 800036a:	4a1e      	ldr	r2, [pc, #120]	; (80003e4 <HAL_ADC_MspInit+0x10c>)
 800036c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 8000382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 800038a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800038e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800039c:	4810      	ldr	r0, [pc, #64]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 800039e:	f001 fdd3 	bl	8001f48 <HAL_DMA_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80003a8:	f000 fdd8 	bl	8000f5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a0c      	ldr	r2, [pc, #48]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 80003b0:	621a      	str	r2, [r3, #32]
 80003b2:	4a0b      	ldr	r2, [pc, #44]	; (80003e0 <HAL_ADC_MspInit+0x108>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2100      	movs	r1, #0
 80003bc:	2012      	movs	r0, #18
 80003be:	f001 fd8c 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80003c2:	2012      	movs	r0, #18
 80003c4:	f001 fda5 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003c8:	bf00      	nop
 80003ca:	3728      	adds	r7, #40	; 0x28
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40012400 	.word	0x40012400
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010800 	.word	0x40010800
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	20000448 	.word	0x20000448
 80003e4:	40020008 	.word	0x40020008

080003e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_DMA_Init+0x38>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <MX_DMA_Init+0x38>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_DMA_Init+0x38>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	200b      	movs	r0, #11
 800040c:	f001 fd65 	bl	8001eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000410:	200b      	movs	r0, #11
 8000412:	f001 fd7e 	bl	8001f12 <HAL_NVIC_EnableIRQ>

}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_GPIO_Init+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <MX_GPIO_Init+0x90>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_GPIO_Init+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0320 	and.w	r3, r3, #32
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_GPIO_Init+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <MX_GPIO_Init+0x90>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_GPIO_Init+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <MX_GPIO_Init+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <MX_GPIO_Init+0x90>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_GPIO_Init+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Output_1_Pin|Output_2_Pin|Output_3_Pin|Output_4_Pin, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000486:	480c      	ldr	r0, [pc, #48]	; (80004b8 <MX_GPIO_Init+0x94>)
 8000488:	f002 f90a 	bl	80026a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Output_1_Pin|Output_2_Pin|Output_3_Pin|Output_4_Pin;
 800048c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	2301      	movs	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049a:	2302      	movs	r3, #2
 800049c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	4619      	mov	r1, r3
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <MX_GPIO_Init+0x94>)
 80004a6:	f001 ff77 	bl	8002398 <HAL_GPIO_Init>

}
 80004aa:	bf00      	nop
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010c00 	.word	0x40010c00

080004bc <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	//	CDC_Transmit(0,"gowno", sizeof("gowno"));
	//	ground_id=69;
	debug_var++;
 80004c4:	4b31      	ldr	r3, [pc, #196]	; (800058c <HAL_ADC_ConvCpltCallback+0xd0>)
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	3301      	adds	r3, #1
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	4b2f      	ldr	r3, [pc, #188]	; (800058c <HAL_ADC_ConvCpltCallback+0xd0>)
 80004d0:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 80004d2:	482f      	ldr	r0, [pc, #188]	; (8000590 <HAL_ADC_ConvCpltCallback+0xd4>)
 80004d4:	f001 f8fe 	bl	80016d4 <HAL_ADC_Stop_DMA>
	switch (ground_id) {
 80004d8:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <HAL_ADC_ConvCpltCallback+0xd8>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	3b01      	subs	r3, #1
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d84f      	bhi.n	8000584 <HAL_ADC_ConvCpltCallback+0xc8>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <HAL_ADC_ConvCpltCallback+0x30>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	080004fd 	.word	0x080004fd
 80004f0:	0800051f 	.word	0x0800051f
 80004f4:	08000541 	.word	0x08000541
 80004f8:	08000563 	.word	0x08000563
	case 1:
		HAL_GPIO_Init(Output_1_GPIO_Port, &Output_1_in);
 80004fc:	4926      	ldr	r1, [pc, #152]	; (8000598 <HAL_ADC_ConvCpltCallback+0xdc>)
 80004fe:	4827      	ldr	r0, [pc, #156]	; (800059c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000500:	f001 ff4a 	bl	8002398 <HAL_GPIO_Init>
		HAL_GPIO_Init(Output_2_GPIO_Port, &Output_2_out);
 8000504:	4926      	ldr	r1, [pc, #152]	; (80005a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000506:	4825      	ldr	r0, [pc, #148]	; (800059c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000508:	f001 ff46 	bl	8002398 <HAL_GPIO_Init>
		ground_id=2;
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <HAL_ADC_ConvCpltCallback+0xd8>)
 800050e:	2202      	movs	r2, #2
 8000510:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, &adc_results_2, 10);
 8000512:	220a      	movs	r2, #10
 8000514:	4923      	ldr	r1, [pc, #140]	; (80005a4 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000516:	481e      	ldr	r0, [pc, #120]	; (8000590 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000518:	f000 fffe 	bl	8001518 <HAL_ADC_Start_DMA>
		break;
 800051c:	e032      	b.n	8000584 <HAL_ADC_ConvCpltCallback+0xc8>
	case 2:
		HAL_GPIO_Init(Output_2_GPIO_Port, &Output_2_in);
 800051e:	4922      	ldr	r1, [pc, #136]	; (80005a8 <HAL_ADC_ConvCpltCallback+0xec>)
 8000520:	481e      	ldr	r0, [pc, #120]	; (800059c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000522:	f001 ff39 	bl	8002398 <HAL_GPIO_Init>
		HAL_GPIO_Init(Output_3_GPIO_Port, &Output_3_out);
 8000526:	4921      	ldr	r1, [pc, #132]	; (80005ac <HAL_ADC_ConvCpltCallback+0xf0>)
 8000528:	481c      	ldr	r0, [pc, #112]	; (800059c <HAL_ADC_ConvCpltCallback+0xe0>)
 800052a:	f001 ff35 	bl	8002398 <HAL_GPIO_Init>
		ground_id=3;
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000530:	2203      	movs	r2, #3
 8000532:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, &adc_results_3, 10);
 8000534:	220a      	movs	r2, #10
 8000536:	491e      	ldr	r1, [pc, #120]	; (80005b0 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000538:	4815      	ldr	r0, [pc, #84]	; (8000590 <HAL_ADC_ConvCpltCallback+0xd4>)
 800053a:	f000 ffed 	bl	8001518 <HAL_ADC_Start_DMA>
		break;
 800053e:	e021      	b.n	8000584 <HAL_ADC_ConvCpltCallback+0xc8>
	case 3:
		HAL_GPIO_Init(Output_3_GPIO_Port, &Output_3_in);
 8000540:	491c      	ldr	r1, [pc, #112]	; (80005b4 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000542:	4816      	ldr	r0, [pc, #88]	; (800059c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000544:	f001 ff28 	bl	8002398 <HAL_GPIO_Init>
		HAL_GPIO_Init(Output_4_GPIO_Port, &Output_4_out);
 8000548:	491b      	ldr	r1, [pc, #108]	; (80005b8 <HAL_ADC_ConvCpltCallback+0xfc>)
 800054a:	4814      	ldr	r0, [pc, #80]	; (800059c <HAL_ADC_ConvCpltCallback+0xe0>)
 800054c:	f001 ff24 	bl	8002398 <HAL_GPIO_Init>
		ground_id=4;
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000552:	2204      	movs	r2, #4
 8000554:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, &adc_results_4, 10);
 8000556:	220a      	movs	r2, #10
 8000558:	4918      	ldr	r1, [pc, #96]	; (80005bc <HAL_ADC_ConvCpltCallback+0x100>)
 800055a:	480d      	ldr	r0, [pc, #52]	; (8000590 <HAL_ADC_ConvCpltCallback+0xd4>)
 800055c:	f000 ffdc 	bl	8001518 <HAL_ADC_Start_DMA>
		break;
 8000560:	e010      	b.n	8000584 <HAL_ADC_ConvCpltCallback+0xc8>
	case 4:
		HAL_GPIO_Init(Output_4_GPIO_Port, &Output_4_in);
 8000562:	4917      	ldr	r1, [pc, #92]	; (80005c0 <HAL_ADC_ConvCpltCallback+0x104>)
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000566:	f001 ff17 	bl	8002398 <HAL_GPIO_Init>
		HAL_GPIO_Init(Output_1_GPIO_Port, &Output_1_out);
 800056a:	4916      	ldr	r1, [pc, #88]	; (80005c4 <HAL_ADC_ConvCpltCallback+0x108>)
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <HAL_ADC_ConvCpltCallback+0xe0>)
 800056e:	f001 ff13 	bl	8002398 <HAL_GPIO_Init>
		ground_id=1;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000574:	2201      	movs	r2, #1
 8000576:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, &adc_results_1, 10);
 8000578:	220a      	movs	r2, #10
 800057a:	4913      	ldr	r1, [pc, #76]	; (80005c8 <HAL_ADC_ConvCpltCallback+0x10c>)
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <HAL_ADC_ConvCpltCallback+0xd4>)
 800057e:	f000 ffcb 	bl	8001518 <HAL_ADC_Start_DMA>
		break;
 8000582:	bf00      	nop
	}
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200006f8 	.word	0x200006f8
 8000590:	20000418 	.word	0x20000418
 8000594:	20000000 	.word	0x20000000
 8000598:	20000708 	.word	0x20000708
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	20000738 	.word	0x20000738
 80005a4:	200004a8 	.word	0x200004a8
 80005a8:	20000728 	.word	0x20000728
 80005ac:	20000758 	.word	0x20000758
 80005b0:	200004bc 	.word	0x200004bc
 80005b4:	20000748 	.word	0x20000748
 80005b8:	20000778 	.word	0x20000778
 80005bc:	200004d0 	.word	0x200004d0
 80005c0:	20000768 	.word	0x20000768
 80005c4:	20000718 	.word	0x20000718
 80005c8:	20000494 	.word	0x20000494

080005cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005dc:	f040 80db 	bne.w	8000796 <HAL_TIM_PeriodElapsedCallback+0x1ca>
		for (int i = 0; i < 9; ++i) {
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e0c3      	b.n	800076e <HAL_TIM_PeriodElapsedCallback+0x1a2>
			sensors_states[i]=0;
 80005e6:	4a6e      	ldr	r2, [pc, #440]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 4; ++j) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	e0b4      	b.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x194>
				switch (j) {
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	f200 80ae 	bhi.w	800075a <HAL_TIM_PeriodElapsedCallback+0x18e>
 80005fe:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000604:	08000615 	.word	0x08000615
 8000608:	08000663 	.word	0x08000663
 800060c:	080006b1 	.word	0x080006b1
 8000610:	080006ff 	.word	0x080006ff
				case 0:
					//					sprintf(msg, "%hu ", adc_results_1[j]);
					//					CDC_Transmit(0,msg, sizeof(msg));
					if(sensor_treshholds[i+j*10]>((sensor_offsets[i+j*10]*1024)/adc_results_1[i])-1024){
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	4613      	mov	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4413      	add	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	4a5f      	ldr	r2, [pc, #380]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062a:	029b      	lsls	r3, r3, #10
 800062c:	495e      	ldr	r1, [pc, #376]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000634:	fb93 f3f2 	sdiv	r3, r3, r2
 8000638:	f2a3 31ff 	subw	r1, r3, #1023	; 0x3ff
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	461a      	mov	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	4a57      	ldr	r2, [pc, #348]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800064e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000652:	4299      	cmp	r1, r3
 8000654:	dc7a      	bgt.n	800074c <HAL_TIM_PeriodElapsedCallback+0x180>
						sensors_states[i]=1;
 8000656:	4a52      	ldr	r2, [pc, #328]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4413      	add	r3, r2
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
						//						sprintf(msg, "%hu ", adc_results_1[j]);
						//											CDC_Transmit(0,msg, sizeof(msg));
					}
					break;
 8000660:	e074      	b.n	800074c <HAL_TIM_PeriodElapsedCallback+0x180>
				case 1:
					//					sprintf(msg, "%hu ", adc_results_2[j]);
					//					CDC_Transmit(0,msg, sizeof(msg));
					if(sensor_treshholds[i+j*10]>((sensor_offsets[i+j*10]*1024)/adc_results_2[i])-1024){
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	4613      	mov	r3, r2
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4413      	add	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	461a      	mov	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	4a4c      	ldr	r2, [pc, #304]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000678:	029b      	lsls	r3, r3, #10
 800067a:	494d      	ldr	r1, [pc, #308]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000682:	fb93 f3f2 	sdiv	r3, r3, r2
 8000686:	f2a3 31ff 	subw	r1, r3, #1023	; 0x3ff
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	4613      	mov	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	461a      	mov	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4413      	add	r3, r2
 800069a:	4a44      	ldr	r2, [pc, #272]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800069c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a0:	4299      	cmp	r1, r3
 80006a2:	dc55      	bgt.n	8000750 <HAL_TIM_PeriodElapsedCallback+0x184>
						sensors_states[i]=1;
 80006a4:	4a3e      	ldr	r2, [pc, #248]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
						//						sprintf(msg, "%hu ", adc_results_2[j]);
						//											CDC_Transmit(0,msg, sizeof(msg));
					}

					break;
 80006ae:	e04f      	b.n	8000750 <HAL_TIM_PeriodElapsedCallback+0x184>
				case 2:
					//					sprintf(msg, "%hu ", adc_results_3[j]);
					//					CDC_Transmit(0,msg, sizeof(msg));
					if(sensor_treshholds[i+j*10]>((sensor_offsets[i+j*10]*1024)/adc_results_3[i])-1024){
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	4a38      	ldr	r2, [pc, #224]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80006c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c6:	029b      	lsls	r3, r3, #10
 80006c8:	493a      	ldr	r1, [pc, #232]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80006d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80006d4:	f2a3 31ff 	subw	r1, r3, #1023	; 0x3ff
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	461a      	mov	r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	4413      	add	r3, r2
 80006e8:	4a30      	ldr	r2, [pc, #192]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80006ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ee:	4299      	cmp	r1, r3
 80006f0:	dc30      	bgt.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x188>
						sensors_states[i]=1;
 80006f2:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
						//											sprintf(msg, "%hu ", adc_results_3[j]);
						//											CDC_Transmit(0,msg, sizeof(msg));
					}
					break;
 80006fc:	e02a      	b.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x188>
				case 3:
					//					sprintf(msg, "%hu ", adc_results_4[j]);
					//					CDC_Transmit(0,msg, sizeof(msg));
					if(sensor_treshholds[i+j*10]>((sensor_offsets[i+j*10]*1024)/adc_results_4[i])-1024){
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	4613      	mov	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	4413      	add	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	461a      	mov	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4413      	add	r3, r2
 800070e:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000714:	029b      	lsls	r3, r3, #10
 8000716:	4928      	ldr	r1, [pc, #160]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800071e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000722:	f2a3 31ff 	subw	r1, r3, #1023	; 0x3ff
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	461a      	mov	r2, r3
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	4413      	add	r3, r2
 8000736:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800073c:	4299      	cmp	r1, r3
 800073e:	dc0b      	bgt.n	8000758 <HAL_TIM_PeriodElapsedCallback+0x18c>
						sensors_states[i]=1;
 8000740:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4413      	add	r3, r2
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
						//						sprintf(msg, "%hu ", adc_results_4[j]);
						//											CDC_Transmit(0,msg, sizeof(msg));
					}
					break;
 800074a:	e005      	b.n	8000758 <HAL_TIM_PeriodElapsedCallback+0x18c>
					break;
 800074c:	bf00      	nop
 800074e:	e004      	b.n	800075a <HAL_TIM_PeriodElapsedCallback+0x18e>
					break;
 8000750:	bf00      	nop
 8000752:	e002      	b.n	800075a <HAL_TIM_PeriodElapsedCallback+0x18e>
					break;
 8000754:	bf00      	nop
 8000756:	e000      	b.n	800075a <HAL_TIM_PeriodElapsedCallback+0x18e>
					break;
 8000758:	bf00      	nop
			for (int j = 0; j < 4; ++j) {
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	3301      	adds	r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	2b03      	cmp	r3, #3
 8000764:	f77f af47 	ble.w	80005f6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		for (int i = 0; i < 9; ++i) {
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2b08      	cmp	r3, #8
 8000772:	f77f af38 	ble.w	80005e6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		//					}
		//				}
		//			}
		//		}

		if(sensors_states[0]==1){
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d103      	bne.n	8000786 <HAL_TIM_PeriodElapsedCallback+0x1ba>
			//			keyBoardHIDsub[2]=sensors_keymap[0];
			keyBoardHIDsub[2]=0x05;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000780:	2205      	movs	r2, #5
 8000782:	709a      	strb	r2, [r3, #2]
 8000784:	e002      	b.n	800078c <HAL_TIM_PeriodElapsedCallback+0x1c0>
		}else{
			keyBoardHIDsub[2]=0x00;
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000788:	2200      	movs	r2, #0
 800078a:	709a      	strb	r2, [r3, #2]
		}


		USBD_HID_Keybaord_SendReport(&hUsbDevice, &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 800078c:	2208      	movs	r2, #8
 800078e:	490b      	ldr	r1, [pc, #44]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000792:	f008 feeb 	bl	800956c <USBD_HID_Keybaord_SendReport>

		//		CDC_Receive(0,&rx_buff,&sizeof(rx_buff));
		//		CDC_Transmit(0, &rx_buff,sizeof(rx_buff));

	}
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200006fc 	.word	0x200006fc
 80007a4:	20000054 	.word	0x20000054
 80007a8:	20000494 	.word	0x20000494
 80007ac:	20000004 	.word	0x20000004
 80007b0:	200004a8 	.word	0x200004a8
 80007b4:	200004bc 	.word	0x200004bc
 80007b8:	200004d0 	.word	0x200004d0
 80007bc:	2000048c 	.word	0x2000048c
 80007c0:	20000ac4 	.word	0x20000ac4

080007c4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	int volatile jajco = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007ce:	f000 fd69 	bl	80012a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007d2:	f000 fb65 	bl	8000ea0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007d6:	f7ff fe25 	bl	8000424 <MX_GPIO_Init>
	MX_DMA_Init();
 80007da:	f7ff fe05 	bl	80003e8 <MX_DMA_Init>
	MX_ADC1_Init();
 80007de:	f7ff fcbd 	bl	800015c <MX_ADC1_Init>
	MX_USB_PCD_Init();
 80007e2:	f000 fce9 	bl	80011b8 <MX_USB_PCD_Init>
	MX_TIM2_Init();
 80007e6:	f000 fc77 	bl	80010d8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	Output_1_in.Pin=Output_1_Pin;
 80007ea:	4bb0      	ldr	r3, [pc, #704]	; (8000aac <main+0x2e8>)
 80007ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f0:	601a      	str	r2, [r3, #0]
	Output_1_in.Mode=GPIO_MODE_INPUT;
 80007f2:	4bae      	ldr	r3, [pc, #696]	; (8000aac <main+0x2e8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
	Output_1_in.Pull=GPIO_NOPULL;
 80007f8:	4bac      	ldr	r3, [pc, #688]	; (8000aac <main+0x2e8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
	Output_1_in.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	4bab      	ldr	r3, [pc, #684]	; (8000aac <main+0x2e8>)
 8000800:	2202      	movs	r2, #2
 8000802:	60da      	str	r2, [r3, #12]
	Output_1_out.Pin=Output_1_Pin;
 8000804:	4baa      	ldr	r3, [pc, #680]	; (8000ab0 <main+0x2ec>)
 8000806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800080a:	601a      	str	r2, [r3, #0]
	Output_1_out.Mode=GPIO_MODE_OUTPUT_PP;
 800080c:	4ba8      	ldr	r3, [pc, #672]	; (8000ab0 <main+0x2ec>)
 800080e:	2201      	movs	r2, #1
 8000810:	605a      	str	r2, [r3, #4]
	Output_1_out.Pull=GPIO_NOPULL;
 8000812:	4ba7      	ldr	r3, [pc, #668]	; (8000ab0 <main+0x2ec>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
	Output_1_out.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	4ba5      	ldr	r3, [pc, #660]	; (8000ab0 <main+0x2ec>)
 800081a:	2202      	movs	r2, #2
 800081c:	60da      	str	r2, [r3, #12]
	Output_2_in.Pin=Output_2_Pin;
 800081e:	4ba5      	ldr	r3, [pc, #660]	; (8000ab4 <main+0x2f0>)
 8000820:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000824:	601a      	str	r2, [r3, #0]
	Output_2_in.Mode=GPIO_MODE_INPUT;
 8000826:	4ba3      	ldr	r3, [pc, #652]	; (8000ab4 <main+0x2f0>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
	Output_2_in.Pull=GPIO_NOPULL;
 800082c:	4ba1      	ldr	r3, [pc, #644]	; (8000ab4 <main+0x2f0>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
	Output_2_in.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	4ba0      	ldr	r3, [pc, #640]	; (8000ab4 <main+0x2f0>)
 8000834:	2202      	movs	r2, #2
 8000836:	60da      	str	r2, [r3, #12]
	Output_2_out.Pin=Output_2_Pin;
 8000838:	4b9f      	ldr	r3, [pc, #636]	; (8000ab8 <main+0x2f4>)
 800083a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800083e:	601a      	str	r2, [r3, #0]
	Output_2_out.Mode=GPIO_MODE_OUTPUT_PP;
 8000840:	4b9d      	ldr	r3, [pc, #628]	; (8000ab8 <main+0x2f4>)
 8000842:	2201      	movs	r2, #1
 8000844:	605a      	str	r2, [r3, #4]
	Output_2_out.Pull=GPIO_NOPULL;
 8000846:	4b9c      	ldr	r3, [pc, #624]	; (8000ab8 <main+0x2f4>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
	Output_2_out.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	4b9a      	ldr	r3, [pc, #616]	; (8000ab8 <main+0x2f4>)
 800084e:	2202      	movs	r2, #2
 8000850:	60da      	str	r2, [r3, #12]
	Output_3_in.Pin=Output_3_Pin;
 8000852:	4b9a      	ldr	r3, [pc, #616]	; (8000abc <main+0x2f8>)
 8000854:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000858:	601a      	str	r2, [r3, #0]
	Output_3_in.Mode=GPIO_MODE_INPUT;
 800085a:	4b98      	ldr	r3, [pc, #608]	; (8000abc <main+0x2f8>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
	Output_3_in.Pull=GPIO_NOPULL;
 8000860:	4b96      	ldr	r3, [pc, #600]	; (8000abc <main+0x2f8>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
	Output_3_in.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	4b95      	ldr	r3, [pc, #596]	; (8000abc <main+0x2f8>)
 8000868:	2202      	movs	r2, #2
 800086a:	60da      	str	r2, [r3, #12]
	Output_3_out.Pin=Output_3_Pin;
 800086c:	4b94      	ldr	r3, [pc, #592]	; (8000ac0 <main+0x2fc>)
 800086e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000872:	601a      	str	r2, [r3, #0]
	Output_3_out.Mode=GPIO_MODE_OUTPUT_PP;
 8000874:	4b92      	ldr	r3, [pc, #584]	; (8000ac0 <main+0x2fc>)
 8000876:	2201      	movs	r2, #1
 8000878:	605a      	str	r2, [r3, #4]
	Output_3_out.Pull=GPIO_NOPULL;
 800087a:	4b91      	ldr	r3, [pc, #580]	; (8000ac0 <main+0x2fc>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
	Output_3_out.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	4b8f      	ldr	r3, [pc, #572]	; (8000ac0 <main+0x2fc>)
 8000882:	2202      	movs	r2, #2
 8000884:	60da      	str	r2, [r3, #12]
	Output_4_in.Pin=Output_4_Pin;
 8000886:	4b8f      	ldr	r3, [pc, #572]	; (8000ac4 <main+0x300>)
 8000888:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800088c:	601a      	str	r2, [r3, #0]
	Output_4_in.Mode=GPIO_MODE_INPUT;
 800088e:	4b8d      	ldr	r3, [pc, #564]	; (8000ac4 <main+0x300>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
	Output_4_in.Pull=GPIO_NOPULL;
 8000894:	4b8b      	ldr	r3, [pc, #556]	; (8000ac4 <main+0x300>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
	Output_4_in.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	4b8a      	ldr	r3, [pc, #552]	; (8000ac4 <main+0x300>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
	Output_4_out.Pin=Output_4_Pin;
 80008a0:	4b89      	ldr	r3, [pc, #548]	; (8000ac8 <main+0x304>)
 80008a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008a6:	601a      	str	r2, [r3, #0]
	Output_4_out.Mode=GPIO_MODE_OUTPUT_PP;
 80008a8:	4b87      	ldr	r3, [pc, #540]	; (8000ac8 <main+0x304>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
	Output_4_out.Pull=GPIO_NOPULL;
 80008ae:	4b86      	ldr	r3, [pc, #536]	; (8000ac8 <main+0x304>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	Output_4_out.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	4b84      	ldr	r3, [pc, #528]	; (8000ac8 <main+0x304>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	60da      	str	r2, [r3, #12]


	MX_USB_DEVICE_Init();
 80008ba:	f007 fa3b 	bl	8007d34 <MX_USB_DEVICE_Init>
	HAL_GPIO_Init(GPIOB, &Output_1_out);
 80008be:	497c      	ldr	r1, [pc, #496]	; (8000ab0 <main+0x2ec>)
 80008c0:	4882      	ldr	r0, [pc, #520]	; (8000acc <main+0x308>)
 80008c2:	f001 fd69 	bl	8002398 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &Output_2_out);
 80008c6:	497c      	ldr	r1, [pc, #496]	; (8000ab8 <main+0x2f4>)
 80008c8:	4880      	ldr	r0, [pc, #512]	; (8000acc <main+0x308>)
 80008ca:	f001 fd65 	bl	8002398 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &Output_3_out);
 80008ce:	497c      	ldr	r1, [pc, #496]	; (8000ac0 <main+0x2fc>)
 80008d0:	487e      	ldr	r0, [pc, #504]	; (8000acc <main+0x308>)
 80008d2:	f001 fd61 	bl	8002398 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &Output_4_out);
 80008d6:	497c      	ldr	r1, [pc, #496]	; (8000ac8 <main+0x304>)
 80008d8:	487c      	ldr	r0, [pc, #496]	; (8000acc <main+0x308>)
 80008da:	f001 fd5d 	bl	8002398 <HAL_GPIO_Init>
	HAL_ADC_Start_DMA(&hadc1, &adc_results_1, 10);
 80008de:	220a      	movs	r2, #10
 80008e0:	497b      	ldr	r1, [pc, #492]	; (8000ad0 <main+0x30c>)
 80008e2:	487c      	ldr	r0, [pc, #496]	; (8000ad4 <main+0x310>)
 80008e4:	f000 fe18 	bl	8001518 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80008e8:	487b      	ldr	r0, [pc, #492]	; (8000ad8 <main+0x314>)
 80008ea:	f004 f8ad 	bl	8004a48 <HAL_TIM_Base_Start_IT>
		//			//			 keyBoardHIDsub.KEYCODE8=0x00;  // Release C key
		//			//			 keyBoardHIDsub.KEYCODE9=0x00;  // Release C key
		//		}
		//		// Pretend we have to do something else for a while

		if(rx_buff_flag == 1){
 80008ee:	4b7b      	ldr	r3, [pc, #492]	; (8000adc <main+0x318>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	f040 82c3 	bne.w	8000e7e <main+0x6ba>
			rx_buff_flag = 0;
 80008f8:	4b78      	ldr	r3, [pc, #480]	; (8000adc <main+0x318>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]


			switch(rx_buff[0]) {
 80008fe:	4b78      	ldr	r3, [pc, #480]	; (8000ae0 <main+0x31c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b39      	cmp	r3, #57	; 0x39
 8000904:	dc5a      	bgt.n	80009bc <main+0x1f8>
 8000906:	2b30      	cmp	r3, #48	; 0x30
 8000908:	f280 821b 	bge.w	8000d42 <main+0x57e>
				CDC_Transmit(0,msg2, s);
			}

			break;
			default:
				break;
 800090c:	e2b9      	b.n	8000e82 <main+0x6be>
			switch(rx_buff[0]) {
 800090e:	3b4f      	subs	r3, #79	; 0x4f
 8000910:	2b27      	cmp	r3, #39	; 0x27
 8000912:	f200 82b6 	bhi.w	8000e82 <main+0x6be>
 8000916:	a201      	add	r2, pc, #4	; (adr r2, 800091c <main+0x158>)
 8000918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091c:	080009c9 	.word	0x080009c9
 8000920:	08000e83 	.word	0x08000e83
 8000924:	08000e83 	.word	0x08000e83
 8000928:	08000e83 	.word	0x08000e83
 800092c:	08000e83 	.word	0x08000e83
 8000930:	08000c9f 	.word	0x08000c9f
 8000934:	08000e83 	.word	0x08000e83
 8000938:	08000a8b 	.word	0x08000a8b
 800093c:	08000e83 	.word	0x08000e83
 8000940:	08000e83 	.word	0x08000e83
 8000944:	08000e83 	.word	0x08000e83
 8000948:	08000e83 	.word	0x08000e83
 800094c:	08000e83 	.word	0x08000e83
 8000950:	08000e83 	.word	0x08000e83
 8000954:	08000e83 	.word	0x08000e83
 8000958:	08000e83 	.word	0x08000e83
 800095c:	08000e83 	.word	0x08000e83
 8000960:	08000e83 	.word	0x08000e83
 8000964:	08000e83 	.word	0x08000e83
 8000968:	08000e83 	.word	0x08000e83
 800096c:	08000e83 	.word	0x08000e83
 8000970:	08000e83 	.word	0x08000e83
 8000974:	08000e83 	.word	0x08000e83
 8000978:	08000e83 	.word	0x08000e83
 800097c:	08000e83 	.word	0x08000e83
 8000980:	08000e83 	.word	0x08000e83
 8000984:	08000e83 	.word	0x08000e83
 8000988:	08000e83 	.word	0x08000e83
 800098c:	08000e83 	.word	0x08000e83
 8000990:	08000e83 	.word	0x08000e83
 8000994:	08000e83 	.word	0x08000e83
 8000998:	08000e83 	.word	0x08000e83
 800099c:	080009c9 	.word	0x080009c9
 80009a0:	08000e83 	.word	0x08000e83
 80009a4:	08000e83 	.word	0x08000e83
 80009a8:	08000e83 	.word	0x08000e83
 80009ac:	08000e83 	.word	0x08000e83
 80009b0:	08000c9f 	.word	0x08000c9f
 80009b4:	08000e83 	.word	0x08000e83
 80009b8:	08000a8b 	.word	0x08000a8b
 80009bc:	2b76      	cmp	r3, #118	; 0x76
 80009be:	f300 8260 	bgt.w	8000e82 <main+0x6be>
 80009c2:	2b4f      	cmp	r3, #79	; 0x4f
 80009c4:	daa3      	bge.n	800090e <main+0x14a>
				break;
 80009c6:	e25c      	b.n	8000e82 <main+0x6be>
				for (int i = 0; i < 10; ++i) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
 80009cc:	e059      	b.n	8000a82 <main+0x2be>
					for (int j = 0; j < 4; ++j) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
 80009d2:	e050      	b.n	8000a76 <main+0x2b2>
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d84a      	bhi.n	8000a70 <main+0x2ac>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <main+0x21c>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	080009f1 	.word	0x080009f1
 80009e4:	08000a11 	.word	0x08000a11
 80009e8:	08000a31 	.word	0x08000a31
 80009ec:	08000a51 	.word	0x08000a51
							sensor_offsets[i+j*10]=adc_results_1[i];
 80009f0:	6a3a      	ldr	r2, [r7, #32]
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	461a      	mov	r2, r3
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	4413      	add	r3, r2
 8000a00:	4933      	ldr	r1, [pc, #204]	; (8000ad0 <main+0x30c>)
 8000a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a04:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000a08:	4a36      	ldr	r2, [pc, #216]	; (8000ae4 <main+0x320>)
 8000a0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							break;
 8000a0e:	e02f      	b.n	8000a70 <main+0x2ac>
							sensor_offsets[i+j*10]=adc_results_2[i];
 8000a10:	6a3a      	ldr	r2, [r7, #32]
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	4413      	add	r3, r2
 8000a20:	4931      	ldr	r1, [pc, #196]	; (8000ae8 <main+0x324>)
 8000a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a24:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000a28:	4a2e      	ldr	r2, [pc, #184]	; (8000ae4 <main+0x320>)
 8000a2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							break;
 8000a2e:	e01f      	b.n	8000a70 <main+0x2ac>
							sensor_offsets[i+j*10]=adc_results_3[i];
 8000a30:	6a3a      	ldr	r2, [r7, #32]
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	4413      	add	r3, r2
 8000a40:	492a      	ldr	r1, [pc, #168]	; (8000aec <main+0x328>)
 8000a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a44:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000a48:	4a26      	ldr	r2, [pc, #152]	; (8000ae4 <main+0x320>)
 8000a4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							break;
 8000a4e:	e00f      	b.n	8000a70 <main+0x2ac>
							sensor_offsets[i+j*10]=adc_results_4[i];
 8000a50:	6a3a      	ldr	r2, [r7, #32]
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	4413      	add	r3, r2
 8000a60:	4923      	ldr	r1, [pc, #140]	; (8000af0 <main+0x32c>)
 8000a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a64:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000a68:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <main+0x320>)
 8000a6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							break;
 8000a6e:	bf00      	nop
					for (int j = 0; j < 4; ++j) {
 8000a70:	6a3b      	ldr	r3, [r7, #32]
 8000a72:	3301      	adds	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	ddab      	ble.n	80009d4 <main+0x210>
				for (int i = 0; i < 10; ++i) {
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	3301      	adds	r3, #1
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	2b09      	cmp	r3, #9
 8000a86:	dda2      	ble.n	80009ce <main+0x20a>
				break;
 8000a88:	e1fe      	b.n	8000e88 <main+0x6c4>
				s=0;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <main+0x330>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	801a      	strh	r2, [r3, #0]
				s = sprintf(msg2, "v");
 8000a90:	4919      	ldr	r1, [pc, #100]	; (8000af8 <main+0x334>)
 8000a92:	481a      	ldr	r0, [pc, #104]	; (8000afc <main+0x338>)
 8000a94:	f00a f9c2 	bl	800ae1c <siprintf>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <main+0x330>)
 8000a9e:	801a      	strh	r2, [r3, #0]
				for (int i = 0; i < 10; ++i) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
 8000aa4:	e0de      	b.n	8000c64 <main+0x4a0>
					for (int j = 0; j < 4; ++j) {
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	e0d4      	b.n	8000c56 <main+0x492>
 8000aac:	20000708 	.word	0x20000708
 8000ab0:	20000718 	.word	0x20000718
 8000ab4:	20000728 	.word	0x20000728
 8000ab8:	20000738 	.word	0x20000738
 8000abc:	20000748 	.word	0x20000748
 8000ac0:	20000758 	.word	0x20000758
 8000ac4:	20000768 	.word	0x20000768
 8000ac8:	20000778 	.word	0x20000778
 8000acc:	40010c00 	.word	0x40010c00
 8000ad0:	20000494 	.word	0x20000494
 8000ad4:	20000418 	.word	0x20000418
 8000ad8:	2000078c 	.word	0x2000078c
 8000adc:	200006f7 	.word	0x200006f7
 8000ae0:	200005f8 	.word	0x200005f8
 8000ae4:	20000054 	.word	0x20000054
 8000ae8:	200004a8 	.word	0x200004a8
 8000aec:	200004bc 	.word	0x200004bc
 8000af0:	200004d0 	.word	0x200004d0
 8000af4:	200005f0 	.word	0x200005f0
 8000af8:	0800c09c 	.word	0x0800c09c
 8000afc:	200004f0 	.word	0x200004f0
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	f200 80a4 	bhi.w	8000c50 <main+0x48c>
 8000b08:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <main+0x34c>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b21 	.word	0x08000b21
 8000b14:	08000b6d 	.word	0x08000b6d
 8000b18:	08000bb9 	.word	0x08000bb9
 8000b1c:	08000c05 	.word	0x08000c05
							s += sprintf(msg2+s, " %d", ((sensor_offsets[i+j*10]*1024)/adc_results_1[i])-1024);
 8000b20:	4ba5      	ldr	r3, [pc, #660]	; (8000db8 <main+0x5f4>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4ba5      	ldr	r3, [pc, #660]	; (8000dbc <main+0x5f8>)
 8000b28:	18d0      	adds	r0, r2, r3
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	461a      	mov	r2, r3
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4aa1      	ldr	r2, [pc, #644]	; (8000dc0 <main+0x5fc>)
 8000b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b40:	029b      	lsls	r3, r3, #10
 8000b42:	49a0      	ldr	r1, [pc, #640]	; (8000dc4 <main+0x600>)
 8000b44:	69fa      	ldr	r2, [r7, #28]
 8000b46:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8000b4e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000b52:	461a      	mov	r2, r3
 8000b54:	499c      	ldr	r1, [pc, #624]	; (8000dc8 <main+0x604>)
 8000b56:	f00a f961 	bl	800ae1c <siprintf>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b96      	ldr	r3, [pc, #600]	; (8000db8 <main+0x5f4>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b94      	ldr	r3, [pc, #592]	; (8000db8 <main+0x5f4>)
 8000b68:	801a      	strh	r2, [r3, #0]
							break;
 8000b6a:	e071      	b.n	8000c50 <main+0x48c>
							s += sprintf(msg2+s, " %d", ((sensor_offsets[i+j*10]*1024)/adc_results_2[i])-1024);
 8000b6c:	4b92      	ldr	r3, [pc, #584]	; (8000db8 <main+0x5f4>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b92      	ldr	r3, [pc, #584]	; (8000dbc <main+0x5f8>)
 8000b74:	18d0      	adds	r0, r2, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	461a      	mov	r2, r3
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a8e      	ldr	r2, [pc, #568]	; (8000dc0 <main+0x5fc>)
 8000b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b8c:	029b      	lsls	r3, r3, #10
 8000b8e:	498f      	ldr	r1, [pc, #572]	; (8000dcc <main+0x608>)
 8000b90:	69fa      	ldr	r2, [r7, #28]
 8000b92:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000b96:	fb93 f3f2 	sdiv	r3, r3, r2
 8000b9a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4989      	ldr	r1, [pc, #548]	; (8000dc8 <main+0x604>)
 8000ba2:	f00a f93b 	bl	800ae1c <siprintf>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b83      	ldr	r3, [pc, #524]	; (8000db8 <main+0x5f4>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b81      	ldr	r3, [pc, #516]	; (8000db8 <main+0x5f4>)
 8000bb4:	801a      	strh	r2, [r3, #0]
							break;
 8000bb6:	e04b      	b.n	8000c50 <main+0x48c>
							s += sprintf(msg2+s, " %d", ((sensor_offsets[i+j*10]*1024)/adc_results_3[i])-1024);
 8000bb8:	4b7f      	ldr	r3, [pc, #508]	; (8000db8 <main+0x5f4>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b7f      	ldr	r3, [pc, #508]	; (8000dbc <main+0x5f8>)
 8000bc0:	18d0      	adds	r0, r2, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	461a      	mov	r2, r3
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a7b      	ldr	r2, [pc, #492]	; (8000dc0 <main+0x5fc>)
 8000bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd8:	029b      	lsls	r3, r3, #10
 8000bda:	497d      	ldr	r1, [pc, #500]	; (8000dd0 <main+0x60c>)
 8000bdc:	69fa      	ldr	r2, [r7, #28]
 8000bde:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000be2:	fb93 f3f2 	sdiv	r3, r3, r2
 8000be6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000bea:	461a      	mov	r2, r3
 8000bec:	4976      	ldr	r1, [pc, #472]	; (8000dc8 <main+0x604>)
 8000bee:	f00a f915 	bl	800ae1c <siprintf>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <main+0x5f4>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b6e      	ldr	r3, [pc, #440]	; (8000db8 <main+0x5f4>)
 8000c00:	801a      	strh	r2, [r3, #0]
							break;
 8000c02:	e025      	b.n	8000c50 <main+0x48c>
							s += sprintf(msg2+s, " %d", ((sensor_offsets[i+j*10]*1024)/adc_results_4[i])-1024);
 8000c04:	4b6c      	ldr	r3, [pc, #432]	; (8000db8 <main+0x5f4>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b6c      	ldr	r3, [pc, #432]	; (8000dbc <main+0x5f8>)
 8000c0c:	18d0      	adds	r0, r2, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	461a      	mov	r2, r3
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a68      	ldr	r2, [pc, #416]	; (8000dc0 <main+0x5fc>)
 8000c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c24:	029b      	lsls	r3, r3, #10
 8000c26:	496b      	ldr	r1, [pc, #428]	; (8000dd4 <main+0x610>)
 8000c28:	69fa      	ldr	r2, [r7, #28]
 8000c2a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000c2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000c32:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000c36:	461a      	mov	r2, r3
 8000c38:	4963      	ldr	r1, [pc, #396]	; (8000dc8 <main+0x604>)
 8000c3a:	f00a f8ef 	bl	800ae1c <siprintf>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b5d      	ldr	r3, [pc, #372]	; (8000db8 <main+0x5f4>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b5b      	ldr	r3, [pc, #364]	; (8000db8 <main+0x5f4>)
 8000c4c:	801a      	strh	r2, [r3, #0]
							break;
 8000c4e:	bf00      	nop
					for (int j = 0; j < 4; ++j) {
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	3301      	adds	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	f77f af51 	ble.w	8000b00 <main+0x33c>
				for (int i = 0; i < 10; ++i) {
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3301      	adds	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	2b09      	cmp	r3, #9
 8000c68:	f77f af1d 	ble.w	8000aa6 <main+0x2e2>
				s += sprintf(msg2+s, "\n");
 8000c6c:	4b52      	ldr	r3, [pc, #328]	; (8000db8 <main+0x5f4>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b52      	ldr	r3, [pc, #328]	; (8000dbc <main+0x5f8>)
 8000c74:	4413      	add	r3, r2
 8000c76:	4958      	ldr	r1, [pc, #352]	; (8000dd8 <main+0x614>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00a f8cf 	bl	800ae1c <siprintf>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b4d      	ldr	r3, [pc, #308]	; (8000db8 <main+0x5f4>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <main+0x5f4>)
 8000c8c:	801a      	strh	r2, [r3, #0]
				CDC_Transmit(0,msg2, s);
 8000c8e:	4b4a      	ldr	r3, [pc, #296]	; (8000db8 <main+0x5f4>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4949      	ldr	r1, [pc, #292]	; (8000dbc <main+0x5f8>)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f007 f9b6 	bl	8008008 <CDC_Transmit>
				break;
 8000c9c:	e0f4      	b.n	8000e88 <main+0x6c4>
				s=0;
 8000c9e:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <main+0x5f4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	801a      	strh	r2, [r3, #0]
				s = sprintf(msg2, "t");
 8000ca4:	494d      	ldr	r1, [pc, #308]	; (8000ddc <main+0x618>)
 8000ca6:	4845      	ldr	r0, [pc, #276]	; (8000dbc <main+0x5f8>)
 8000ca8:	f00a f8b8 	bl	800ae1c <siprintf>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b41      	ldr	r3, [pc, #260]	; (8000db8 <main+0x5f4>)
 8000cb2:	801a      	strh	r2, [r3, #0]
				for (int i = 0; i < 10; ++i) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	e027      	b.n	8000d0a <main+0x546>
					for (int j = 0; j < 4; ++j) {
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	e01e      	b.n	8000cfe <main+0x53a>
						s += sprintf(msg2+s, " %d", sensor_treshholds[i+j*10]);
 8000cc0:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <main+0x5f4>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <main+0x5f8>)
 8000cc8:	18d0      	adds	r0, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a41      	ldr	r2, [pc, #260]	; (8000de0 <main+0x61c>)
 8000cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4939      	ldr	r1, [pc, #228]	; (8000dc8 <main+0x604>)
 8000ce4:	f00a f89a 	bl	800ae1c <siprintf>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <main+0x5f4>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <main+0x5f4>)
 8000cf6:	801a      	strh	r2, [r3, #0]
					for (int j = 0; j < 4; ++j) {
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	dddd      	ble.n	8000cc0 <main+0x4fc>
				for (int i = 0; i < 10; ++i) {
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3301      	adds	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2b09      	cmp	r3, #9
 8000d0e:	ddd4      	ble.n	8000cba <main+0x4f6>
				s += sprintf(msg2+s, "\n");
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <main+0x5f4>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <main+0x5f8>)
 8000d18:	4413      	add	r3, r2
 8000d1a:	492f      	ldr	r1, [pc, #188]	; (8000dd8 <main+0x614>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00a f87d 	bl	800ae1c <siprintf>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <main+0x5f4>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <main+0x5f4>)
 8000d30:	801a      	strh	r2, [r3, #0]
				CDC_Transmit(0,msg2, s);
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <main+0x5f4>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4920      	ldr	r1, [pc, #128]	; (8000dbc <main+0x5f8>)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f007 f964 	bl	8008008 <CDC_Transmit>
				break;
 8000d40:	e0a2      	b.n	8000e88 <main+0x6c4>
			sscanf(rx_buff,"%hu %hu",&num1,&num2);
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <main+0x620>)
 8000d44:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <main+0x624>)
 8000d46:	4929      	ldr	r1, [pc, #164]	; (8000dec <main+0x628>)
 8000d48:	4829      	ldr	r0, [pc, #164]	; (8000df0 <main+0x62c>)
 8000d4a:	f00a f887 	bl	800ae5c <siscanf>
					sprintf(msg, "%d", num1);
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <main+0x624>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	4927      	ldr	r1, [pc, #156]	; (8000df4 <main+0x630>)
 8000d56:	4828      	ldr	r0, [pc, #160]	; (8000df8 <main+0x634>)
 8000d58:	f00a f860 	bl	800ae1c <siprintf>
					CDC_Transmit(0,msg, sizeof(msg));
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	4926      	ldr	r1, [pc, #152]	; (8000df8 <main+0x634>)
 8000d60:	2000      	movs	r0, #0
 8000d62:	f007 f951 	bl	8008008 <CDC_Transmit>
			if (num1 < 40&&num2 > 0 && num2 <1023) {
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <main+0x624>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	2b27      	cmp	r3, #39	; 0x27
 8000d6c:	f200 808b 	bhi.w	8000e86 <main+0x6c2>
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <main+0x620>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 8086 	beq.w	8000e86 <main+0x6c2>
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <main+0x620>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d87f      	bhi.n	8000e86 <main+0x6c2>
				sensor_treshholds[num1]=num2;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <main+0x624>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <main+0x620>)
 8000d8e:	8819      	ldrh	r1, [r3, #0]
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <main+0x61c>)
 8000d92:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				s=0;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <main+0x5f4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	801a      	strh	r2, [r3, #0]
				s = sprintf(msg2, "t");
 8000d9c:	490f      	ldr	r1, [pc, #60]	; (8000ddc <main+0x618>)
 8000d9e:	4807      	ldr	r0, [pc, #28]	; (8000dbc <main+0x5f8>)
 8000da0:	f00a f83c 	bl	800ae1c <siprintf>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <main+0x5f4>)
 8000daa:	801a      	strh	r2, [r3, #0]
				for (int i = 0; i < 10; ++i) {
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e049      	b.n	8000e46 <main+0x682>
					for (int j = 0; j < 4; ++j) {
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	e040      	b.n	8000e3a <main+0x676>
 8000db8:	200005f0 	.word	0x200005f0
 8000dbc:	200004f0 	.word	0x200004f0
 8000dc0:	20000054 	.word	0x20000054
 8000dc4:	20000494 	.word	0x20000494
 8000dc8:	0800c0a0 	.word	0x0800c0a0
 8000dcc:	200004a8 	.word	0x200004a8
 8000dd0:	200004bc 	.word	0x200004bc
 8000dd4:	200004d0 	.word	0x200004d0
 8000dd8:	0800c0a4 	.word	0x0800c0a4
 8000ddc:	0800c0a8 	.word	0x0800c0a8
 8000de0:	20000004 	.word	0x20000004
 8000de4:	200005f4 	.word	0x200005f4
 8000de8:	200005f2 	.word	0x200005f2
 8000dec:	0800c0ac 	.word	0x0800c0ac
 8000df0:	200005f8 	.word	0x200005f8
 8000df4:	0800c0b4 	.word	0x0800c0b4
 8000df8:	200004e4 	.word	0x200004e4
						s += sprintf(msg2+s, " %d", sensor_treshholds[i+j*10]);
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <main+0x6c8>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <main+0x6cc>)
 8000e04:	18d0      	adds	r0, r2, r3
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	461a      	mov	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <main+0x6d0>)
 8000e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	491e      	ldr	r1, [pc, #120]	; (8000e98 <main+0x6d4>)
 8000e20:	f009 fffc 	bl	800ae1c <siprintf>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <main+0x6c8>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <main+0x6c8>)
 8000e32:	801a      	strh	r2, [r3, #0]
					for (int j = 0; j < 4; ++j) {
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	dddd      	ble.n	8000dfc <main+0x638>
				for (int i = 0; i < 10; ++i) {
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	ddb2      	ble.n	8000db2 <main+0x5ee>
				s += sprintf(msg2+s, "\n");
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <main+0x6c8>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <main+0x6cc>)
 8000e54:	4413      	add	r3, r2
 8000e56:	4911      	ldr	r1, [pc, #68]	; (8000e9c <main+0x6d8>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f009 ffdf 	bl	800ae1c <siprintf>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <main+0x6c8>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <main+0x6c8>)
 8000e6c:	801a      	strh	r2, [r3, #0]
				CDC_Transmit(0,msg2, s);
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <main+0x6c8>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	4906      	ldr	r1, [pc, #24]	; (8000e90 <main+0x6cc>)
 8000e76:	2000      	movs	r0, #0
 8000e78:	f007 f8c6 	bl	8008008 <CDC_Transmit>
			break;
 8000e7c:	e003      	b.n	8000e86 <main+0x6c2>
			}

			//			MessageLength = sprintf(DataToSend, "Odebrano: %s\n\r", ReceivedData);
			//			CDC_Transmit_FS(DataToSend, MessageLength);
		}
 8000e7e:	bf00      	nop
 8000e80:	e535      	b.n	80008ee <main+0x12a>
				break;
 8000e82:	bf00      	nop
 8000e84:	e533      	b.n	80008ee <main+0x12a>
			break;
 8000e86:	bf00      	nop
		if(rx_buff_flag == 1){
 8000e88:	e531      	b.n	80008ee <main+0x12a>
 8000e8a:	bf00      	nop
 8000e8c:	200005f0 	.word	0x200005f0
 8000e90:	200004f0 	.word	0x200004f0
 8000e94:	20000004 	.word	0x20000004
 8000e98:	0800c0a0 	.word	0x0800c0a0
 8000e9c:	0800c0a4 	.word	0x0800c0a4

08000ea0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	; 0x50
 8000ea4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eaa:	2228      	movs	r2, #40	; 0x28
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f009 ff78 	bl	800ada4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eea:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000eec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 f8b8 	bl	800406c <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000f02:	f000 f82b 	bl	8000f5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f16:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2101      	movs	r1, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fb24 	bl	8004570 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000f2e:	f000 f815 	bl	8000f5c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000f32:	2312      	movs	r3, #18
 8000f34:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000f36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f3a:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f40:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fc79 	bl	800483c <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000f50:	f000 f804 	bl	8000f5c <Error_Handler>
	}
}
 8000f54:	bf00      	nop
 8000f56:	3750      	adds	r7, #80	; 0x50
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_MspInit+0x40>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_MspInit+0x40>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_MspInit+0x40>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_MspInit+0x40>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_MspInit+0x40>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_MspInit+0x40>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff2:	f000 f99d 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <DMA1_Channel1_IRQHandler+0x10>)
 8001002:	f001 f895 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000448 	.word	0x20000448

08001010 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <ADC1_2_IRQHandler+0x10>)
 8001016:	f000 fba8 	bl	800176a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000418 	.word	0x20000418

08001024 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800102a:	f001 fc82 	bl	8002932 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200007d4 	.word	0x200007d4

08001038 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800103e:	f001 fc78 	bl	8002932 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200007d4 	.word	0x200007d4

0800104c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM2_IRQHandler+0x10>)
 8001052:	f003 fd4b 	bl	8004aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000078c 	.word	0x2000078c

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f009 fe50 	bl	800ad34 <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20005000 	.word	0x20005000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	20000788 	.word	0x20000788
 80010c8:	200013d0 	.word	0x200013d0

080010cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_TIM2_Init+0x94>)
 80010f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_TIM2_Init+0x94>)
 80010fe:	f240 321f 	movw	r2, #799	; 0x31f
 8001102:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_TIM2_Init+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_TIM2_Init+0x94>)
 800110c:	2263      	movs	r2, #99	; 0x63
 800110e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_TIM2_Init+0x94>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_TIM2_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800111c:	4813      	ldr	r0, [pc, #76]	; (800116c <MX_TIM2_Init+0x94>)
 800111e:	f003 fc43 	bl	80049a8 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001128:	f7ff ff18 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <MX_TIM2_Init+0x94>)
 800113a:	f003 fddf 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001144:	f7ff ff0a 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_TIM2_Init+0x94>)
 8001156:	f003 ffb1 	bl	80050bc <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001160:	f7ff fefc 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000078c 	.word	0x2000078c

08001170 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001180:	d113      	bne.n	80011aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_TIM_Base_MspInit+0x44>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_TIM_Base_MspInit+0x44>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_TIM_Base_MspInit+0x44>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	201c      	movs	r0, #28
 80011a0:	f000 fe9b 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011a4:	201c      	movs	r0, #28
 80011a6:	f000 feb4 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000

080011b8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_USB_PCD_Init+0x3c>)
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <MX_USB_PCD_Init+0x40>)
 80011c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USB_PCD_Init+0x3c>)
 80011c4:	2208      	movs	r2, #8
 80011c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_USB_PCD_Init+0x3c>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USB_PCD_Init+0x3c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_USB_PCD_Init+0x3c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USB_PCD_Init+0x3c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_USB_PCD_Init+0x3c>)
 80011e2:	f001 fa75 	bl	80026d0 <HAL_PCD_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80011ec:	f7ff feb6 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200007d4 	.word	0x200007d4
 80011f8:	40005c00 	.word	0x40005c00

080011fc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a11      	ldr	r2, [pc, #68]	; (8001250 <HAL_PCD_MspInit+0x54>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d11b      	bne.n	8001246 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_PCD_MspInit+0x58>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_PCD_MspInit+0x58>)
 8001214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_PCD_MspInit+0x58>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2013      	movs	r0, #19
 800122c:	f000 fe55 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001230:	2013      	movs	r0, #19
 8001232:	f000 fe6e 	bl	8001f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2014      	movs	r0, #20
 800123c:	f000 fe4d 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001240:	2014      	movs	r0, #20
 8001242:	f000 fe66 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40005c00 	.word	0x40005c00
 8001254:	40021000 	.word	0x40021000

08001258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	; (8001290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800127e:	f7ff ff25 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f009 fd5d 	bl	800ad40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001286:	f7ff fa9d 	bl	80007c4 <main>
  bx lr
 800128a:	4770      	bx	lr
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	200003fc 	.word	0x200003fc
  ldr r2, =_sidata
 8001294:	0800c310 	.word	0x0800c310
  ldr r2, =_sbss
 8001298:	200003fc 	.word	0x200003fc
  ldr r4, =_ebss
 800129c:	200013d0 	.word	0x200013d0

080012a0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <CAN1_RX1_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_Init+0x28>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_Init+0x28>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 fe05 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ba:	200f      	movs	r0, #15
 80012bc:	f000 f808 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c0:	f7ff fe52 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40022000 	.word	0x40022000

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fe1d 	bl	8001f2e <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800130c:	f000 fde5 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000a4 	.word	0x200000a4
 8001328:	200000ac 	.word	0x200000ac
 800132c:	200000a8 	.word	0x200000a8

08001330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_IncTick+0x1c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x20>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a03      	ldr	r2, [pc, #12]	; (8001350 <HAL_IncTick+0x20>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	200000ac 	.word	0x200000ac
 8001350:	20000ac0 	.word	0x20000ac0

08001354 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <HAL_GetTick+0x10>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000ac0 	.word	0x20000ac0

08001368 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0be      	b.n	8001508 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7fe ff96 	bl	80002d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fc0d 	bl	8001bcc <ADC_ConversionStop_Disable>
 80013b2:	4603      	mov	r3, r0
 80013b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 8099 	bne.w	80014f6 <HAL_ADC_Init+0x18e>
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 8095 	bne.w	80014f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013d4:	f023 0302 	bic.w	r3, r3, #2
 80013d8:	f043 0202 	orr.w	r2, r3, #2
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7b1b      	ldrb	r3, [r3, #12]
 80013ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001400:	d003      	beq.n	800140a <HAL_ADC_Init+0xa2>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d102      	bne.n	8001410 <HAL_ADC_Init+0xa8>
 800140a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140e:	e000      	b.n	8001412 <HAL_ADC_Init+0xaa>
 8001410:	2300      	movs	r3, #0
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7d1b      	ldrb	r3, [r3, #20]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d119      	bne.n	8001454 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7b1b      	ldrb	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	3b01      	subs	r3, #1
 800142e:	035a      	lsls	r2, r3, #13
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	e00b      	b.n	8001454 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f043 0220 	orr.w	r2, r3, #32
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	430a      	orrs	r2, r1
 8001466:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_ADC_Init+0x1a8>)
 8001470:	4013      	ands	r3, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	430b      	orrs	r3, r1
 800147a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001484:	d003      	beq.n	800148e <HAL_ADC_Init+0x126>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d104      	bne.n	8001498 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	3b01      	subs	r3, #1
 8001494:	051b      	lsls	r3, r3, #20
 8001496:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_ADC_Init+0x1ac>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d10b      	bne.n	80014d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014d2:	e018      	b.n	8001506 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	f023 0312 	bic.w	r3, r3, #18
 80014dc:	f043 0210 	orr.w	r2, r3, #16
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014f4:	e007      	b.n	8001506 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	f043 0210 	orr.w	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001506:	7dfb      	ldrb	r3, [r7, #23]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	ffe1f7fd 	.word	0xffe1f7fd
 8001514:	ff1f0efe 	.word	0xff1f0efe

08001518 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a64      	ldr	r2, [pc, #400]	; (80016c0 <HAL_ADC_Start_DMA+0x1a8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d004      	beq.n	800153c <HAL_ADC_Start_DMA+0x24>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a63      	ldr	r2, [pc, #396]	; (80016c4 <HAL_ADC_Start_DMA+0x1ac>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d106      	bne.n	800154a <HAL_ADC_Start_DMA+0x32>
 800153c:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <HAL_ADC_Start_DMA+0x1a8>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001544:	2b00      	cmp	r3, #0
 8001546:	f040 80b3 	bne.w	80016b0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_ADC_Start_DMA+0x40>
 8001554:	2302      	movs	r3, #2
 8001556:	e0ae      	b.n	80016b6 <HAL_ADC_Start_DMA+0x19e>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 fad9 	bl	8001b18 <ADC_Enable>
 8001566:	4603      	mov	r3, r0
 8001568:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 809a 	bne.w	80016a6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <HAL_ADC_Start_DMA+0x1ac>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d105      	bne.n	800159c <HAL_ADC_Start_DMA+0x84>
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d115      	bne.n	80015c8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d026      	beq.n	8001604 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015c6:	e01d      	b.n	8001604 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a39      	ldr	r2, [pc, #228]	; (80016c0 <HAL_ADC_Start_DMA+0x1a8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d004      	beq.n	80015e8 <HAL_ADC_Start_DMA+0xd0>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <HAL_ADC_Start_DMA+0x1ac>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d10d      	bne.n	8001604 <HAL_ADC_Start_DMA+0xec>
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_ADC_Start_DMA+0x1a8>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	f023 0206 	bic.w	r2, r3, #6
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
 800161c:	e002      	b.n	8001624 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_ADC_Start_DMA+0x1b0>)
 8001632:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a24      	ldr	r2, [pc, #144]	; (80016cc <HAL_ADC_Start_DMA+0x1b4>)
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <HAL_ADC_Start_DMA+0x1b8>)
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0202 	mvn.w	r2, #2
 800164c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800165c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a18      	ldr	r0, [r3, #32]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	334c      	adds	r3, #76	; 0x4c
 8001668:	4619      	mov	r1, r3
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f000 fcc5 	bl	8001ffc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800167c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001680:	d108      	bne.n	8001694 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001690:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001692:	e00f      	b.n	80016b4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016a2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80016a4:	e006      	b.n	80016b4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80016ae:	e001      	b.n	80016b4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40012400 	.word	0x40012400
 80016c4:	40012800 	.word	0x40012800
 80016c8:	08001c4f 	.word	0x08001c4f
 80016cc:	08001ccb 	.word	0x08001ccb
 80016d0:	08001ce7 	.word	0x08001ce7

080016d4 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_Stop_DMA+0x1a>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e039      	b.n	8001762 <HAL_ADC_Stop_DMA+0x8e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fa68 	bl	8001bcc <ADC_ConversionStop_Disable>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d128      	bne.n	8001758 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001714:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800171e:	2b02      	cmp	r3, #2
 8001720:	d11a      	bne.n	8001758 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fcc7 	bl	80020ba <HAL_DMA_Abort>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10a      	bne.n	800174c <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
 800174a:	e005      	b.n	8001758 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b20      	cmp	r3, #32
 800177e:	d140      	bne.n	8001802 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b02      	cmp	r3, #2
 800178c:	d139      	bne.n	8001802 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017b4:	d11d      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d119      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0220 	bic.w	r2, r2, #32
 80017cc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe fe62 	bl	80004bc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f06f 0212 	mvn.w	r2, #18
 8001800:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180c:	2b80      	cmp	r3, #128	; 0x80
 800180e:	d14f      	bne.n	80018b0 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b04      	cmp	r3, #4
 800181c:	d148      	bne.n	80018b0 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d105      	bne.n	8001836 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001840:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001844:	d012      	beq.n	800186c <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001850:	2b00      	cmp	r3, #0
 8001852:	d125      	bne.n	80018a0 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800185e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001862:	d11d      	bne.n	80018a0 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001868:	2b00      	cmp	r3, #0
 800186a:	d119      	bne.n	80018a0 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f043 0201 	orr.w	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fa3a 	bl	8001d1a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f06f 020c 	mvn.w	r2, #12
 80018ae:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	d114      	bne.n	80018e8 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d10d      	bne.n	80018e8 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f812 	bl	8001902 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f06f 0201 	mvn.w	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
	...

08001928 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x20>
 8001944:	2302      	movs	r3, #2
 8001946:	e0dc      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x1da>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b06      	cmp	r3, #6
 8001956:	d81c      	bhi.n	8001992 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	3b05      	subs	r3, #5
 800196a:	221f      	movs	r2, #31
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	4019      	ands	r1, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b05      	subs	r3, #5
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	635a      	str	r2, [r3, #52]	; 0x34
 8001990:	e03c      	b.n	8001a0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d81c      	bhi.n	80019d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	3b23      	subs	r3, #35	; 0x23
 80019ac:	221f      	movs	r2, #31
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4019      	ands	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b23      	subs	r3, #35	; 0x23
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
 80019d2:	e01b      	b.n	8001a0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	3b41      	subs	r3, #65	; 0x41
 80019e6:	221f      	movs	r2, #31
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4019      	ands	r1, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b41      	subs	r3, #65	; 0x41
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d91c      	bls.n	8001a4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68d9      	ldr	r1, [r3, #12]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	3b1e      	subs	r3, #30
 8001a26:	2207      	movs	r2, #7
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4019      	ands	r1, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6898      	ldr	r0, [r3, #8]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b1e      	subs	r3, #30
 8001a40:	fa00 f203 	lsl.w	r2, r0, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	e019      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6919      	ldr	r1, [r3, #16]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2207      	movs	r2, #7
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4019      	ands	r1, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6898      	ldr	r0, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d003      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a8e:	2b11      	cmp	r3, #17
 8001a90:	d132      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <HAL_ADC_ConfigChannel+0x1e4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d125      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d126      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ab8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d11a      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	0c9a      	lsrs	r2, r3, #18
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad8:	e002      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x1b2>
 8001ae6:	e007      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40012400 	.word	0x40012400
 8001b10:	200000a4 	.word	0x200000a4
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d040      	beq.n	8001bb8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 0201 	orr.w	r2, r2, #1
 8001b44:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <ADC_Enable+0xac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <ADC_Enable+0xb0>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b54:	e002      	b.n	8001b5c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f9      	bne.n	8001b56 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b62:	f7ff fbf7 	bl	8001354 <HAL_GetTick>
 8001b66:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b68:	e01f      	b.n	8001baa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b6a:	f7ff fbf3 	bl	8001354 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d918      	bls.n	8001baa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d011      	beq.n	8001baa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	f043 0210 	orr.w	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e007      	b.n	8001bba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d1d8      	bne.n	8001b6a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200000a4 	.word	0x200000a4
 8001bc8:	431bde83 	.word	0x431bde83

08001bcc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d12e      	bne.n	8001c44 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bf6:	f7ff fbad 	bl	8001354 <HAL_GetTick>
 8001bfa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bfc:	e01b      	b.n	8001c36 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bfe:	f7ff fba9 	bl	8001354 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d914      	bls.n	8001c36 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10d      	bne.n	8001c36 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e007      	b.n	8001c46 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d0dc      	beq.n	8001bfe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d127      	bne.n	8001cb8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c7e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c82:	d115      	bne.n	8001cb0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d111      	bne.n	8001cb0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7fe fc03 	bl	80004bc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cb6:	e004      	b.n	8001cc2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4798      	blx	r3
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff fe09 	bl	80018f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	f043 0204 	orr.w	r2, r3, #4
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f7ff fe01 	bl	8001914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4906      	ldr	r1, [pc, #24]	; (8001dc4 <__NVIC_EnableIRQ+0x34>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	; (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea4:	f7ff ff90 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff2d 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff42 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff90 	bl	8001e1c <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5f 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff35 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e043      	b.n	8001fe6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_DMA_Init+0xa8>)
 8001f66:	4413      	add	r3, r2
 8001f68:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <HAL_DMA_Init+0xac>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	009a      	lsls	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_DMA_Init+0xb0>)
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	bffdfff8 	.word	0xbffdfff8
 8001ff4:	cccccccd 	.word	0xcccccccd
 8001ff8:	40020000 	.word	0x40020000

08001ffc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_DMA_Start_IT+0x20>
 8002018:	2302      	movs	r3, #2
 800201a:	e04a      	b.n	80020b2 <HAL_DMA_Start_IT+0xb6>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800202a:	2b01      	cmp	r3, #1
 800202c:	d13a      	bne.n	80020a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2202      	movs	r2, #2
 8002032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f972 	bl	800233c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 020e 	orr.w	r2, r2, #14
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e00f      	b.n	8002092 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0204 	bic.w	r2, r2, #4
 8002080:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 020a 	orr.w	r2, r2, #10
 8002090:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e005      	b.n	80020b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
 80020ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d008      	beq.n	80020e2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2204      	movs	r2, #4
 80020d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e020      	b.n	8002124 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 020e 	bic.w	r2, r2, #14
 80020f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f202 	lsl.w	r2, r1, r2
 8002110:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
	...

08002130 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2204      	movs	r2, #4
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d04f      	beq.n	80021f8 <HAL_DMA_IRQHandler+0xc8>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d04a      	beq.n	80021f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0204 	bic.w	r2, r2, #4
 800217e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a66      	ldr	r2, [pc, #408]	; (8002320 <HAL_DMA_IRQHandler+0x1f0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d029      	beq.n	80021de <HAL_DMA_IRQHandler+0xae>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a65      	ldr	r2, [pc, #404]	; (8002324 <HAL_DMA_IRQHandler+0x1f4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <HAL_DMA_IRQHandler+0xaa>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a63      	ldr	r2, [pc, #396]	; (8002328 <HAL_DMA_IRQHandler+0x1f8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xa4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a62      	ldr	r2, [pc, #392]	; (800232c <HAL_DMA_IRQHandler+0x1fc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d012      	beq.n	80021ce <HAL_DMA_IRQHandler+0x9e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a60      	ldr	r2, [pc, #384]	; (8002330 <HAL_DMA_IRQHandler+0x200>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00a      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x98>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a5f      	ldr	r2, [pc, #380]	; (8002334 <HAL_DMA_IRQHandler+0x204>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d102      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x92>
 80021bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021c0:	e00e      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021c6:	e00b      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021cc:	e008      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021d2:	e005      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d8:	e002      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021da:	2340      	movs	r3, #64	; 0x40
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021de:	2304      	movs	r3, #4
 80021e0:	4a55      	ldr	r2, [pc, #340]	; (8002338 <HAL_DMA_IRQHandler+0x208>)
 80021e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8094 	beq.w	8002316 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021f6:	e08e      	b.n	8002316 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	2202      	movs	r2, #2
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d056      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x186>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d051      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10b      	bne.n	8002238 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 020a 	bic.w	r2, r2, #10
 800222e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a38      	ldr	r2, [pc, #224]	; (8002320 <HAL_DMA_IRQHandler+0x1f0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d029      	beq.n	8002296 <HAL_DMA_IRQHandler+0x166>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a37      	ldr	r2, [pc, #220]	; (8002324 <HAL_DMA_IRQHandler+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <HAL_DMA_IRQHandler+0x162>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a35      	ldr	r2, [pc, #212]	; (8002328 <HAL_DMA_IRQHandler+0x1f8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01a      	beq.n	800228c <HAL_DMA_IRQHandler+0x15c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a34      	ldr	r2, [pc, #208]	; (800232c <HAL_DMA_IRQHandler+0x1fc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d012      	beq.n	8002286 <HAL_DMA_IRQHandler+0x156>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a32      	ldr	r2, [pc, #200]	; (8002330 <HAL_DMA_IRQHandler+0x200>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00a      	beq.n	8002280 <HAL_DMA_IRQHandler+0x150>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a31      	ldr	r2, [pc, #196]	; (8002334 <HAL_DMA_IRQHandler+0x204>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d102      	bne.n	800227a <HAL_DMA_IRQHandler+0x14a>
 8002274:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002278:	e00e      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 800227a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227e:	e00b      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 8002280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002284:	e008      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 8002286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228a:	e005      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 800228c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002290:	e002      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 8002292:	2320      	movs	r3, #32
 8002294:	e000      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 8002296:	2302      	movs	r3, #2
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <HAL_DMA_IRQHandler+0x208>)
 800229a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d034      	beq.n	8002316 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022b4:	e02f      	b.n	8002316 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2208      	movs	r2, #8
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d028      	beq.n	8002318 <HAL_DMA_IRQHandler+0x1e8>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d023      	beq.n	8002318 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 020e 	bic.w	r2, r2, #14
 80022de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
    }
  }
  return;
 8002316:	bf00      	nop
 8002318:	bf00      	nop
}
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40020008 	.word	0x40020008
 8002324:	4002001c 	.word	0x4002001c
 8002328:	40020030 	.word	0x40020030
 800232c:	40020044 	.word	0x40020044
 8002330:	40020058 	.word	0x40020058
 8002334:	4002006c 	.word	0x4002006c
 8002338:	40020000 	.word	0x40020000

0800233c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d108      	bne.n	800237c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800237a:	e007      	b.n	800238c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
	...

08002398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002398:	b480      	push	{r7}
 800239a:	b08b      	sub	sp, #44	; 0x2c
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023aa:	e169      	b.n	8002680 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023ac:	2201      	movs	r2, #1
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	f040 8158 	bne.w	800267a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a9a      	ldr	r2, [pc, #616]	; (8002638 <HAL_GPIO_Init+0x2a0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d05e      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023d4:	4a98      	ldr	r2, [pc, #608]	; (8002638 <HAL_GPIO_Init+0x2a0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d875      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023da:	4a98      	ldr	r2, [pc, #608]	; (800263c <HAL_GPIO_Init+0x2a4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d058      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023e0:	4a96      	ldr	r2, [pc, #600]	; (800263c <HAL_GPIO_Init+0x2a4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d86f      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023e6:	4a96      	ldr	r2, [pc, #600]	; (8002640 <HAL_GPIO_Init+0x2a8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d052      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023ec:	4a94      	ldr	r2, [pc, #592]	; (8002640 <HAL_GPIO_Init+0x2a8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d869      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023f2:	4a94      	ldr	r2, [pc, #592]	; (8002644 <HAL_GPIO_Init+0x2ac>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d04c      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023f8:	4a92      	ldr	r2, [pc, #584]	; (8002644 <HAL_GPIO_Init+0x2ac>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d863      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023fe:	4a92      	ldr	r2, [pc, #584]	; (8002648 <HAL_GPIO_Init+0x2b0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d046      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 8002404:	4a90      	ldr	r2, [pc, #576]	; (8002648 <HAL_GPIO_Init+0x2b0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d85d      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 800240a:	2b12      	cmp	r3, #18
 800240c:	d82a      	bhi.n	8002464 <HAL_GPIO_Init+0xcc>
 800240e:	2b12      	cmp	r3, #18
 8002410:	d859      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <HAL_GPIO_Init+0x80>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002493 	.word	0x08002493
 800241c:	0800246d 	.word	0x0800246d
 8002420:	0800247f 	.word	0x0800247f
 8002424:	080024c1 	.word	0x080024c1
 8002428:	080024c7 	.word	0x080024c7
 800242c:	080024c7 	.word	0x080024c7
 8002430:	080024c7 	.word	0x080024c7
 8002434:	080024c7 	.word	0x080024c7
 8002438:	080024c7 	.word	0x080024c7
 800243c:	080024c7 	.word	0x080024c7
 8002440:	080024c7 	.word	0x080024c7
 8002444:	080024c7 	.word	0x080024c7
 8002448:	080024c7 	.word	0x080024c7
 800244c:	080024c7 	.word	0x080024c7
 8002450:	080024c7 	.word	0x080024c7
 8002454:	080024c7 	.word	0x080024c7
 8002458:	080024c7 	.word	0x080024c7
 800245c:	08002475 	.word	0x08002475
 8002460:	08002489 	.word	0x08002489
 8002464:	4a79      	ldr	r2, [pc, #484]	; (800264c <HAL_GPIO_Init+0x2b4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800246a:	e02c      	b.n	80024c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	623b      	str	r3, [r7, #32]
          break;
 8002472:	e029      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	3304      	adds	r3, #4
 800247a:	623b      	str	r3, [r7, #32]
          break;
 800247c:	e024      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	3308      	adds	r3, #8
 8002484:	623b      	str	r3, [r7, #32]
          break;
 8002486:	e01f      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	330c      	adds	r3, #12
 800248e:	623b      	str	r3, [r7, #32]
          break;
 8002490:	e01a      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800249a:	2304      	movs	r3, #4
 800249c:	623b      	str	r3, [r7, #32]
          break;
 800249e:	e013      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024a8:	2308      	movs	r3, #8
 80024aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	611a      	str	r2, [r3, #16]
          break;
 80024b2:	e009      	b.n	80024c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b4:	2308      	movs	r3, #8
 80024b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	615a      	str	r2, [r3, #20]
          break;
 80024be:	e003      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
          break;
 80024c4:	e000      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          break;
 80024c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2bff      	cmp	r3, #255	; 0xff
 80024cc:	d801      	bhi.n	80024d2 <HAL_GPIO_Init+0x13a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	e001      	b.n	80024d6 <HAL_GPIO_Init+0x13e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2bff      	cmp	r3, #255	; 0xff
 80024dc:	d802      	bhi.n	80024e4 <HAL_GPIO_Init+0x14c>
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	e002      	b.n	80024ea <HAL_GPIO_Init+0x152>
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	3b08      	subs	r3, #8
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	210f      	movs	r1, #15
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	6a39      	ldr	r1, [r7, #32]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	431a      	orrs	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80b1 	beq.w	800267a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002518:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <HAL_GPIO_Init+0x2b8>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a4c      	ldr	r2, [pc, #304]	; (8002650 <HAL_GPIO_Init+0x2b8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <HAL_GPIO_Init+0x2b8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002530:	4a48      	ldr	r2, [pc, #288]	; (8002654 <HAL_GPIO_Init+0x2bc>)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a40      	ldr	r2, [pc, #256]	; (8002658 <HAL_GPIO_Init+0x2c0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <HAL_GPIO_Init+0x1ec>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a3f      	ldr	r2, [pc, #252]	; (800265c <HAL_GPIO_Init+0x2c4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00d      	beq.n	8002580 <HAL_GPIO_Init+0x1e8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3e      	ldr	r2, [pc, #248]	; (8002660 <HAL_GPIO_Init+0x2c8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d007      	beq.n	800257c <HAL_GPIO_Init+0x1e4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3d      	ldr	r2, [pc, #244]	; (8002664 <HAL_GPIO_Init+0x2cc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_GPIO_Init+0x1e0>
 8002574:	2303      	movs	r3, #3
 8002576:	e006      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 8002578:	2304      	movs	r3, #4
 800257a:	e004      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 800257c:	2302      	movs	r3, #2
 800257e:	e002      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 8002584:	2300      	movs	r3, #0
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	f002 0203 	and.w	r2, r2, #3
 800258c:	0092      	lsls	r2, r2, #2
 800258e:	4093      	lsls	r3, r2
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002596:	492f      	ldr	r1, [pc, #188]	; (8002654 <HAL_GPIO_Init+0x2bc>)
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	492c      	ldr	r1, [pc, #176]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025be:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4928      	ldr	r1, [pc, #160]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4922      	ldr	r1, [pc, #136]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	491e      	ldr	r1, [pc, #120]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4918      	ldr	r1, [pc, #96]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	43db      	mvns	r3, r3
 8002616:	4914      	ldr	r1, [pc, #80]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 8002618:	4013      	ands	r3, r2
 800261a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d021      	beq.n	800266c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	60cb      	str	r3, [r1, #12]
 8002634:	e021      	b.n	800267a <HAL_GPIO_Init+0x2e2>
 8002636:	bf00      	nop
 8002638:	10320000 	.word	0x10320000
 800263c:	10310000 	.word	0x10310000
 8002640:	10220000 	.word	0x10220000
 8002644:	10210000 	.word	0x10210000
 8002648:	10120000 	.word	0x10120000
 800264c:	10110000 	.word	0x10110000
 8002650:	40021000 	.word	0x40021000
 8002654:	40010000 	.word	0x40010000
 8002658:	40010800 	.word	0x40010800
 800265c:	40010c00 	.word	0x40010c00
 8002660:	40011000 	.word	0x40011000
 8002664:	40011400 	.word	0x40011400
 8002668:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_GPIO_Init+0x304>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	43db      	mvns	r3, r3
 8002674:	4909      	ldr	r1, [pc, #36]	; (800269c <HAL_GPIO_Init+0x304>)
 8002676:	4013      	ands	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	f47f ae8e 	bne.w	80023ac <HAL_GPIO_Init+0x14>
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	372c      	adds	r7, #44	; 0x2c
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40010400 	.word	0x40010400

080026a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
 80026ac:	4613      	mov	r3, r2
 80026ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b0:	787b      	ldrb	r3, [r7, #1]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026bc:	e003      	b.n	80026c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026be:	887b      	ldrh	r3, [r7, #2]
 80026c0:	041a      	lsls	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	611a      	str	r2, [r3, #16]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d2:	b08b      	sub	sp, #44	; 0x2c
 80026d4:	af06      	add	r7, sp, #24
 80026d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0fd      	b.n	80028de <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fd80 	bl	80011fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2203      	movs	r2, #3
 8002700:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f002 fd6d 	bl	80051e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	687e      	ldr	r6, [r7, #4]
 8002716:	466d      	mov	r5, sp
 8002718:	f106 0410 	add.w	r4, r6, #16
 800271c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	602b      	str	r3, [r5, #0]
 8002724:	1d33      	adds	r3, r6, #4
 8002726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002728:	6838      	ldr	r0, [r7, #0]
 800272a:	f002 fd37 	bl	800519c <USB_CoreInit>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0ce      	b.n	80028de <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2100      	movs	r1, #0
 8002746:	4618      	mov	r0, r3
 8002748:	f002 fd68 	bl	800521c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e04c      	b.n	80027ec <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	3301      	adds	r3, #1
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	b298      	uxth	r0, r3
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	3336      	adds	r3, #54	; 0x36
 8002790:	4602      	mov	r2, r0
 8002792:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3303      	adds	r3, #3
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	3338      	adds	r3, #56	; 0x38
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	333c      	adds	r3, #60	; 0x3c
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	3340      	adds	r3, #64	; 0x40
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	3301      	adds	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d3ad      	bcc.n	8002752 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	e044      	b.n	8002886 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	3301      	adds	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	d3b5      	bcc.n	80027fc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	687e      	ldr	r6, [r7, #4]
 8002898:	466d      	mov	r5, sp
 800289a:	f106 0410 	add.w	r4, r6, #16
 800289e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	602b      	str	r3, [r5, #0]
 80028a6:	1d33      	adds	r3, r6, #4
 80028a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	f002 fcc2 	bl	8005234 <USB_DevInit>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e00d      	b.n	80028de <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f005 f974 	bl	8007bc4 <USB_DevDisconnect>

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_PCD_Start+0x16>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e016      	b.n	800292a <HAL_PCD_Start+0x44>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f002 fc57 	bl	80051bc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800290e:	2101      	movs	r1, #1
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f001 fba0 	bl	8004056 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f005 f948 	bl	8007bb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b088      	sub	sp, #32
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f005 f94a 	bl	8007bd8 <USB_ReadInterrupts>
 8002944:	4603      	mov	r3, r0
 8002946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800294a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294e:	d102      	bne.n	8002956 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fb5f 	bl	8003014 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f005 f93c 	bl	8007bd8 <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296a:	d112      	bne.n	8002992 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297e:	b292      	uxth	r2, r2
 8002980:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f007 ffb0 	bl	800a8ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800298a:	2100      	movs	r1, #0
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f923 	bl	8002bd8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f005 f91e 	bl	8007bd8 <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a6:	d10b      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029ba:	b292      	uxth	r2, r2
 80029bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f005 f907 	bl	8007bd8 <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d4:	d10b      	bne.n	80029ee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e8:	b292      	uxth	r2, r2
 80029ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f005 f8f0 	bl	8007bd8 <USB_ReadInterrupts>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	d126      	bne.n	8002a52 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0204 	bic.w	r2, r2, #4
 8002a16:	b292      	uxth	r2, r2
 8002a18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0208 	bic.w	r2, r2, #8
 8002a2e:	b292      	uxth	r2, r2
 8002a30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f007 ff87 	bl	800a948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f005 f8be 	bl	8007bd8 <USB_ReadInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a66:	f040 8082 	bne.w	8002b6e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	77fb      	strb	r3, [r7, #31]
 8002a6e:	e010      	b.n	8002a92 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	7ffb      	ldrb	r3, [r7, #31]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	441a      	add	r2, r3
 8002a7c:	7ffb      	ldrb	r3, [r7, #31]
 8002a7e:	8812      	ldrh	r2, [r2, #0]
 8002a80:	b292      	uxth	r2, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	3320      	adds	r3, #32
 8002a86:	443b      	add	r3, r7
 8002a88:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002a8c:	7ffb      	ldrb	r3, [r7, #31]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	77fb      	strb	r3, [r7, #31]
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
 8002a94:	2b07      	cmp	r3, #7
 8002a96:	d9eb      	bls.n	8002a70 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ac8:	bf00      	nop
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f6      	beq.n	8002aca <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aee:	b292      	uxth	r2, r2
 8002af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	77fb      	strb	r3, [r7, #31]
 8002af8:	e00f      	b.n	8002b1a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002afa:	7ffb      	ldrb	r3, [r7, #31]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	4611      	mov	r1, r2
 8002b02:	7ffa      	ldrb	r2, [r7, #31]
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	440a      	add	r2, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	3320      	adds	r3, #32
 8002b0c:	443b      	add	r3, r7
 8002b0e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002b12:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
 8002b16:	3301      	adds	r3, #1
 8002b18:	77fb      	strb	r3, [r7, #31]
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	2b07      	cmp	r3, #7
 8002b1e:	d9ec      	bls.n	8002afa <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0208 	orr.w	r2, r2, #8
 8002b32:	b292      	uxth	r2, r2
 8002b34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0204 	orr.w	r2, r2, #4
 8002b62:	b292      	uxth	r2, r2
 8002b64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f007 fedf 	bl	800a92c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 f830 	bl	8007bd8 <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b82:	d10e      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b96:	b292      	uxth	r2, r2
 8002b98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f007 fe96 	bl	800a8ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f005 f816 	bl	8007bd8 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_PCD_SetAddress+0x1a>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e013      	b.n	8002c1a <HAL_PCD_SetAddress+0x42>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 ffbd 	bl	8007b8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	4608      	mov	r0, r1
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4603      	mov	r3, r0
 8002c32:	70fb      	strb	r3, [r7, #3]
 8002c34:	460b      	mov	r3, r1
 8002c36:	803b      	strh	r3, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	da0e      	bge.n	8002c66 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	705a      	strb	r2, [r3, #1]
 8002c64:	e00e      	b.n	8002c84 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	f003 0207 	and.w	r2, r3, #7
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c90:	883a      	ldrh	r2, [r7, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	78ba      	ldrb	r2, [r7, #2]
 8002c9a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	785b      	ldrb	r3, [r3, #1]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d004      	beq.n	8002cae <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cae:	78bb      	ldrb	r3, [r7, #2]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d102      	bne.n	8002cba <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_PCD_EP_Open+0xa6>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e00e      	b.n	8002ce6 <HAL_PCD_EP_Open+0xc4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 facc 	bl	8005274 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da0e      	bge.n	8002d20 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	705a      	strb	r2, [r3, #1]
 8002d1e:	e00e      	b.n	8002d3e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 0207 	and.w	r2, r3, #7
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_PCD_EP_Close+0x6a>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e00e      	b.n	8002d76 <HAL_PCD_EP_Close+0x88>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68f9      	ldr	r1, [r7, #12]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fdee 	bl	8005948 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d8e:	7afb      	ldrb	r3, [r7, #11]
 8002d90:	f003 0207 	and.w	r2, r3, #7
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbe:	7afb      	ldrb	r3, [r7, #11]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f002 ffa0 	bl	8005d20 <USB_EPStartXfer>
 8002de0:	e005      	b.n	8002dee <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6979      	ldr	r1, [r7, #20]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 ff99 	bl	8005d20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 0207 	and.w	r2, r3, #7
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	460b      	mov	r3, r1
 8002e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e72:	7afb      	ldrb	r3, [r7, #11]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6979      	ldr	r1, [r7, #20]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 ff46 	bl	8005d20 <USB_EPStartXfer>
 8002e94:	e005      	b.n	8002ea2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6979      	ldr	r1, [r7, #20]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f002 ff3f 	bl	8005d20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 0207 	and.w	r2, r3, #7
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d901      	bls.n	8002eca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e04c      	b.n	8002f64 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da0e      	bge.n	8002ef0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	705a      	strb	r2, [r3, #1]
 8002eee:	e00c      	b.n	8002f0a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_PCD_EP_SetStall+0x7e>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e01c      	b.n	8002f64 <HAL_PCD_EP_SetStall+0xb8>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68f9      	ldr	r1, [r7, #12]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f004 fd29 	bl	8007990 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d108      	bne.n	8002f5a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f004 fe4e 	bl	8007bf6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 020f 	and.w	r2, r3, #15
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d901      	bls.n	8002f8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e040      	b.n	800300c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da0e      	bge.n	8002fb0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	705a      	strb	r2, [r3, #1]
 8002fae:	e00e      	b.n	8002fce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 0207 	and.w	r2, r3, #7
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_PCD_EP_ClrStall+0x82>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e00e      	b.n	800300c <HAL_PCD_EP_ClrStall+0xa0>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f004 fd17 	bl	8007a30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08e      	sub	sp, #56	; 0x38
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800301c:	e2ec      	b.n	80035f8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003026:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003028:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003034:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003038:	2b00      	cmp	r3, #0
 800303a:	f040 8161 	bne.w	8003300 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800303e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d152      	bne.n	80030ee <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	81fb      	strh	r3, [r7, #14]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003068:	b29b      	uxth	r3, r3
 800306a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3328      	adds	r3, #40	; 0x28
 8003070:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800307a:	b29b      	uxth	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	3302      	adds	r3, #2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	441a      	add	r2, r3
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030ac:	2100      	movs	r1, #0
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f007 fbf3 	bl	800a89a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 829b 	beq.w	80035f8 <PCD_EP_ISR_Handler+0x5e4>
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 8296 	bne.w	80035f8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b292      	uxth	r2, r2
 80030e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030ec:	e284      	b.n	80035f8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003104:	2b00      	cmp	r3, #0
 8003106:	d034      	beq.n	8003172 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	3306      	adds	r3, #6
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003146:	b29b      	uxth	r3, r3
 8003148:	f004 fda5 	bl	8007c96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29a      	uxth	r2, r3
 8003154:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003158:	4013      	ands	r3, r2
 800315a:	823b      	strh	r3, [r7, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	8a3a      	ldrh	r2, [r7, #16]
 8003162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003166:	b292      	uxth	r2, r2
 8003168:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f007 fb68 	bl	800a840 <HAL_PCD_SetupStageCallback>
 8003170:	e242      	b.n	80035f8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003172:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003176:	2b00      	cmp	r3, #0
 8003178:	f280 823e 	bge.w	80035f8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29a      	uxth	r2, r3
 8003184:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003188:	4013      	ands	r3, r2
 800318a:	83bb      	strh	r3, [r7, #28]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	8bba      	ldrh	r2, [r7, #28]
 8003192:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003196:	b292      	uxth	r2, r2
 8003198:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	3306      	adds	r3, #6
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d019      	beq.n	8003202 <PCD_EP_ISR_Handler+0x1ee>
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d015      	beq.n	8003202 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	6959      	ldr	r1, [r3, #20]
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f004 fd55 	bl	8007c96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	441a      	add	r2, r3
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031fa:	2100      	movs	r1, #0
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f007 fb31 	bl	800a864 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 81f2 	bne.w	80035f8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003222:	b29b      	uxth	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4413      	add	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d112      	bne.n	8003262 <PCD_EP_ISR_Handler+0x24e>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003246:	b29a      	uxth	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	801a      	strh	r2, [r3, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800325a:	b29a      	uxth	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	801a      	strh	r2, [r3, #0]
 8003260:	e02f      	b.n	80032c2 <PCD_EP_ISR_Handler+0x2ae>
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b3e      	cmp	r3, #62	; 0x3e
 8003268:	d813      	bhi.n	8003292 <PCD_EP_ISR_Handler+0x27e>
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <PCD_EP_ISR_Handler+0x270>
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	3301      	adds	r3, #1
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	b29b      	uxth	r3, r3
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	b29a      	uxth	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	801a      	strh	r2, [r3, #0]
 8003290:	e017      	b.n	80032c2 <PCD_EP_ISR_Handler+0x2ae>
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <PCD_EP_ISR_Handler+0x298>
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	3b01      	subs	r3, #1
 80032aa:	633b      	str	r3, [r7, #48]	; 0x30
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	029b      	lsls	r3, r3, #10
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032bc:	b29a      	uxth	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d2:	827b      	strh	r3, [r7, #18]
 80032d4:	8a7b      	ldrh	r3, [r7, #18]
 80032d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80032da:	827b      	strh	r3, [r7, #18]
 80032dc:	8a7b      	ldrh	r3, [r7, #18]
 80032de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032e2:	827b      	strh	r3, [r7, #18]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	8a7b      	ldrh	r3, [r7, #18]
 80032ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	8013      	strh	r3, [r2, #0]
 80032fe:	e17b      	b.n	80035f8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003312:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003316:	2b00      	cmp	r3, #0
 8003318:	f280 80ea 	bge.w	80034f0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29a      	uxth	r2, r3
 800332e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003332:	4013      	ands	r3, r2
 8003334:	853b      	strh	r3, [r7, #40]	; 0x28
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800334a:	b292      	uxth	r2, r2
 800334c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800334e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	7b1b      	ldrb	r3, [r3, #12]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d122      	bne.n	80033b2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003374:	b29b      	uxth	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	3306      	adds	r3, #6
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003394:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003396:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8087 	beq.w	80034ac <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	6959      	ldr	r1, [r3, #20]
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	88da      	ldrh	r2, [r3, #6]
 80033aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033ac:	f004 fc73 	bl	8007c96 <USB_ReadPMA>
 80033b0:	e07c      	b.n	80034ac <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	78db      	ldrb	r3, [r3, #3]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d108      	bne.n	80033cc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80033ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033bc:	461a      	mov	r2, r3
 80033be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f927 	bl	8003614 <HAL_PCD_EP_DB_Receive>
 80033c6:	4603      	mov	r3, r0
 80033c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80033ca:	e06f      	b.n	80034ac <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	441a      	add	r2, r3
 80033f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003404:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003408:	b29b      	uxth	r3, r3
 800340a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d021      	beq.n	800346a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342e:	b29b      	uxth	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	3302      	adds	r3, #2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02a      	beq.n	80034ac <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	6959      	ldr	r1, [r3, #20]
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	891a      	ldrh	r2, [r3, #8]
 8003462:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003464:	f004 fc17 	bl	8007c96 <USB_ReadPMA>
 8003468:	e020      	b.n	80034ac <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003472:	b29b      	uxth	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	3306      	adds	r3, #6
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003492:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003494:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	6959      	ldr	r1, [r3, #20]
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	895a      	ldrh	r2, [r3, #10]
 80034a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034a8:	f004 fbf5 	bl	8007c96 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034b2:	441a      	add	r2, r3
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034be:	441a      	add	r2, r3
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <PCD_EP_ISR_Handler+0x4c2>
 80034cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d206      	bcs.n	80034e4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f007 f9c1 	bl	800a864 <HAL_PCD_DataOutStageCallback>
 80034e2:	e005      	b.n	80034f0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ea:	4618      	mov	r0, r3
 80034ec:	f002 fc18 	bl	8005d20 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d07e      	beq.n	80035f8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80034fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003528:	843b      	strh	r3, [r7, #32]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	441a      	add	r2, r3
 8003538:	8c3b      	ldrh	r3, [r7, #32]
 800353a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800353e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003542:	b29b      	uxth	r3, r3
 8003544:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	78db      	ldrb	r3, [r3, #3]
 800354a:	2b03      	cmp	r3, #3
 800354c:	d00c      	beq.n	8003568 <PCD_EP_ISR_Handler+0x554>
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	78db      	ldrb	r3, [r3, #3]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800355a:	2b02      	cmp	r3, #2
 800355c:	d146      	bne.n	80035ec <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800355e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d141      	bne.n	80035ec <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	3302      	adds	r3, #2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003590:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	8bfb      	ldrh	r3, [r7, #30]
 8003598:	429a      	cmp	r2, r3
 800359a:	d906      	bls.n	80035aa <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	8bfb      	ldrh	r3, [r7, #30]
 80035a2:	1ad2      	subs	r2, r2, r3
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	619a      	str	r2, [r3, #24]
 80035a8:	e002      	b.n	80035b0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	2200      	movs	r2, #0
 80035ae:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f007 f96b 	bl	800a89a <HAL_PCD_DataInStageCallback>
 80035c4:	e018      	b.n	80035f8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	8bfb      	ldrh	r3, [r7, #30]
 80035cc:	441a      	add	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	8bfb      	ldrh	r3, [r7, #30]
 80035d8:	441a      	add	r2, r3
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e4:	4618      	mov	r0, r3
 80035e6:	f002 fb9b 	bl	8005d20 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80035ea:	e005      	b.n	80035f8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80035ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035ee:	461a      	mov	r2, r3
 80035f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f91b 	bl	800382e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003600:	b29b      	uxth	r3, r3
 8003602:	b21b      	sxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	f6ff ad0a 	blt.w	800301e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3738      	adds	r7, #56	; 0x38
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d07e      	beq.n	800372a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003634:	b29b      	uxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	3302      	adds	r3, #2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003654:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	8b7b      	ldrh	r3, [r7, #26]
 800365c:	429a      	cmp	r2, r3
 800365e:	d306      	bcc.n	800366e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	699a      	ldr	r2, [r3, #24]
 8003664:	8b7b      	ldrh	r3, [r7, #26]
 8003666:	1ad2      	subs	r2, r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	619a      	str	r2, [r3, #24]
 800366c:	e002      	b.n	8003674 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d123      	bne.n	80036c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	833b      	strh	r3, [r7, #24]
 8003698:	8b3b      	ldrh	r3, [r7, #24]
 800369a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800369e:	833b      	strh	r3, [r7, #24]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	8b3b      	ldrh	r3, [r7, #24]
 80036b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01f      	beq.n	800370e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e8:	82fb      	strh	r3, [r7, #22]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	441a      	add	r2, r3
 80036f8:	8afb      	ldrh	r3, [r7, #22]
 80036fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800370a:	b29b      	uxth	r3, r3
 800370c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800370e:	8b7b      	ldrh	r3, [r7, #26]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8087 	beq.w	8003824 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6959      	ldr	r1, [r3, #20]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	891a      	ldrh	r2, [r3, #8]
 8003722:	8b7b      	ldrh	r3, [r7, #26]
 8003724:	f004 fab7 	bl	8007c96 <USB_ReadPMA>
 8003728:	e07c      	b.n	8003824 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003732:	b29b      	uxth	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	3306      	adds	r3, #6
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003752:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	8b7b      	ldrh	r3, [r7, #26]
 800375a:	429a      	cmp	r2, r3
 800375c:	d306      	bcc.n	800376c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	8b7b      	ldrh	r3, [r7, #26]
 8003764:	1ad2      	subs	r2, r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	619a      	str	r2, [r3, #24]
 800376a:	e002      	b.n	8003772 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2200      	movs	r2, #0
 8003770:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d123      	bne.n	80037c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003794:	83fb      	strh	r3, [r7, #30]
 8003796:	8bfb      	ldrh	r3, [r7, #30]
 8003798:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800379c:	83fb      	strh	r3, [r7, #30]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	8bfb      	ldrh	r3, [r7, #30]
 80037ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037be:	b29b      	uxth	r3, r3
 80037c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d11f      	bne.n	800380c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	83bb      	strh	r3, [r7, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	441a      	add	r2, r3
 80037f6:	8bbb      	ldrh	r3, [r7, #28]
 80037f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003808:	b29b      	uxth	r3, r3
 800380a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800380c:	8b7b      	ldrh	r3, [r7, #26]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6959      	ldr	r1, [r3, #20]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	895a      	ldrh	r2, [r3, #10]
 800381e:	8b7b      	ldrh	r3, [r7, #26]
 8003820:	f004 fa39 	bl	8007c96 <USB_ReadPMA>
    }
  }

  return count;
 8003824:	8b7b      	ldrh	r3, [r7, #26]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b0a2      	sub	sp, #136	; 0x88
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	4613      	mov	r3, r2
 800383a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 81c7 	beq.w	8003bd6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003850:	b29b      	uxth	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	3302      	adds	r3, #2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003870:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800387c:	429a      	cmp	r2, r3
 800387e:	d907      	bls.n	8003890 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003888:	1ad2      	subs	r2, r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	619a      	str	r2, [r3, #24]
 800388e:	e002      	b.n	8003896 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 80b9 	bne.w	8003a12 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d126      	bne.n	80038f6 <HAL_PCD_EP_DB_Transmit+0xc8>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	4413      	add	r3, r2
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	011a      	lsls	r2, r3, #4
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	4413      	add	r3, r2
 80038ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038da:	b29a      	uxth	r2, r3
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	801a      	strh	r2, [r3, #0]
 80038f4:	e01a      	b.n	800392c <HAL_PCD_EP_DB_Transmit+0xfe>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d116      	bne.n	800392c <HAL_PCD_EP_DB_Transmit+0xfe>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800390c:	b29b      	uxth	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	4413      	add	r3, r2
 8003914:	633b      	str	r3, [r7, #48]	; 0x30
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	011a      	lsls	r2, r3, #4
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	4413      	add	r3, r2
 8003920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	2200      	movs	r2, #0
 800392a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	623b      	str	r3, [r7, #32]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d126      	bne.n	8003988 <HAL_PCD_EP_DB_Transmit+0x15a>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003948:	b29b      	uxth	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	4413      	add	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	011a      	lsls	r2, r3, #4
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800396c:	b29a      	uxth	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800397c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003980:	b29a      	uxth	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	e017      	b.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d113      	bne.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	4413      	add	r3, r2
 80039a0:	623b      	str	r3, [r7, #32]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	011a      	lsls	r2, r3, #4
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	4413      	add	r3, r2
 80039ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2200      	movs	r2, #0
 80039b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	4619      	mov	r1, r3
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f006 ff6b 	bl	800a89a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 82d4 	beq.w	8003f78 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	827b      	strh	r3, [r7, #18]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	441a      	add	r2, r3
 80039fa:	8a7b      	ldrh	r3, [r7, #18]
 80039fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8013      	strh	r3, [r2, #0]
 8003a10:	e2b2      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d021      	beq.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	f040 8286 	bne.w	8003f78 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a74:	441a      	add	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a82:	441a      	add	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6a1a      	ldr	r2, [r3, #32]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d309      	bcc.n	8003aa8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6a1a      	ldr	r2, [r3, #32]
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa0:	1ad2      	subs	r2, r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	621a      	str	r2, [r3, #32]
 8003aa6:	e015      	b.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d107      	bne.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003ab0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ab4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003abe:	e009      	b.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d155      	bne.n	8003b88 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	4413      	add	r3, r2
 8003af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	011a      	lsls	r2, r3, #4
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	4413      	add	r3, r2
 8003afe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
 8003b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d112      	bne.n	8003b30 <HAL_PCD_EP_DB_Transmit+0x302>
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	e047      	b.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b32:	2b3e      	cmp	r3, #62	; 0x3e
 8003b34:	d811      	bhi.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x32c>
 8003b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x31e>
 8003b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b48:	3301      	adds	r3, #1
 8003b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	029b      	lsls	r3, r3, #10
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	e032      	b.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <HAL_PCD_EP_DB_Transmit+0x342>
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	029b      	lsls	r3, r3, #10
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	e01b      	b.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	785b      	ldrb	r3, [r3, #1]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d117      	bne.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	643b      	str	r3, [r7, #64]	; 0x40
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba4:	4413      	add	r3, r2
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	011a      	lsls	r2, r3, #4
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	6959      	ldr	r1, [r3, #20]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	891a      	ldrh	r2, [r3, #8]
 8003bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f004 f81c 	bl	8007c0c <USB_WritePMA>
 8003bd4:	e1d0      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	3306      	adds	r3, #6
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d307      	bcc.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c16:	1ad2      	subs	r2, r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	619a      	str	r2, [r3, #24]
 8003c1c:	e002      	b.n	8003c24 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2200      	movs	r2, #0
 8003c22:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 80c4 	bne.w	8003db6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	785b      	ldrb	r3, [r3, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d126      	bne.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x456>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4a:	4413      	add	r3, r2
 8003c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	011a      	lsls	r2, r3, #4
 8003c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c56:	4413      	add	r3, r2
 8003c58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c6c:	801a      	strh	r2, [r3, #0]
 8003c6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c80:	801a      	strh	r2, [r3, #0]
 8003c82:	e01a      	b.n	8003cba <HAL_PCD_EP_DB_Transmit+0x48c>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d116      	bne.n	8003cba <HAL_PCD_EP_DB_Transmit+0x48c>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	677b      	str	r3, [r7, #116]	; 0x74
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca0:	4413      	add	r3, r2
 8003ca2:	677b      	str	r3, [r7, #116]	; 0x74
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	011a      	lsls	r2, r3, #4
 8003caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cac:	4413      	add	r3, r2
 8003cae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cb2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	785b      	ldrb	r3, [r3, #1]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d12f      	bne.n	8003d28 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	011a      	lsls	r2, r3, #4
 8003cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d0c:	801a      	strh	r2, [r3, #0]
 8003d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	e017      	b.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d113      	bne.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3e:	4413      	add	r3, r2
 8003d40:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	011a      	lsls	r2, r3, #4
 8003d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d54:	2200      	movs	r2, #0
 8003d56:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f006 fd9b 	bl	800a89a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 8104 	bne.w	8003f78 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	441a      	add	r2, r3
 8003d9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	8013      	strh	r3, [r2, #0]
 8003db4:	e0e0      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d121      	bne.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	441a      	add	r2, r3
 8003dec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	f040 80b4 	bne.w	8003f78 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e18:	441a      	add	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e26:	441a      	add	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d309      	bcc.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6a1a      	ldr	r2, [r3, #32]
 8003e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e44:	1ad2      	subs	r2, r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	621a      	str	r2, [r3, #32]
 8003e4a:	e015      	b.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d107      	bne.n	8003e64 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003e54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e62:	e009      	b.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d155      	bne.n	8003f32 <HAL_PCD_EP_DB_Transmit+0x704>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e9a:	4413      	add	r3, r2
 8003e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	011a      	lsls	r2, r3, #4
 8003ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d112      	bne.n	8003eda <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec2:	801a      	strh	r2, [r3, #0]
 8003ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	e044      	b.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x736>
 8003eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003edc:	2b3e      	cmp	r3, #62	; 0x3e
 8003ede:	d811      	bhi.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	029b      	lsls	r3, r3, #10
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f00:	801a      	strh	r2, [r3, #0]
 8003f02:	e02f      	b.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x736>
 8003f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	657b      	str	r3, [r7, #84]	; 0x54
 8003f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f16:	3b01      	subs	r3, #1
 8003f18:	657b      	str	r3, [r7, #84]	; 0x54
 8003f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	029b      	lsls	r3, r3, #10
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	e018      	b.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x736>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d114      	bne.n	8003f64 <HAL_PCD_EP_DB_Transmit+0x736>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f48:	4413      	add	r3, r2
 8003f4a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	011a      	lsls	r2, r3, #4
 8003f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f54:	4413      	add	r3, r2
 8003f56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f62:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6959      	ldr	r1, [r3, #20]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	895a      	ldrh	r2, [r3, #10]
 8003f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f003 fe4a 	bl	8007c0c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f92:	823b      	strh	r3, [r7, #16]
 8003f94:	8a3b      	ldrh	r3, [r7, #16]
 8003f96:	f083 0310 	eor.w	r3, r3, #16
 8003f9a:	823b      	strh	r3, [r7, #16]
 8003f9c:	8a3b      	ldrh	r3, [r7, #16]
 8003f9e:	f083 0320 	eor.w	r3, r3, #32
 8003fa2:	823b      	strh	r3, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	8a3b      	ldrh	r3, [r7, #16]
 8003fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3788      	adds	r7, #136	; 0x88
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	817b      	strh	r3, [r7, #10]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fe4:	897b      	ldrh	r3, [r7, #10]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00b      	beq.n	8004008 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff0:	897b      	ldrh	r3, [r7, #10]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e009      	b.n	800401c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004008:	897a      	ldrh	r2, [r7, #10]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800401c:	893b      	ldrh	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	b29a      	uxth	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	80da      	strh	r2, [r3, #6]
 8004030:	e00b      	b.n	800404a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2201      	movs	r2, #1
 8004036:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	b29a      	uxth	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	b29a      	uxth	r2, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd PCD handle
  * @param  state connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e272      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8087 	beq.w	800419a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800408c:	4b92      	ldr	r3, [pc, #584]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b04      	cmp	r3, #4
 8004096:	d00c      	beq.n	80040b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004098:	4b8f      	ldr	r3, [pc, #572]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d112      	bne.n	80040ca <HAL_RCC_OscConfig+0x5e>
 80040a4:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	d10b      	bne.n	80040ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b2:	4b89      	ldr	r3, [pc, #548]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d06c      	beq.n	8004198 <HAL_RCC_OscConfig+0x12c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d168      	bne.n	8004198 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e24c      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d2:	d106      	bne.n	80040e2 <HAL_RCC_OscConfig+0x76>
 80040d4:	4b80      	ldr	r3, [pc, #512]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a7f      	ldr	r2, [pc, #508]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	e02e      	b.n	8004140 <HAL_RCC_OscConfig+0xd4>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0x98>
 80040ea:	4b7b      	ldr	r3, [pc, #492]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7a      	ldr	r2, [pc, #488]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b78      	ldr	r3, [pc, #480]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a77      	ldr	r2, [pc, #476]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e01d      	b.n	8004140 <HAL_RCC_OscConfig+0xd4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0xbc>
 800410e:	4b72      	ldr	r3, [pc, #456]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a71      	ldr	r2, [pc, #452]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	4b6f      	ldr	r3, [pc, #444]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a6e      	ldr	r2, [pc, #440]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e00b      	b.n	8004140 <HAL_RCC_OscConfig+0xd4>
 8004128:	4b6b      	ldr	r3, [pc, #428]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6a      	ldr	r2, [pc, #424]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800412e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a67      	ldr	r2, [pc, #412]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800413a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004148:	f7fd f904 	bl	8001354 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fd f900 	bl	8001354 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e200      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b5d      	ldr	r3, [pc, #372]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0xe4>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fd f8f0 	bl	8001354 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004178:	f7fd f8ec 	bl	8001354 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1ec      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x10c>
 8004196:	e000      	b.n	800419a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d063      	beq.n	800426e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041a6:	4b4c      	ldr	r3, [pc, #304]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 030c 	and.w	r3, r3, #12
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041b2:	4b49      	ldr	r3, [pc, #292]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d11c      	bne.n	80041f8 <HAL_RCC_OscConfig+0x18c>
 80041be:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d116      	bne.n	80041f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ca:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_RCC_OscConfig+0x176>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d001      	beq.n	80041e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e1c0      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e2:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4939      	ldr	r1, [pc, #228]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f6:	e03a      	b.n	800426e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004200:	4b36      	ldr	r3, [pc, #216]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004206:	f7fd f8a5 	bl	8001354 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420e:	f7fd f8a1 	bl	8001354 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e1a1      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422c:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4927      	ldr	r1, [pc, #156]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]
 8004240:	e015      	b.n	800426e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004242:	4b26      	ldr	r3, [pc, #152]	; (80042dc <HAL_RCC_OscConfig+0x270>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fd f884 	bl	8001354 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004250:	f7fd f880 	bl	8001354 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e180      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d03a      	beq.n	80042f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d019      	beq.n	80042b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004282:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004288:	f7fd f864 	bl	8001354 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004290:	f7fd f860 	bl	8001354 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e160      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042ae:	2001      	movs	r0, #1
 80042b0:	f000 faa6 	bl	8004800 <RCC_Delay>
 80042b4:	e01c      	b.n	80042f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <HAL_RCC_OscConfig+0x274>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042bc:	f7fd f84a 	bl	8001354 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c2:	e00f      	b.n	80042e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c4:	f7fd f846 	bl	8001354 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d908      	bls.n	80042e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e146      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	42420000 	.word	0x42420000
 80042e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	4b92      	ldr	r3, [pc, #584]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e9      	bne.n	80042c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a6 	beq.w	800444a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004302:	4b8b      	ldr	r3, [pc, #556]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10d      	bne.n	800432a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	4b88      	ldr	r3, [pc, #544]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	4a87      	ldr	r2, [pc, #540]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004318:	61d3      	str	r3, [r2, #28]
 800431a:	4b85      	ldr	r3, [pc, #532]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	4b82      	ldr	r3, [pc, #520]	; (8004534 <HAL_RCC_OscConfig+0x4c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d118      	bne.n	8004368 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004336:	4b7f      	ldr	r3, [pc, #508]	; (8004534 <HAL_RCC_OscConfig+0x4c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7e      	ldr	r2, [pc, #504]	; (8004534 <HAL_RCC_OscConfig+0x4c8>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004342:	f7fd f807 	bl	8001354 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fd f803 	bl	8001354 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b64      	cmp	r3, #100	; 0x64
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e103      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	4b75      	ldr	r3, [pc, #468]	; (8004534 <HAL_RCC_OscConfig+0x4c8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d106      	bne.n	800437e <HAL_RCC_OscConfig+0x312>
 8004370:	4b6f      	ldr	r3, [pc, #444]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4a6e      	ldr	r2, [pc, #440]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6213      	str	r3, [r2, #32]
 800437c:	e02d      	b.n	80043da <HAL_RCC_OscConfig+0x36e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x334>
 8004386:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4a69      	ldr	r2, [pc, #420]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	6213      	str	r3, [r2, #32]
 8004392:	4b67      	ldr	r3, [pc, #412]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	4a66      	ldr	r2, [pc, #408]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	6213      	str	r3, [r2, #32]
 800439e:	e01c      	b.n	80043da <HAL_RCC_OscConfig+0x36e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b05      	cmp	r3, #5
 80043a6:	d10c      	bne.n	80043c2 <HAL_RCC_OscConfig+0x356>
 80043a8:	4b61      	ldr	r3, [pc, #388]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4a60      	ldr	r2, [pc, #384]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043ae:	f043 0304 	orr.w	r3, r3, #4
 80043b2:	6213      	str	r3, [r2, #32]
 80043b4:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	4a5d      	ldr	r2, [pc, #372]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6213      	str	r3, [r2, #32]
 80043c0:	e00b      	b.n	80043da <HAL_RCC_OscConfig+0x36e>
 80043c2:	4b5b      	ldr	r3, [pc, #364]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4a5a      	ldr	r2, [pc, #360]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	6213      	str	r3, [r2, #32]
 80043ce:	4b58      	ldr	r3, [pc, #352]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4a57      	ldr	r2, [pc, #348]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	f023 0304 	bic.w	r3, r3, #4
 80043d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d015      	beq.n	800440e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e2:	f7fc ffb7 	bl	8001354 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e8:	e00a      	b.n	8004400 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7fc ffb3 	bl	8001354 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e0b1      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004400:	4b4b      	ldr	r3, [pc, #300]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ee      	beq.n	80043ea <HAL_RCC_OscConfig+0x37e>
 800440c:	e014      	b.n	8004438 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440e:	f7fc ffa1 	bl	8001354 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fc ff9d 	bl	8001354 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e09b      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442c:	4b40      	ldr	r3, [pc, #256]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1ee      	bne.n	8004416 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d105      	bne.n	800444a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800443e:	4b3c      	ldr	r3, [pc, #240]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4a3b      	ldr	r2, [pc, #236]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004448:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8087 	beq.w	8004562 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004454:	4b36      	ldr	r3, [pc, #216]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b08      	cmp	r3, #8
 800445e:	d061      	beq.n	8004524 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d146      	bne.n	80044f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b33      	ldr	r3, [pc, #204]	; (8004538 <HAL_RCC_OscConfig+0x4cc>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fc ff71 	bl	8001354 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004476:	f7fc ff6d 	bl	8001354 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e06d      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004488:	4b29      	ldr	r3, [pc, #164]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449c:	d108      	bne.n	80044b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	4921      	ldr	r1, [pc, #132]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b0:	4b1f      	ldr	r3, [pc, #124]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a19      	ldr	r1, [r3, #32]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	430b      	orrs	r3, r1
 80044c2:	491b      	ldr	r1, [pc, #108]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c8:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <HAL_RCC_OscConfig+0x4cc>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ce:	f7fc ff41 	bl	8001354 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d6:	f7fc ff3d 	bl	8001354 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e03d      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x46a>
 80044f4:	e035      	b.n	8004562 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f6:	4b10      	ldr	r3, [pc, #64]	; (8004538 <HAL_RCC_OscConfig+0x4cc>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fc ff2a 	bl	8001354 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004504:	f7fc ff26 	bl	8001354 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e026      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x498>
 8004522:	e01e      	b.n	8004562 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d107      	bne.n	800453c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e019      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
 8004530:	40021000 	.word	0x40021000
 8004534:	40007000 	.word	0x40007000
 8004538:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCC_OscConfig+0x500>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	429a      	cmp	r2, r3
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d001      	beq.n	8004562 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40021000 	.word	0x40021000

08004570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0d0      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d910      	bls.n	80045b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b67      	ldr	r3, [pc, #412]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 0207 	bic.w	r2, r3, #7
 800459a:	4965      	ldr	r1, [pc, #404]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a2:	4b63      	ldr	r3, [pc, #396]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0b8      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d020      	beq.n	8004602 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045cc:	4b59      	ldr	r3, [pc, #356]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4a58      	ldr	r2, [pc, #352]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045e4:	4b53      	ldr	r3, [pc, #332]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4a52      	ldr	r2, [pc, #328]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045f0:	4b50      	ldr	r3, [pc, #320]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	494d      	ldr	r1, [pc, #308]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d040      	beq.n	8004690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d107      	bne.n	8004626 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004616:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d115      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e07f      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b41      	ldr	r3, [pc, #260]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e073      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	4b3d      	ldr	r3, [pc, #244]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e06b      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b39      	ldr	r3, [pc, #228]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4936      	ldr	r1, [pc, #216]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fc fe78 	bl	8001354 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fc fe74 	bl	8001354 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e053      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d210      	bcs.n	80046c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 0207 	bic.w	r2, r3, #7
 80046a6:	4922      	ldr	r1, [pc, #136]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e032      	b.n	8004726 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046cc:	4b19      	ldr	r3, [pc, #100]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4916      	ldr	r1, [pc, #88]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d009      	beq.n	80046fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	490e      	ldr	r1, [pc, #56]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046fe:	f000 f821 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8004702:	4602      	mov	r2, r0
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	490a      	ldr	r1, [pc, #40]	; (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004710:	5ccb      	ldrb	r3, [r1, r3]
 8004712:	fa22 f303 	lsr.w	r3, r2, r3
 8004716:	4a09      	ldr	r2, [pc, #36]	; (800473c <HAL_RCC_ClockConfig+0x1cc>)
 8004718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800471a:	4b09      	ldr	r3, [pc, #36]	; (8004740 <HAL_RCC_ClockConfig+0x1d0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fc fdd6 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40022000 	.word	0x40022000
 8004734:	40021000 	.word	0x40021000
 8004738:	0800c148 	.word	0x0800c148
 800473c:	200000a4 	.word	0x200000a4
 8004740:	200000a8 	.word	0x200000a8

08004744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004744:	b490      	push	{r4, r7}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800474a:	4b29      	ldr	r3, [pc, #164]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800474c:	1d3c      	adds	r4, r7, #4
 800474e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004754:	f240 2301 	movw	r3, #513	; 0x201
 8004758:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	2300      	movs	r3, #0
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	2300      	movs	r3, #0
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800476e:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b04      	cmp	r3, #4
 800477c:	d002      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0x40>
 800477e:	2b08      	cmp	r3, #8
 8004780:	d003      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0x46>
 8004782:	e02b      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004784:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004786:	623b      	str	r3, [r7, #32]
      break;
 8004788:	e02b      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	0c9b      	lsrs	r3, r3, #18
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	3328      	adds	r3, #40	; 0x28
 8004794:	443b      	add	r3, r7
 8004796:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800479a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d012      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	0c5b      	lsrs	r3, r3, #17
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	3328      	adds	r3, #40	; 0x28
 80047b2:	443b      	add	r3, r7
 80047b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	4a0e      	ldr	r2, [pc, #56]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047be:	fb03 f202 	mul.w	r2, r3, r2
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ca:	e004      	b.n	80047d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4a0b      	ldr	r2, [pc, #44]	; (80047fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	623b      	str	r3, [r7, #32]
      break;
 80047da:	e002      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047de:	623b      	str	r3, [r7, #32]
      break;
 80047e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e2:	6a3b      	ldr	r3, [r7, #32]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3728      	adds	r7, #40	; 0x28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc90      	pop	{r4, r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	0800c0b8 	.word	0x0800c0b8
 80047f4:	40021000 	.word	0x40021000
 80047f8:	007a1200 	.word	0x007a1200
 80047fc:	003d0900 	.word	0x003d0900

08004800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <RCC_Delay+0x34>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <RCC_Delay+0x38>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	0a5b      	lsrs	r3, r3, #9
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800481c:	bf00      	nop
  }
  while (Delay --);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1e5a      	subs	r2, r3, #1
 8004822:	60fa      	str	r2, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f9      	bne.n	800481c <RCC_Delay+0x1c>
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	200000a4 	.word	0x200000a4
 8004838:	10624dd3 	.word	0x10624dd3

0800483c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d07d      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004858:	2300      	movs	r3, #0
 800485a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800485c:	4b4f      	ldr	r3, [pc, #316]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10d      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004868:	4b4c      	ldr	r3, [pc, #304]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	4a4b      	ldr	r2, [pc, #300]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004872:	61d3      	str	r3, [r2, #28]
 8004874:	4b49      	ldr	r3, [pc, #292]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004880:	2301      	movs	r3, #1
 8004882:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004884:	4b46      	ldr	r3, [pc, #280]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d118      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004890:	4b43      	ldr	r3, [pc, #268]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a42      	ldr	r2, [pc, #264]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800489c:	f7fc fd5a 	bl	8001354 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a2:	e008      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a4:	f7fc fd56 	bl	8001354 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	; 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e06d      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	4b3a      	ldr	r3, [pc, #232]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048c2:	4b36      	ldr	r3, [pc, #216]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d02e      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d027      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048e0:	4b2e      	ldr	r3, [pc, #184]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ea:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048f0:	4b2c      	ldr	r3, [pc, #176]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048f6:	4a29      	ldr	r2, [pc, #164]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d014      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fc fd25 	bl	8001354 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490c:	e00a      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490e:	f7fc fd21 	bl	8001354 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f241 3288 	movw	r2, #5000	; 0x1388
 800491c:	4293      	cmp	r3, r2
 800491e:	d901      	bls.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e036      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004924:	4b1d      	ldr	r3, [pc, #116]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ee      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004930:	4b1a      	ldr	r3, [pc, #104]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4917      	ldr	r1, [pc, #92]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493e:	4313      	orrs	r3, r2
 8004940:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d105      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004948:	4b14      	ldr	r3, [pc, #80]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	4a13      	ldr	r2, [pc, #76]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004952:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004960:	4b0e      	ldr	r3, [pc, #56]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	490b      	ldr	r1, [pc, #44]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	4904      	ldr	r1, [pc, #16]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498c:	4313      	orrs	r3, r2
 800498e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	40007000 	.word	0x40007000
 80049a4:	42420440 	.word	0x42420440

080049a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e041      	b.n	8004a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fbce 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 fa70 	bl	8004ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d001      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e03a      	b.n	8004ad6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <HAL_TIM_Base_Start_IT+0x98>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x58>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x58>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x58>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d111      	bne.n	8004ac4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d010      	beq.n	8004ad4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	e007      	b.n	8004ad4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800

08004aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0202 	mvn.w	r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9b1 	bl	8004e96 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f9a4 	bl	8004e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f9b3 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0204 	mvn.w	r2, #4
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f987 	bl	8004e96 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f97a 	bl	8004e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f989 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d122      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0208 	mvn.w	r2, #8
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f95d 	bl	8004e96 <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f950 	bl	8004e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f95f 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d122      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d11b      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0210 	mvn.w	r2, #16
 8004c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2208      	movs	r2, #8
 8004c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f933 	bl	8004e96 <HAL_TIM_IC_CaptureCallback>
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f926 	bl	8004e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f935 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d10e      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d107      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0201 	mvn.w	r2, #1
 8004c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fb fcae 	bl	80005cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b80      	cmp	r3, #128	; 0x80
 8004c7c:	d10e      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b80      	cmp	r3, #128	; 0x80
 8004c8a:	d107      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa77 	bl	800518a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d107      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8f9 	bl	8004eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0220 	mvn.w	r2, #32
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa42 	bl	8005178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x18>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0b3      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x180>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4c:	d03e      	beq.n	8004dcc <HAL_TIM_ConfigClockSource+0xd0>
 8004d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d52:	f200 8087 	bhi.w	8004e64 <HAL_TIM_ConfigClockSource+0x168>
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	f000 8085 	beq.w	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	d87f      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x168>
 8004d64:	2b70      	cmp	r3, #112	; 0x70
 8004d66:	d01a      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0xa2>
 8004d68:	2b70      	cmp	r3, #112	; 0x70
 8004d6a:	d87b      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x168>
 8004d6c:	2b60      	cmp	r3, #96	; 0x60
 8004d6e:	d050      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x116>
 8004d70:	2b60      	cmp	r3, #96	; 0x60
 8004d72:	d877      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x168>
 8004d74:	2b50      	cmp	r3, #80	; 0x50
 8004d76:	d03c      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0xf6>
 8004d78:	2b50      	cmp	r3, #80	; 0x50
 8004d7a:	d873      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x168>
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	d058      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0x136>
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d86f      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x168>
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d064      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x156>
 8004d88:	2b30      	cmp	r3, #48	; 0x30
 8004d8a:	d86b      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x168>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d060      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x156>
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d867      	bhi.n	8004e64 <HAL_TIM_ConfigClockSource+0x168>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d05c      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x156>
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d05a      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d9c:	e062      	b.n	8004e64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6899      	ldr	r1, [r3, #8]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f000 f966 	bl	800507e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	609a      	str	r2, [r3, #8]
      break;
 8004dca:	e04e      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	6899      	ldr	r1, [r3, #8]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f000 f94f 	bl	800507e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dee:	609a      	str	r2, [r3, #8]
      break;
 8004df0:	e03b      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6859      	ldr	r1, [r3, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f000 f8c6 	bl	8004f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2150      	movs	r1, #80	; 0x50
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f91d 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004e10:	e02b      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6859      	ldr	r1, [r3, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f000 f8e4 	bl	8004fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2160      	movs	r1, #96	; 0x60
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f90d 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004e30:	e01b      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f000 f8a6 	bl	8004f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2140      	movs	r1, #64	; 0x40
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f8fd 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004e50:	e00b      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f000 f8f4 	bl	800504a <TIM_ITRx_SetConfig>
        break;
 8004e62:	e002      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e64:	bf00      	nop
 8004e66:	e000      	b.n	8004e6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr

08004e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a29      	ldr	r2, [pc, #164]	; (8004f84 <TIM_Base_SetConfig+0xb8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <TIM_Base_SetConfig+0x30>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eea:	d007      	beq.n	8004efc <TIM_Base_SetConfig+0x30>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <TIM_Base_SetConfig+0xbc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_Base_SetConfig+0x30>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <TIM_Base_SetConfig+0xc0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d108      	bne.n	8004f0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <TIM_Base_SetConfig+0xb8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00b      	beq.n	8004f2e <TIM_Base_SetConfig+0x62>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d007      	beq.n	8004f2e <TIM_Base_SetConfig+0x62>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <TIM_Base_SetConfig+0xbc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_Base_SetConfig+0x62>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <TIM_Base_SetConfig+0xc0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d108      	bne.n	8004f40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <TIM_Base_SetConfig+0xb8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d103      	bne.n	8004f74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	615a      	str	r2, [r3, #20]
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	40000800 	.word	0x40000800

08004f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0201 	bic.w	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 030a 	bic.w	r3, r3, #10
 8004fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f023 0210 	bic.w	r2, r3, #16
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	031b      	lsls	r3, r3, #12
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005028:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	f043 0307 	orr.w	r3, r3, #7
 800506c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	609a      	str	r2, [r3, #8]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005098:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	021a      	lsls	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	609a      	str	r2, [r3, #8]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e046      	b.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a16      	ldr	r2, [pc, #88]	; (800516c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005120:	d009      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a12      	ldr	r2, [pc, #72]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a10      	ldr	r2, [pc, #64]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10c      	bne.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4313      	orrs	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800

08005178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr

0800518a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800519c:	b084      	sub	sp, #16
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	f107 0014 	add.w	r0, r7, #20
 80051aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	b004      	add	sp, #16
 80051ba:	4770      	bx	lr

080051bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80051cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80051d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80051f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80051f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	b29b      	uxth	r3, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	b29b      	uxth	r3, r3
 8005206:	4013      	ands	r3, r2
 8005208:	b29a      	uxth	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005234:	b084      	sub	sp, #16
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	f107 0014 	add.w	r0, r7, #20
 8005242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	b004      	add	sp, #16
 8005272:	4770      	bx	lr

08005274 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005274:	b480      	push	{r7}
 8005276:	b09b      	sub	sp, #108	; 0x6c
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	78db      	ldrb	r3, [r3, #3]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d81f      	bhi.n	80052e6 <USB_ActivateEndpoint+0x72>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <USB_ActivateEndpoint+0x38>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052ef 	.word	0x080052ef
 80052b8:	080052cb 	.word	0x080052cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80052bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80052c8:	e012      	b.n	80052f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80052ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80052d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80052d6:	e00b      	b.n	80052f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80052d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80052e4:	e004      	b.n	80052f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80052ec:	e000      	b.n	80052f0 <USB_ActivateEndpoint+0x7c>
      break;
 80052ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80052fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800530e:	b29b      	uxth	r3, r3
 8005310:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	b29a      	uxth	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	4313      	orrs	r3, r2
 8005332:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	441a      	add	r2, r3
 8005340:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005354:	b29b      	uxth	r3, r3
 8005356:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	7b1b      	ldrb	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f040 8149 	bne.w	80055f4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8084 	beq.w	8005474 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005376:	b29b      	uxth	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	4413      	add	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	011a      	lsls	r2, r3, #4
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	88db      	ldrh	r3, [r3, #6]
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	b29b      	uxth	r3, r3
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	81fb      	strh	r3, [r7, #14]
 80053ae:	89fb      	ldrh	r3, [r7, #14]
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01b      	beq.n	80053f0 <USB_ActivateEndpoint+0x17c>
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	81bb      	strh	r3, [r7, #12]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	89bb      	ldrh	r3, [r7, #12]
 80053dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	78db      	ldrb	r3, [r3, #3]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d020      	beq.n	800543a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540e:	813b      	strh	r3, [r7, #8]
 8005410:	893b      	ldrh	r3, [r7, #8]
 8005412:	f083 0320 	eor.w	r3, r3, #32
 8005416:	813b      	strh	r3, [r7, #8]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	441a      	add	r2, r3
 8005422:	893b      	ldrh	r3, [r7, #8]
 8005424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005434:	b29b      	uxth	r3, r3
 8005436:	8013      	strh	r3, [r2, #0]
 8005438:	e27f      	b.n	800593a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	441a      	add	r2, r3
 800545c:	897b      	ldrh	r3, [r7, #10]
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]
 8005472:	e262      	b.n	800593a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547e:	b29b      	uxth	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	4413      	add	r3, r2
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	011a      	lsls	r2, r3, #4
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	4413      	add	r3, r2
 8005492:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	88db      	ldrh	r3, [r3, #6]
 800549c:	085b      	lsrs	r3, r3, #1
 800549e:	b29b      	uxth	r3, r3
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	4413      	add	r3, r2
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	011a      	lsls	r2, r3, #4
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	4413      	add	r3, r2
 80054c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ca:	623b      	str	r3, [r7, #32]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d112      	bne.n	80054fa <USB_ActivateEndpoint+0x286>
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e02f      	b.n	800555a <USB_ActivateEndpoint+0x2e6>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005500:	d813      	bhi.n	800552a <USB_ActivateEndpoint+0x2b6>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	663b      	str	r3, [r7, #96]	; 0x60
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <USB_ActivateEndpoint+0x2a8>
 8005516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005518:	3301      	adds	r3, #1
 800551a:	663b      	str	r3, [r7, #96]	; 0x60
 800551c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800551e:	b29b      	uxth	r3, r3
 8005520:	029b      	lsls	r3, r3, #10
 8005522:	b29a      	uxth	r2, r3
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	801a      	strh	r2, [r3, #0]
 8005528:	e017      	b.n	800555a <USB_ActivateEndpoint+0x2e6>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	663b      	str	r3, [r7, #96]	; 0x60
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	2b00      	cmp	r3, #0
 800553c:	d102      	bne.n	8005544 <USB_ActivateEndpoint+0x2d0>
 800553e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005540:	3b01      	subs	r3, #1
 8005542:	663b      	str	r3, [r7, #96]	; 0x60
 8005544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005546:	b29b      	uxth	r3, r3
 8005548:	029b      	lsls	r3, r3, #10
 800554a:	b29b      	uxth	r3, r3
 800554c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005554:	b29a      	uxth	r2, r3
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	83fb      	strh	r3, [r7, #30]
 8005568:	8bfb      	ldrh	r3, [r7, #30]
 800556a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01b      	beq.n	80055aa <USB_ActivateEndpoint+0x336>
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	83bb      	strh	r3, [r7, #28]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	441a      	add	r2, r3
 8005594:	8bbb      	ldrh	r3, [r7, #28]
 8005596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800559a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800559e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	837b      	strh	r3, [r7, #26]
 80055c2:	8b7b      	ldrh	r3, [r7, #26]
 80055c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055c8:	837b      	strh	r3, [r7, #26]
 80055ca:	8b7b      	ldrh	r3, [r7, #26]
 80055cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055d0:	837b      	strh	r3, [r7, #26]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	8b7b      	ldrh	r3, [r7, #26]
 80055de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8013      	strh	r3, [r2, #0]
 80055f2:	e1a2      	b.n	800593a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	441a      	add	r2, r3
 8005618:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005624:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65bb      	str	r3, [r7, #88]	; 0x58
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005640:	4413      	add	r3, r2
 8005642:	65bb      	str	r3, [r7, #88]	; 0x58
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	011a      	lsls	r2, r3, #4
 800564a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800564c:	4413      	add	r3, r2
 800564e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005652:	657b      	str	r3, [r7, #84]	; 0x54
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	891b      	ldrh	r3, [r3, #8]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	b29b      	uxth	r3, r3
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005662:	801a      	strh	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	653b      	str	r3, [r7, #80]	; 0x50
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566e:	b29b      	uxth	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005674:	4413      	add	r3, r2
 8005676:	653b      	str	r3, [r7, #80]	; 0x50
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	011a      	lsls	r2, r3, #4
 800567e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005680:	4413      	add	r3, r2
 8005682:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	895b      	ldrh	r3, [r3, #10]
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	b29b      	uxth	r3, r3
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005696:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f040 8091 	bne.w	80057c4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80056b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01b      	beq.n	80056f2 <USB_ActivateEndpoint+0x47e>
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80056de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8005700:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01b      	beq.n	8005742 <USB_ActivateEndpoint+0x4ce>
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005720:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	441a      	add	r2, r3
 800572c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800572e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800573e:	b29b      	uxth	r3, r3
 8005740:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005758:	86bb      	strh	r3, [r7, #52]	; 0x34
 800575a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800575c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005760:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005762:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005764:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005768:	86bb      	strh	r3, [r7, #52]	; 0x34
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	441a      	add	r2, r3
 8005774:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	b29b      	uxth	r3, r3
 8005788:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80057ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057be:	b29b      	uxth	r3, r3
 80057c0:	8013      	strh	r3, [r2, #0]
 80057c2:	e0ba      	b.n	800593a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80057d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80057d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01d      	beq.n	800581c <USB_ActivateEndpoint+0x5a8>
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005818:	b29b      	uxth	r3, r3
 800581a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800582c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01d      	beq.n	8005874 <USB_ActivateEndpoint+0x600>
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	441a      	add	r2, r3
 800585c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005870:	b29b      	uxth	r3, r3
 8005872:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	78db      	ldrb	r3, [r3, #3]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d024      	beq.n	80058c6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005892:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005896:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800589a:	f083 0320 	eor.w	r3, r3, #32
 800589e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	441a      	add	r2, r3
 80058ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80058b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	8013      	strh	r3, [r2, #0]
 80058c4:	e01d      	b.n	8005902 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	441a      	add	r2, r3
 80058ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80058ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fe:	b29b      	uxth	r3, r3
 8005900:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005918:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	441a      	add	r2, r3
 8005924:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005936:	b29b      	uxth	r3, r3
 8005938:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800593a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800593e:	4618      	mov	r0, r3
 8005940:	376c      	adds	r7, #108	; 0x6c
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005948:	b480      	push	{r7}
 800594a:	b08d      	sub	sp, #52	; 0x34
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	7b1b      	ldrb	r3, [r3, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f040 808e 	bne.w	8005a78 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d044      	beq.n	80059ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	81bb      	strh	r3, [r7, #12]
 8005972:	89bb      	ldrh	r3, [r7, #12]
 8005974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <USB_DeactivateEndpoint+0x6c>
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005992:	817b      	strh	r3, [r7, #10]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	897b      	ldrh	r3, [r7, #10]
 80059a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ca:	813b      	strh	r3, [r7, #8]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	893b      	ldrh	r3, [r7, #8]
 80059d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	8013      	strh	r3, [r2, #0]
 80059ec:	e192      	b.n	8005d14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	827b      	strh	r3, [r7, #18]
 80059fc:	8a7b      	ldrh	r3, [r7, #18]
 80059fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01b      	beq.n	8005a3e <USB_DeactivateEndpoint+0xf6>
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1c:	823b      	strh	r3, [r7, #16]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	441a      	add	r2, r3
 8005a28:	8a3b      	ldrh	r3, [r7, #16]
 8005a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a54:	81fb      	strh	r3, [r7, #14]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	441a      	add	r2, r3
 8005a60:	89fb      	ldrh	r3, [r7, #14]
 8005a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	8013      	strh	r3, [r2, #0]
 8005a76:	e14d      	b.n	8005d14 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f040 80a5 	bne.w	8005bcc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	843b      	strh	r3, [r7, #32]
 8005a90:	8c3b      	ldrh	r3, [r7, #32]
 8005a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01b      	beq.n	8005ad2 <USB_DeactivateEndpoint+0x18a>
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab0:	83fb      	strh	r3, [r7, #30]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	441a      	add	r2, r3
 8005abc:	8bfb      	ldrh	r3, [r7, #30]
 8005abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	83bb      	strh	r3, [r7, #28]
 8005ae0:	8bbb      	ldrh	r3, [r7, #28]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01b      	beq.n	8005b22 <USB_DeactivateEndpoint+0x1da>
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b00:	837b      	strh	r3, [r7, #26]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	441a      	add	r2, r3
 8005b0c:	8b7b      	ldrh	r3, [r7, #26]
 8005b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b38:	833b      	strh	r3, [r7, #24]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	441a      	add	r2, r3
 8005b44:	8b3b      	ldrh	r3, [r7, #24]
 8005b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b70:	82fb      	strh	r3, [r7, #22]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	441a      	add	r2, r3
 8005b7c:	8afb      	ldrh	r3, [r7, #22]
 8005b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba8:	82bb      	strh	r3, [r7, #20]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	8abb      	ldrh	r3, [r7, #20]
 8005bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]
 8005bca:	e0a3      	b.n	8005d14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005bda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01b      	beq.n	8005c1c <USB_DeactivateEndpoint+0x2d4>
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005c2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01b      	beq.n	8005c6c <USB_DeactivateEndpoint+0x324>
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	441a      	add	r2, r3
 8005c8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	441a      	add	r2, r3
 8005cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3734      	adds	r7, #52	; 0x34
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b0cc      	sub	sp, #304	; 0x130
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d2e:	6018      	str	r0, [r3, #0]
 8005d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d38:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	f041 817d 	bne.w	8007046 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d908      	bls.n	8005d7a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005d78:	e007      	b.n	8005d8a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	7b1b      	ldrb	r3, [r3, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d152      	bne.n	8005e40 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	88da      	ldrh	r2, [r3, #6]
 8005db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005dbc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005dc0:	6800      	ldr	r0, [r0, #0]
 8005dc2:	f001 ff23 	bl	8007c0c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005dce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dd2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005dd6:	6812      	ldr	r2, [r2, #0]
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005df4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005df8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	440a      	add	r2, r1
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	011a      	lsls	r2, r3, #4
 8005e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	f001 b8b5 	b.w	8006faa <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	78db      	ldrb	r3, [r3, #3]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	f040 84c6 	bne.w	80067de <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6a1a      	ldr	r2, [r3, #32]
 8005e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	f240 8443 	bls.w	80066f6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	441a      	add	r2, r3
 8005eb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6a1a      	ldr	r2, [r3, #32]
 8005ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 823e 	beq.w	800638e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f1e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 809a 	bne.w	800606c <USB_EPStartXfer+0x34c>
 8005f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f44:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f6a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	440a      	add	r2, r1
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	011a      	lsls	r2, r3, #4
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d122      	bne.n	8005fea <USB_EPStartXfer+0x2ca>
 8005fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	e079      	b.n	80060de <USB_EPStartXfer+0x3be>
 8005fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fee:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff0:	d81b      	bhi.n	800602a <USB_EPStartXfer+0x30a>
 8005ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d004      	beq.n	8006012 <USB_EPStartXfer+0x2f2>
 8006008:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800600c:	3301      	adds	r3, #1
 800600e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006012:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006016:	b29b      	uxth	r3, r3
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	b29a      	uxth	r2, r3
 800601c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006020:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	e059      	b.n	80060de <USB_EPStartXfer+0x3be>
 800602a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <USB_EPStartXfer+0x32a>
 8006040:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006044:	3b01      	subs	r3, #1
 8006046:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800604a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800604e:	b29b      	uxth	r3, r3
 8006050:	029b      	lsls	r3, r3, #10
 8006052:	b29b      	uxth	r3, r3
 8006054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605c:	b29a      	uxth	r2, r3
 800605e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006062:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	e038      	b.n	80060de <USB_EPStartXfer+0x3be>
 800606c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d130      	bne.n	80060de <USB_EPStartXfer+0x3be>
 800607c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006080:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608a:	b29b      	uxth	r3, r3
 800608c:	4619      	mov	r1, r3
 800608e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006092:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006096:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800609a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	440a      	add	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	011a      	lsls	r2, r3, #4
 80060b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4413      	add	r3, r2
 80060be:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80060c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	895b      	ldrh	r3, [r3, #10]
 80060ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6959      	ldr	r1, [r3, #20]
 80060fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006104:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006108:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800610c:	6800      	ldr	r0, [r0, #0]
 800610e:	f001 fd7d 	bl	8007c0c <USB_WritePMA>
            ep->xfer_buff += len;
 8006112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695a      	ldr	r2, [r3, #20]
 800611e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006122:	441a      	add	r2, r3
 8006124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d90f      	bls.n	800616c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800614c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800615c:	1ad2      	subs	r2, r2, r3
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	621a      	str	r2, [r3, #32]
 800616a:	e00e      	b.n	800618a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800616c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800617c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800618a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 809a 	bne.w	80062d0 <USB_EPStartXfer+0x5b0>
 800619c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80061a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061a8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061be:	b29b      	uxth	r3, r3
 80061c0:	4619      	mov	r1, r3
 80061c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80061ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061ce:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	440a      	add	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	011a      	lsls	r2, r3, #4
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4413      	add	r3, r2
 80061f2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80061f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d122      	bne.n	800624e <USB_EPStartXfer+0x52e>
 8006208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800621a:	b29a      	uxth	r2, r3
 800621c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006220:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623e:	b29a      	uxth	r2, r3
 8006240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006244:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	e083      	b.n	8006356 <USB_EPStartXfer+0x636>
 800624e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006252:	2b3e      	cmp	r3, #62	; 0x3e
 8006254:	d81b      	bhi.n	800628e <USB_EPStartXfer+0x56e>
 8006256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <USB_EPStartXfer+0x556>
 800626c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006270:	3301      	adds	r3, #1
 8006272:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006276:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800627a:	b29b      	uxth	r3, r3
 800627c:	029b      	lsls	r3, r3, #10
 800627e:	b29a      	uxth	r2, r3
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	e063      	b.n	8006356 <USB_EPStartXfer+0x636>
 800628e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d104      	bne.n	80062ae <USB_EPStartXfer+0x58e>
 80062a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80062a8:	3b01      	subs	r3, #1
 80062aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80062ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	029b      	lsls	r3, r3, #10
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	e042      	b.n	8006356 <USB_EPStartXfer+0x636>
 80062d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d13a      	bne.n	8006356 <USB_EPStartXfer+0x636>
 80062e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80062e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006302:	b29b      	uxth	r3, r3
 8006304:	4619      	mov	r1, r3
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800630e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006312:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	440a      	add	r2, r1
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	011a      	lsls	r2, r3, #4
 800632a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4413      	add	r3, r2
 8006336:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800633a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006348:	b29a      	uxth	r2, r3
 800634a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	891b      	ldrh	r3, [r3, #8]
 8006362:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6959      	ldr	r1, [r3, #20]
 8006372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006376:	b29b      	uxth	r3, r3
 8006378:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800637c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006380:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006384:	6800      	ldr	r0, [r0, #0]
 8006386:	f001 fc41 	bl	8007c0c <USB_WritePMA>
 800638a:	f000 be0e 	b.w	8006faa <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d16d      	bne.n	800647a <USB_EPStartXfer+0x75a>
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063be:	4413      	add	r3, r2
 80063c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	011a      	lsls	r2, r3, #4
 80063d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063d8:	647b      	str	r3, [r7, #68]	; 0x44
 80063da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d112      	bne.n	8006408 <USB_EPStartXfer+0x6e8>
 80063e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006400:	b29a      	uxth	r2, r3
 8006402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	e063      	b.n	80064d0 <USB_EPStartXfer+0x7b0>
 8006408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640c:	2b3e      	cmp	r3, #62	; 0x3e
 800640e:	d817      	bhi.n	8006440 <USB_EPStartXfer+0x720>
 8006410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006414:	085b      	lsrs	r3, r3, #1
 8006416:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800641a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <USB_EPStartXfer+0x710>
 8006426:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800642a:	3301      	adds	r3, #1
 800642c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006430:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006434:	b29b      	uxth	r3, r3
 8006436:	029b      	lsls	r3, r3, #10
 8006438:	b29a      	uxth	r2, r3
 800643a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e047      	b.n	80064d0 <USB_EPStartXfer+0x7b0>
 8006440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800644a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	2b00      	cmp	r3, #0
 8006454:	d104      	bne.n	8006460 <USB_EPStartXfer+0x740>
 8006456:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800645a:	3b01      	subs	r3, #1
 800645c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006460:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006464:	b29b      	uxth	r3, r3
 8006466:	029b      	lsls	r3, r3, #10
 8006468:	b29b      	uxth	r3, r3
 800646a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006472:	b29a      	uxth	r2, r3
 8006474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	e02a      	b.n	80064d0 <USB_EPStartXfer+0x7b0>
 800647a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d122      	bne.n	80064d0 <USB_EPStartXfer+0x7b0>
 800648a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	653b      	str	r3, [r7, #80]	; 0x50
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064aa:	4413      	add	r3, r2
 80064ac:	653b      	str	r3, [r7, #80]	; 0x50
 80064ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	011a      	lsls	r2, r3, #4
 80064bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064be:	4413      	add	r3, r2
 80064c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	891b      	ldrh	r3, [r3, #8]
 80064dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6959      	ldr	r1, [r3, #20]
 80064ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064f6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064fa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064fe:	6800      	ldr	r0, [r0, #0]
 8006500:	f001 fb84 	bl	8007c0c <USB_WritePMA>
            ep->xfer_buff += len;
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695a      	ldr	r2, [r3, #20]
 8006510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006514:	441a      	add	r2, r3
 8006516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6a1a      	ldr	r2, [r3, #32]
 800652e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	429a      	cmp	r2, r3
 800653c:	d90f      	bls.n	800655e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800653e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6a1a      	ldr	r2, [r3, #32]
 800654a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654e:	1ad2      	subs	r2, r2, r3
 8006550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	621a      	str	r2, [r3, #32]
 800655c:	e00e      	b.n	800657c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800655e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800656e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2200      	movs	r2, #0
 800657a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800657c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	643b      	str	r3, [r7, #64]	; 0x40
 8006588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d16d      	bne.n	8006674 <USB_EPStartXfer+0x954>
 8006598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80065a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	4413      	add	r3, r2
 80065ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80065bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	011a      	lsls	r2, r3, #4
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	4413      	add	r3, r2
 80065ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
 80065d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d112      	bne.n	8006602 <USB_EPStartXfer+0x8e2>
 80065dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	e05d      	b.n	80066be <USB_EPStartXfer+0x99e>
 8006602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006606:	2b3e      	cmp	r3, #62	; 0x3e
 8006608:	d817      	bhi.n	800663a <USB_EPStartXfer+0x91a>
 800660a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <USB_EPStartXfer+0x90a>
 8006620:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006624:	3301      	adds	r3, #1
 8006626:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800662a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800662e:	b29b      	uxth	r3, r3
 8006630:	029b      	lsls	r3, r3, #10
 8006632:	b29a      	uxth	r2, r3
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	e041      	b.n	80066be <USB_EPStartXfer+0x99e>
 800663a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006648:	f003 031f 	and.w	r3, r3, #31
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <USB_EPStartXfer+0x93a>
 8006650:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006654:	3b01      	subs	r3, #1
 8006656:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800665a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800665e:	b29b      	uxth	r3, r3
 8006660:	029b      	lsls	r3, r3, #10
 8006662:	b29b      	uxth	r3, r3
 8006664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666c:	b29a      	uxth	r2, r3
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	e024      	b.n	80066be <USB_EPStartXfer+0x99e>
 8006674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d11c      	bne.n	80066be <USB_EPStartXfer+0x99e>
 8006684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006692:	b29b      	uxth	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006698:	4413      	add	r3, r2
 800669a:	643b      	str	r3, [r7, #64]	; 0x40
 800669c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	011a      	lsls	r2, r3, #4
 80066aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ac:	4413      	add	r3, r2
 80066ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	895b      	ldrh	r3, [r3, #10]
 80066ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6959      	ldr	r1, [r3, #20]
 80066da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066ec:	6800      	ldr	r0, [r0, #0]
 80066ee:	f001 fa8d 	bl	8007c0c <USB_WritePMA>
 80066f2:	f000 bc5a 	b.w	8006faa <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800674e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800675a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675e:	b29b      	uxth	r3, r3
 8006760:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800676e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677c:	b29b      	uxth	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006782:	4413      	add	r3, r2
 8006784:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	011a      	lsls	r2, r3, #4
 8006794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006796:	4413      	add	r3, r2
 8006798:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800679c:	65bb      	str	r3, [r7, #88]	; 0x58
 800679e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	891b      	ldrh	r3, [r3, #8]
 80067b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6959      	ldr	r1, [r3, #20]
 80067c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067ce:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067d2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80067d6:	6800      	ldr	r0, [r0, #0]
 80067d8:	f001 fa18 	bl	8007c0c <USB_WritePMA>
 80067dc:	e3e5      	b.n	8006faa <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80067de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006804:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	441a      	add	r2, r3
 8006822:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006836:	b29b      	uxth	r3, r3
 8006838:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800683a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684a:	1ad2      	subs	r2, r2, r3
 800684c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 81bc 	beq.w	8006bf8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800688e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	785b      	ldrb	r3, [r3, #1]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d16d      	bne.n	800697a <USB_EPStartXfer+0xc5a>
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80068aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068be:	4413      	add	r3, r2
 80068c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80068c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	011a      	lsls	r2, r3, #4
 80068d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d2:	4413      	add	r3, r2
 80068d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068d8:	677b      	str	r3, [r7, #116]	; 0x74
 80068da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d112      	bne.n	8006908 <USB_EPStartXfer+0xbe8>
 80068e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006900:	b29a      	uxth	r2, r3
 8006902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	e060      	b.n	80069ca <USB_EPStartXfer+0xcaa>
 8006908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690c:	2b3e      	cmp	r3, #62	; 0x3e
 800690e:	d817      	bhi.n	8006940 <USB_EPStartXfer+0xc20>
 8006910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800691a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <USB_EPStartXfer+0xc10>
 8006926:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800692a:	3301      	adds	r3, #1
 800692c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006930:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006934:	b29b      	uxth	r3, r3
 8006936:	029b      	lsls	r3, r3, #10
 8006938:	b29a      	uxth	r2, r3
 800693a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800693c:	801a      	strh	r2, [r3, #0]
 800693e:	e044      	b.n	80069ca <USB_EPStartXfer+0xcaa>
 8006940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800694a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	2b00      	cmp	r3, #0
 8006954:	d104      	bne.n	8006960 <USB_EPStartXfer+0xc40>
 8006956:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800695a:	3b01      	subs	r3, #1
 800695c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006960:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006964:	b29b      	uxth	r3, r3
 8006966:	029b      	lsls	r3, r3, #10
 8006968:	b29b      	uxth	r3, r3
 800696a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800696e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006972:	b29a      	uxth	r2, r3
 8006974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e027      	b.n	80069ca <USB_EPStartXfer+0xcaa>
 800697a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d11f      	bne.n	80069ca <USB_EPStartXfer+0xcaa>
 800698a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006998:	b29b      	uxth	r3, r3
 800699a:	461a      	mov	r2, r3
 800699c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069a0:	4413      	add	r3, r2
 80069a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	011a      	lsls	r2, r3, #4
 80069b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	895b      	ldrh	r3, [r3, #10]
 80069d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6959      	ldr	r1, [r3, #20]
 80069e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069f8:	6800      	ldr	r0, [r0, #0]
 80069fa:	f001 f907 	bl	8007c0c <USB_WritePMA>
          ep->xfer_buff += len;
 80069fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695a      	ldr	r2, [r3, #20]
 8006a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a0e:	441a      	add	r2, r3
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a1a      	ldr	r2, [r3, #32]
 8006a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d90f      	bls.n	8006a58 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a1a      	ldr	r2, [r3, #32]
 8006a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a48:	1ad2      	subs	r2, r2, r3
 8006a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	621a      	str	r2, [r3, #32]
 8006a56:	e00e      	b.n	8006a76 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2200      	movs	r2, #0
 8006a74:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8295 	beq.w	8006faa <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d16d      	bne.n	8006b6c <USB_EPStartXfer+0xe4c>
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ab0:	4413      	add	r3, r2
 8006ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	011a      	lsls	r2, r3, #4
 8006ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aca:	667b      	str	r3, [r7, #100]	; 0x64
 8006acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d112      	bne.n	8006afa <USB_EPStartXfer+0xdda>
 8006ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ae2:	801a      	strh	r2, [r3, #0]
 8006ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e063      	b.n	8006bc2 <USB_EPStartXfer+0xea2>
 8006afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afe:	2b3e      	cmp	r3, #62	; 0x3e
 8006b00:	d817      	bhi.n	8006b32 <USB_EPStartXfer+0xe12>
 8006b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <USB_EPStartXfer+0xe02>
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	029b      	lsls	r3, r3, #10
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e047      	b.n	8006bc2 <USB_EPStartXfer+0xea2>
 8006b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <USB_EPStartXfer+0xe32>
 8006b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b68:	801a      	strh	r2, [r3, #0]
 8006b6a:	e02a      	b.n	8006bc2 <USB_EPStartXfer+0xea2>
 8006b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d122      	bne.n	8006bc2 <USB_EPStartXfer+0xea2>
 8006b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	673b      	str	r3, [r7, #112]	; 0x70
 8006b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b9c:	4413      	add	r3, r2
 8006b9e:	673b      	str	r3, [r7, #112]	; 0x70
 8006ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	011a      	lsls	r2, r3, #4
 8006bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	891b      	ldrh	r3, [r3, #8]
 8006bce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6959      	ldr	r1, [r3, #20]
 8006bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006be8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006bf0:	6800      	ldr	r0, [r0, #0]
 8006bf2:	f001 f80b 	bl	8007c0c <USB_WritePMA>
 8006bf6:	e1d8      	b.n	8006faa <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d178      	bne.n	8006cfa <USB_EPStartXfer+0xfda>
 8006c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	011a      	lsls	r2, r3, #4
 8006c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d116      	bne.n	8006c84 <USB_EPStartXfer+0xf64>
 8006c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e06b      	b.n	8006d5c <USB_EPStartXfer+0x103c>
 8006c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c88:	2b3e      	cmp	r3, #62	; 0x3e
 8006c8a:	d818      	bhi.n	8006cbe <USB_EPStartXfer+0xf9e>
 8006c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <USB_EPStartXfer+0xf8c>
 8006ca2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006cac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	029b      	lsls	r3, r3, #10
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e04e      	b.n	8006d5c <USB_EPStartXfer+0x103c>
 8006cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ccc:	f003 031f 	and.w	r3, r3, #31
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <USB_EPStartXfer+0xfbe>
 8006cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006cde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	029b      	lsls	r3, r3, #10
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	e030      	b.n	8006d5c <USB_EPStartXfer+0x103c>
 8006cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d128      	bne.n	8006d5c <USB_EPStartXfer+0x103c>
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d2e:	4413      	add	r3, r2
 8006d30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	011a      	lsls	r2, r3, #4
 8006d42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d46:	4413      	add	r3, r2
 8006d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	891b      	ldrh	r3, [r3, #8]
 8006d68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6959      	ldr	r1, [r3, #20]
 8006d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d86:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d8a:	6800      	ldr	r0, [r0, #0]
 8006d8c:	f000 ff3e 	bl	8007c0c <USB_WritePMA>
          ep->xfer_buff += len;
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da0:	441a      	add	r2, r3
 8006da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d90f      	bls.n	8006dea <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6a1a      	ldr	r2, [r3, #32]
 8006dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	621a      	str	r2, [r3, #32]
 8006de8:	e00e      	b.n	8006e08 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2200      	movs	r2, #0
 8006e06:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 80cc 	beq.w	8006faa <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d178      	bne.n	8006f22 <USB_EPStartXfer+0x1202>
 8006e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e54:	4413      	add	r3, r2
 8006e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	011a      	lsls	r2, r3, #4
 8006e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d116      	bne.n	8006eac <USB_EPStartXfer+0x118c>
 8006e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e064      	b.n	8006f76 <USB_EPStartXfer+0x1256>
 8006eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8006eb2:	d818      	bhi.n	8006ee6 <USB_EPStartXfer+0x11c6>
 8006eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <USB_EPStartXfer+0x11b4>
 8006eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ece:	3301      	adds	r3, #1
 8006ed0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	029b      	lsls	r3, r3, #10
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	e047      	b.n	8006f76 <USB_EPStartXfer+0x1256>
 8006ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d104      	bne.n	8006f06 <USB_EPStartXfer+0x11e6>
 8006efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f00:	3b01      	subs	r3, #1
 8006f02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	029b      	lsls	r3, r3, #10
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f1e:	801a      	strh	r2, [r3, #0]
 8006f20:	e029      	b.n	8006f76 <USB_EPStartXfer+0x1256>
 8006f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d121      	bne.n	8006f76 <USB_EPStartXfer+0x1256>
 8006f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f48:	4413      	add	r3, r2
 8006f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	011a      	lsls	r2, r3, #4
 8006f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f60:	4413      	add	r3, r2
 8006f62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	895b      	ldrh	r3, [r3, #10]
 8006f82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6959      	ldr	r1, [r3, #20]
 8006f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f9c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fa0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006fa4:	6800      	ldr	r0, [r0, #0]
 8006fa6:	f000 fe31 	bl	8007c0c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fcc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd8:	8013      	strh	r3, [r2, #0]
 8006fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fde:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006fe2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fe6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006fea:	8812      	ldrh	r2, [r2, #0]
 8006fec:	f082 0210 	eor.w	r2, r2, #16
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006ffa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ffe:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007002:	8812      	ldrh	r2, [r2, #0]
 8007004:	f082 0220 	eor.w	r2, r2, #32
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	441a      	add	r2, r3
 8007024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007028:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703e:	b29b      	uxth	r3, r3
 8007040:	8013      	strh	r3, [r2, #0]
 8007042:	f000 bc9f 	b.w	8007984 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	7b1b      	ldrb	r3, [r3, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 80ae 	bne.w	80071b4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d917      	bls.n	80070a4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699a      	ldr	r2, [r3, #24]
 8007090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	619a      	str	r2, [r3, #24]
 80070a2:	e00e      	b.n	80070c2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80070a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80070b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2200      	movs	r2, #0
 80070c0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80070c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070de:	b29b      	uxth	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070e6:	4413      	add	r3, r2
 80070e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	011a      	lsls	r2, r3, #4
 80070fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070fe:	4413      	add	r3, r2
 8007100:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d116      	bne.n	800713e <USB_EPStartXfer+0x141e>
 8007110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800711c:	b29a      	uxth	r2, r3
 800711e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007134:	b29a      	uxth	r2, r3
 8007136:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800713a:	801a      	strh	r2, [r3, #0]
 800713c:	e3e8      	b.n	8007910 <USB_EPStartXfer+0x1bf0>
 800713e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007142:	2b3e      	cmp	r3, #62	; 0x3e
 8007144:	d818      	bhi.n	8007178 <USB_EPStartXfer+0x1458>
 8007146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714a:	085b      	lsrs	r3, r3, #1
 800714c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <USB_EPStartXfer+0x1446>
 800715c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007160:	3301      	adds	r3, #1
 8007162:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007166:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800716a:	b29b      	uxth	r3, r3
 800716c:	029b      	lsls	r3, r3, #10
 800716e:	b29a      	uxth	r2, r3
 8007170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	e3cb      	b.n	8007910 <USB_EPStartXfer+0x1bf0>
 8007178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717c:	095b      	lsrs	r3, r3, #5
 800717e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <USB_EPStartXfer+0x1478>
 800718e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007192:	3b01      	subs	r3, #1
 8007194:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007198:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800719c:	b29b      	uxth	r3, r3
 800719e:	029b      	lsls	r3, r3, #10
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071b0:	801a      	strh	r2, [r3, #0]
 80071b2:	e3ad      	b.n	8007910 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80071b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	78db      	ldrb	r3, [r3, #3]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	f040 8200 	bne.w	80075c6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f040 8091 	bne.w	80072fa <USB_EPStartXfer+0x15da>
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071fc:	4413      	add	r3, r2
 80071fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	011a      	lsls	r2, r3, #4
 8007210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007214:	4413      	add	r3, r2
 8007216:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800721a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d116      	bne.n	800725c <USB_EPStartXfer+0x153c>
 800722e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800723a:	b29a      	uxth	r2, r3
 800723c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	b29b      	uxth	r3, r3
 800724a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007252:	b29a      	uxth	r2, r3
 8007254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007258:	801a      	strh	r2, [r3, #0]
 800725a:	e083      	b.n	8007364 <USB_EPStartXfer+0x1644>
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b3e      	cmp	r3, #62	; 0x3e
 800726a:	d820      	bhi.n	80072ae <USB_EPStartXfer+0x158e>
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800727e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <USB_EPStartXfer+0x157c>
 8007292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007296:	3301      	adds	r3, #1
 8007298:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800729c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	029b      	lsls	r3, r3, #10
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	e05a      	b.n	8007364 <USB_EPStartXfer+0x1644>
 80072ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 031f 	and.w	r3, r3, #31
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d104      	bne.n	80072de <USB_EPStartXfer+0x15be>
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d8:	3b01      	subs	r3, #1
 80072da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80072de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	029b      	lsls	r3, r3, #10
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072f6:	801a      	strh	r2, [r3, #0]
 80072f8:	e034      	b.n	8007364 <USB_EPStartXfer+0x1644>
 80072fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d12c      	bne.n	8007364 <USB_EPStartXfer+0x1644>
 800730a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007326:	b29b      	uxth	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800732e:	4413      	add	r3, r2
 8007330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	011a      	lsls	r2, r3, #4
 8007342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007346:	4413      	add	r3, r2
 8007348:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800734c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	b29a      	uxth	r2, r3
 800735e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007362:	801a      	strh	r2, [r3, #0]
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f040 8091 	bne.w	80074a6 <USB_EPStartXfer+0x1786>
 8007384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	461a      	mov	r2, r3
 80073a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073a8:	4413      	add	r3, r2
 80073aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	011a      	lsls	r2, r3, #4
 80073bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073c0:	4413      	add	r3, r2
 80073c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d116      	bne.n	8007408 <USB_EPStartXfer+0x16e8>
 80073da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073ec:	801a      	strh	r2, [r3, #0]
 80073ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fe:	b29a      	uxth	r2, r3
 8007400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007404:	801a      	strh	r2, [r3, #0]
 8007406:	e07c      	b.n	8007502 <USB_EPStartXfer+0x17e2>
 8007408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b3e      	cmp	r3, #62	; 0x3e
 8007416:	d820      	bhi.n	800745a <USB_EPStartXfer+0x173a>
 8007418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	085b      	lsrs	r3, r3, #1
 8007426:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800742a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d004      	beq.n	8007448 <USB_EPStartXfer+0x1728>
 800743e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007442:	3301      	adds	r3, #1
 8007444:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007448:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800744c:	b29b      	uxth	r3, r3
 800744e:	029b      	lsls	r3, r3, #10
 8007450:	b29a      	uxth	r2, r3
 8007452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	e053      	b.n	8007502 <USB_EPStartXfer+0x17e2>
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	095b      	lsrs	r3, r3, #5
 8007468:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800746c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <USB_EPStartXfer+0x176a>
 8007480:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007484:	3b01      	subs	r3, #1
 8007486:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800748a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800748e:	b29b      	uxth	r3, r3
 8007490:	029b      	lsls	r3, r3, #10
 8007492:	b29b      	uxth	r3, r3
 8007494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749c:	b29a      	uxth	r2, r3
 800749e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e02d      	b.n	8007502 <USB_EPStartXfer+0x17e2>
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d125      	bne.n	8007502 <USB_EPStartXfer+0x17e2>
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074cc:	4413      	add	r3, r2
 80074ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	011a      	lsls	r2, r3, #4
 80074e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074e4:	4413      	add	r3, r2
 80074e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007500:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 81fe 	beq.w	8007910 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007534:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USB_EPStartXfer+0x182c>
 8007540:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10d      	bne.n	8007568 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800754c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 81db 	bne.w	8007910 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800755a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800755e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 81d4 	bne.w	8007910 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800758a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007596:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	441a      	add	r2, r3
 80075ac:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80075b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	8013      	strh	r3, [r2, #0]
 80075c4:	e1a4      	b.n	8007910 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	78db      	ldrb	r3, [r3, #3]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	f040 819a 	bne.w	800790c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d917      	bls.n	8007624 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80075f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	699a      	ldr	r2, [r3, #24]
 8007610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007614:	1ad2      	subs	r2, r2, r3
 8007616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	619a      	str	r2, [r3, #24]
 8007622:	e00e      	b.n	8007642 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2200      	movs	r2, #0
 8007640:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	785b      	ldrb	r3, [r3, #1]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d178      	bne.n	8007744 <USB_EPStartXfer+0x1a24>
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007676:	4413      	add	r3, r2
 8007678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800767c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	011a      	lsls	r2, r3, #4
 800768a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800768e:	4413      	add	r3, r2
 8007690:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007694:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d116      	bne.n	80076ce <USB_EPStartXfer+0x19ae>
 80076a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076ca:	801a      	strh	r2, [r3, #0]
 80076cc:	e06b      	b.n	80077a6 <USB_EPStartXfer+0x1a86>
 80076ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d2:	2b3e      	cmp	r3, #62	; 0x3e
 80076d4:	d818      	bhi.n	8007708 <USB_EPStartXfer+0x19e8>
 80076d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <USB_EPStartXfer+0x19d6>
 80076ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076f0:	3301      	adds	r3, #1
 80076f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	029b      	lsls	r3, r3, #10
 80076fe:	b29a      	uxth	r2, r3
 8007700:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007704:	801a      	strh	r2, [r3, #0]
 8007706:	e04e      	b.n	80077a6 <USB_EPStartXfer+0x1a86>
 8007708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007716:	f003 031f 	and.w	r3, r3, #31
 800771a:	2b00      	cmp	r3, #0
 800771c:	d104      	bne.n	8007728 <USB_EPStartXfer+0x1a08>
 800771e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007722:	3b01      	subs	r3, #1
 8007724:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800772c:	b29b      	uxth	r3, r3
 800772e:	029b      	lsls	r3, r3, #10
 8007730:	b29b      	uxth	r3, r3
 8007732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773a:	b29a      	uxth	r2, r3
 800773c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007740:	801a      	strh	r2, [r3, #0]
 8007742:	e030      	b.n	80077a6 <USB_EPStartXfer+0x1a86>
 8007744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	785b      	ldrb	r3, [r3, #1]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d128      	bne.n	80077a6 <USB_EPStartXfer+0x1a86>
 8007754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007770:	b29b      	uxth	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007778:	4413      	add	r3, r2
 800777a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800777e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	011a      	lsls	r2, r3, #4
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007790:	4413      	add	r3, r2
 8007792:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007796:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800779a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779e:	b29a      	uxth	r2, r3
 80077a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80077a4:	801a      	strh	r2, [r3, #0]
 80077a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d178      	bne.n	80078b6 <USB_EPStartXfer+0x1b96>
 80077c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	461a      	mov	r2, r3
 80077e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e8:	4413      	add	r3, r2
 80077ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	011a      	lsls	r2, r3, #4
 80077fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007800:	4413      	add	r3, r2
 8007802:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800780a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d116      	bne.n	8007840 <USB_EPStartXfer+0x1b20>
 8007812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007824:	801a      	strh	r2, [r3, #0]
 8007826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007836:	b29a      	uxth	r2, r3
 8007838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	e067      	b.n	8007910 <USB_EPStartXfer+0x1bf0>
 8007840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007844:	2b3e      	cmp	r3, #62	; 0x3e
 8007846:	d818      	bhi.n	800787a <USB_EPStartXfer+0x1b5a>
 8007848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784c:	085b      	lsrs	r3, r3, #1
 800784e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <USB_EPStartXfer+0x1b48>
 800785e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007862:	3301      	adds	r3, #1
 8007864:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007868:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800786c:	b29b      	uxth	r3, r3
 800786e:	029b      	lsls	r3, r3, #10
 8007870:	b29a      	uxth	r2, r3
 8007872:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007876:	801a      	strh	r2, [r3, #0]
 8007878:	e04a      	b.n	8007910 <USB_EPStartXfer+0x1bf0>
 800787a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787e:	095b      	lsrs	r3, r3, #5
 8007880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <USB_EPStartXfer+0x1b7a>
 8007890:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007894:	3b01      	subs	r3, #1
 8007896:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800789a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800789e:	b29b      	uxth	r3, r3
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078b2:	801a      	strh	r2, [r3, #0]
 80078b4:	e02c      	b.n	8007910 <USB_EPStartXfer+0x1bf0>
 80078b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d124      	bne.n	8007910 <USB_EPStartXfer+0x1bf0>
 80078c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078dc:	4413      	add	r3, r2
 80078de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	011a      	lsls	r2, r3, #4
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f4:	4413      	add	r3, r2
 80078f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007902:	b29a      	uxth	r2, r3
 8007904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007908:	801a      	strh	r2, [r3, #0]
 800790a:	e001      	b.n	8007910 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e03a      	b.n	8007986 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	b29b      	uxth	r3, r3
 800792e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007936:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800793a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800793e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007942:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007946:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800794a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800794e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	441a      	add	r2, r3
 800796c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800797c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007980:	b29b      	uxth	r3, r3
 8007982:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d020      	beq.n	80079e4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b8:	81bb      	strh	r3, [r7, #12]
 80079ba:	89bb      	ldrh	r3, [r7, #12]
 80079bc:	f083 0310 	eor.w	r3, r3, #16
 80079c0:	81bb      	strh	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	441a      	add	r2, r3
 80079cc:	89bb      	ldrh	r3, [r7, #12]
 80079ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079de:	b29b      	uxth	r3, r3
 80079e0:	8013      	strh	r3, [r2, #0]
 80079e2:	e01f      	b.n	8007a24 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fa:	81fb      	strh	r3, [r7, #14]
 80079fc:	89fb      	ldrh	r3, [r7, #14]
 80079fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a02:	81fb      	strh	r3, [r7, #14]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	441a      	add	r2, r3
 8007a0e:	89fb      	ldrh	r3, [r7, #14]
 8007a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	7b1b      	ldrb	r3, [r3, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 809d 	bne.w	8007b7e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d04c      	beq.n	8007ae6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	823b      	strh	r3, [r7, #16]
 8007a5a:	8a3b      	ldrh	r3, [r7, #16]
 8007a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01b      	beq.n	8007a9c <USB_EPClearStall+0x6c>
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7a:	81fb      	strh	r3, [r7, #14]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	441a      	add	r2, r3
 8007a86:	89fb      	ldrh	r3, [r7, #14]
 8007a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	78db      	ldrb	r3, [r3, #3]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d06c      	beq.n	8007b7e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aba:	81bb      	strh	r3, [r7, #12]
 8007abc:	89bb      	ldrh	r3, [r7, #12]
 8007abe:	f083 0320 	eor.w	r3, r3, #32
 8007ac2:	81bb      	strh	r3, [r7, #12]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	441a      	add	r2, r3
 8007ace:	89bb      	ldrh	r3, [r7, #12]
 8007ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	8013      	strh	r3, [r2, #0]
 8007ae4:	e04b      	b.n	8007b7e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	82fb      	strh	r3, [r7, #22]
 8007af4:	8afb      	ldrh	r3, [r7, #22]
 8007af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01b      	beq.n	8007b36 <USB_EPClearStall+0x106>
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b14:	82bb      	strh	r3, [r7, #20]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	441a      	add	r2, r3
 8007b20:	8abb      	ldrh	r3, [r7, #20]
 8007b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4c:	827b      	strh	r3, [r7, #18]
 8007b4e:	8a7b      	ldrh	r3, [r7, #18]
 8007b50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b54:	827b      	strh	r3, [r7, #18]
 8007b56:	8a7b      	ldrh	r3, [r7, #18]
 8007b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b5c:	827b      	strh	r3, [r7, #18]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	8a7b      	ldrh	r3, [r7, #18]
 8007b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	371c      	adds	r7, #28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr

08007b8a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007b96:	78fb      	ldrb	r3, [r7, #3]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d103      	bne.n	8007ba4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2280      	movs	r2, #128	; 0x80
 8007ba0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr

08007bb0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bc80      	pop	{r7}
 8007bd6:	4770      	bx	lr

08007bd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007bea:	68fb      	ldr	r3, [r7, #12]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr

08007c0c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b08d      	sub	sp, #52	; 0x34
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	4611      	mov	r1, r2
 8007c18:	461a      	mov	r2, r3
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	80fb      	strh	r3, [r7, #6]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c22:	88bb      	ldrh	r3, [r7, #4]
 8007c24:	3301      	adds	r3, #1
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	005a      	lsls	r2, r3, #1
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c3e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007c40:	6a3b      	ldr	r3, [r7, #32]
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c44:	e01e      	b.n	8007c84 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	3301      	adds	r3, #1
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	3302      	adds	r3, #2
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	3302      	adds	r3, #2
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	3b01      	subs	r3, #1
 8007c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1dd      	bne.n	8007c46 <USB_WritePMA+0x3a>
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	3734      	adds	r7, #52	; 0x34
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bc80      	pop	{r7}
 8007c94:	4770      	bx	lr

08007c96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b08b      	sub	sp, #44	; 0x2c
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	80fb      	strh	r3, [r7, #6]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007cac:	88bb      	ldrh	r3, [r7, #4]
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	005a      	lsls	r2, r3, #1
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cc8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cce:	e01b      	b.n	8007d08 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	3302      	adds	r3, #2
 8007cdc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	3b01      	subs	r3, #1
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e0      	bne.n	8007cd0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007d0e:	88bb      	ldrh	r3, [r7, #4]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d007      	beq.n	8007d2a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	701a      	strb	r2, [r3, #0]
  }
}
 8007d2a:	bf00      	nop
 8007d2c:	372c      	adds	r7, #44	; 0x2c
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bc80      	pop	{r7}
 8007d32:	4770      	bx	lr

08007d34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8007d38:	f001 f93a 	bl	8008fb0 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4912      	ldr	r1, [pc, #72]	; (8007d88 <MX_USB_DEVICE_Init+0x54>)
 8007d40:	4812      	ldr	r0, [pc, #72]	; (8007d8c <MX_USB_DEVICE_Init+0x58>)
 8007d42:	f001 fc6d 	bl	8009620 <USBD_Init>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8007d4c:	f7f9 f906 	bl	8000f5c <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8007d50:	490f      	ldr	r1, [pc, #60]	; (8007d90 <MX_USB_DEVICE_Init+0x5c>)
 8007d52:	480e      	ldr	r0, [pc, #56]	; (8007d8c <MX_USB_DEVICE_Init+0x58>)
 8007d54:	f001 fc90 	bl	8009678 <USBD_RegisterClass>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8007d5e:	f7f9 f8fd 	bl	8000f5c <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8007d62:	490c      	ldr	r1, [pc, #48]	; (8007d94 <MX_USB_DEVICE_Init+0x60>)
 8007d64:	4809      	ldr	r0, [pc, #36]	; (8007d8c <MX_USB_DEVICE_Init+0x58>)
 8007d66:	f000 fe1f 	bl	80089a8 <USBD_CDC_ACM_RegisterInterface>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007d70:	f7f9 f8f4 	bl	8000f5c <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8007d74:	4805      	ldr	r0, [pc, #20]	; (8007d8c <MX_USB_DEVICE_Init+0x58>)
 8007d76:	f001 fcbd 	bl	80096f4 <USBD_Start>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007d80:	f7f9 f8ec 	bl	8000f5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d84:	bf00      	nop
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	200000c4 	.word	0x200000c4
 8007d8c:	20000ac4 	.word	0x20000ac4
 8007d90:	200001f4 	.word	0x200001f4
 8007d94:	200000b0 	.word	0x200000b0

08007d98 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	01db      	lsls	r3, r3, #7
 8007da6:	4a06      	ldr	r2, [pc, #24]	; (8007dc0 <CDC_Init+0x28>)
 8007da8:	441a      	add	r2, r3
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	4905      	ldr	r1, [pc, #20]	; (8007dc4 <CDC_Init+0x2c>)
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fe30 	bl	8008a14 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8007db4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000de0 	.word	0x20000de0
 8007dc4:	20000ac4 	.word	0x20000ac4

08007dc8 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 8007dd2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bc80      	pop	{r7}
 8007ddc:	4770      	bx	lr
	...

08007de0 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	603a      	str	r2, [r7, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	4603      	mov	r3, r0
 8007dec:	71fb      	strb	r3, [r7, #7]
 8007dee:	460b      	mov	r3, r1
 8007df0:	71bb      	strb	r3, [r7, #6]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8007df6:	79bb      	ldrb	r3, [r7, #6]
 8007df8:	2b23      	cmp	r3, #35	; 0x23
 8007dfa:	f200 80b6 	bhi.w	8007f6a <CDC_Control+0x18a>
 8007dfe:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <CDC_Control+0x24>)
 8007e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e04:	08007f6b 	.word	0x08007f6b
 8007e08:	08007f6b 	.word	0x08007f6b
 8007e0c:	08007f6b 	.word	0x08007f6b
 8007e10:	08007f6b 	.word	0x08007f6b
 8007e14:	08007f6b 	.word	0x08007f6b
 8007e18:	08007f6b 	.word	0x08007f6b
 8007e1c:	08007f6b 	.word	0x08007f6b
 8007e20:	08007f6b 	.word	0x08007f6b
 8007e24:	08007f6b 	.word	0x08007f6b
 8007e28:	08007f6b 	.word	0x08007f6b
 8007e2c:	08007f6b 	.word	0x08007f6b
 8007e30:	08007f6b 	.word	0x08007f6b
 8007e34:	08007f6b 	.word	0x08007f6b
 8007e38:	08007f6b 	.word	0x08007f6b
 8007e3c:	08007f6b 	.word	0x08007f6b
 8007e40:	08007f6b 	.word	0x08007f6b
 8007e44:	08007f6b 	.word	0x08007f6b
 8007e48:	08007f6b 	.word	0x08007f6b
 8007e4c:	08007f6b 	.word	0x08007f6b
 8007e50:	08007f6b 	.word	0x08007f6b
 8007e54:	08007f6b 	.word	0x08007f6b
 8007e58:	08007f6b 	.word	0x08007f6b
 8007e5c:	08007f6b 	.word	0x08007f6b
 8007e60:	08007f6b 	.word	0x08007f6b
 8007e64:	08007f6b 	.word	0x08007f6b
 8007e68:	08007f6b 	.word	0x08007f6b
 8007e6c:	08007f6b 	.word	0x08007f6b
 8007e70:	08007f6b 	.word	0x08007f6b
 8007e74:	08007f6b 	.word	0x08007f6b
 8007e78:	08007f6b 	.word	0x08007f6b
 8007e7c:	08007f6b 	.word	0x08007f6b
 8007e80:	08007f6b 	.word	0x08007f6b
 8007e84:	08007e95 	.word	0x08007e95
 8007e88:	08007ef5 	.word	0x08007ef5
 8007e8c:	08007f6b 	.word	0x08007f6b
 8007e90:	08007f6b 	.word	0x08007f6b
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	021b      	lsls	r3, r3, #8
 8007ea2:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	3302      	adds	r3, #2
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007eac:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	3303      	adds	r3, #3
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	061b      	lsls	r3, r3, #24
 8007eb6:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	4a2e      	ldr	r2, [pc, #184]	; (8007f78 <CDC_Control+0x198>)
 8007ebe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	7911      	ldrb	r1, [r2, #4]
 8007ec8:	4a2b      	ldr	r2, [pc, #172]	; (8007f78 <CDC_Control+0x198>)
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	4413      	add	r3, r2
 8007ece:	460a      	mov	r2, r1
 8007ed0:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8007ed2:	79fb      	ldrb	r3, [r7, #7]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	7951      	ldrb	r1, [r2, #5]
 8007ed8:	4a27      	ldr	r2, [pc, #156]	; (8007f78 <CDC_Control+0x198>)
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4413      	add	r3, r2
 8007ede:	460a      	mov	r2, r1
 8007ee0:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	7991      	ldrb	r1, [r2, #6]
 8007ee8:	4a23      	ldr	r2, [pc, #140]	; (8007f78 <CDC_Control+0x198>)
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	4413      	add	r3, r2
 8007eee:	460a      	mov	r2, r1
 8007ef0:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8007ef2:	e03b      	b.n	8007f6c <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8007ef4:	79fb      	ldrb	r3, [r7, #7]
 8007ef6:	4a20      	ldr	r2, [pc, #128]	; (8007f78 <CDC_Control+0x198>)
 8007ef8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <CDC_Control+0x198>)
 8007f06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f0a:	0a1a      	lsrs	r2, r3, #8
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	4a18      	ldr	r2, [pc, #96]	; (8007f78 <CDC_Control+0x198>)
 8007f18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f1c:	0c1a      	lsrs	r2, r3, #16
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	3302      	adds	r3, #2
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	4a13      	ldr	r2, [pc, #76]	; (8007f78 <CDC_Control+0x198>)
 8007f2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f2e:	0e1a      	lsrs	r2, r3, #24
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	3303      	adds	r3, #3
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	3204      	adds	r2, #4
 8007f3e:	490e      	ldr	r1, [pc, #56]	; (8007f78 <CDC_Control+0x198>)
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	440b      	add	r3, r1
 8007f44:	791b      	ldrb	r3, [r3, #4]
 8007f46:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	3205      	adds	r2, #5
 8007f4e:	490a      	ldr	r1, [pc, #40]	; (8007f78 <CDC_Control+0x198>)
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	440b      	add	r3, r1
 8007f54:	795b      	ldrb	r3, [r3, #5]
 8007f56:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	3206      	adds	r2, #6
 8007f5e:	4906      	ldr	r1, [pc, #24]	; (8007f78 <CDC_Control+0x198>)
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	440b      	add	r3, r1
 8007f64:	799b      	ldrb	r3, [r3, #6]
 8007f66:	7013      	strb	r3, [r2, #0]
    break;
 8007f68:	e000      	b.n	8007f6c <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f6a:	bf00      	nop
  }

  return (USBD_OK);
 8007f6c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr
 8007f78:	20000e60 	.word	0x20000e60

08007f7c <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
	//HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
	//  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel

	USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	4913      	ldr	r1, [pc, #76]	; (8007fdc <CDC_Receive+0x60>)
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fd3f 	bl	8008a14 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	4910      	ldr	r1, [pc, #64]	; (8007fdc <CDC_Receive+0x60>)
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fd9a 	bl	8008ad4 <USBD_CDC_ReceivePacket>
	extern uint8_t rx_buff[255];
	extern uint8_t rx_buff_flag;

	// Wyczyszczenie tablicy odebranych danych
	uint8_t iter;
	for(iter = 0; iter<255; ++iter){
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	75fb      	strb	r3, [r7, #23]
 8007fa4:	e006      	b.n	8007fb4 <CDC_Receive+0x38>
		rx_buff[iter] = 0;
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	4a0d      	ldr	r2, [pc, #52]	; (8007fe0 <CDC_Receive+0x64>)
 8007faa:	2100      	movs	r1, #0
 8007fac:	54d1      	strb	r1, [r2, r3]
	for(iter = 0; iter<255; ++iter){
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	75fb      	strb	r3, [r7, #23]
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
 8007fb6:	2bff      	cmp	r3, #255	; 0xff
 8007fb8:	d1f5      	bne.n	8007fa6 <CDC_Receive+0x2a>
	}

	strlcpy(rx_buff, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	4806      	ldr	r0, [pc, #24]	; (8007fe0 <CDC_Receive+0x64>)
 8007fc6:	f002 ff75 	bl	800aeb4 <strlcpy>
	rx_buff_flag = 1;
 8007fca:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <CDC_Receive+0x68>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8007fd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000ac4 	.word	0x20000ac4
 8007fe0:	200005f8 	.word	0x200005f8
 8007fe4:	200006f7 	.word	0x200006f7

08007fe8 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	607a      	str	r2, [r7, #4]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	bc80      	pop	{r7}
 8008006:	4770      	bx	lr

08008008 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	6039      	str	r1, [r7, #0]
 8008012:	71fb      	strb	r3, [r7, #7]
 8008014:	4613      	mov	r3, r2
 8008016:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800801c:	2300      	movs	r3, #0
 800801e:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	4a0e      	ldr	r2, [pc, #56]	; (8008064 <CDC_Transmit+0x5c>)
 800802c:	4413      	add	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 800803a:	2301      	movs	r3, #1
 800803c:	e00d      	b.n	800805a <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 800803e:	88bb      	ldrh	r3, [r7, #4]
 8008040:	79f8      	ldrb	r0, [r7, #7]
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4908      	ldr	r1, [pc, #32]	; (8008068 <CDC_Transmit+0x60>)
 8008046:	f000 fcc3 	bl	80089d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	4906      	ldr	r1, [pc, #24]	; (8008068 <CDC_Transmit+0x60>)
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fcfe 	bl	8008a50 <USBD_CDC_TransmitPacket>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20001080 	.word	0x20001080
 8008068:	20000ac4 	.word	0x20000ac4

0800806c <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	6039      	str	r1, [r7, #0]
 8008076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2212      	movs	r2, #18
 800807c:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800807e:	4b03      	ldr	r3, [pc, #12]	; (800808c <USBD_DeviceDescriptor+0x20>)
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	200000e0 	.word	0x200000e0

08008090 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2204      	movs	r2, #4
 80080a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080a2:	4b03      	ldr	r3, [pc, #12]	; (80080b0 <USBD_LangIDStrDescriptor+0x20>)
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bc80      	pop	{r7}
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	200000f4 	.word	0x200000f4

080080b4 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d105      	bne.n	80080d2 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4907      	ldr	r1, [pc, #28]	; (80080e8 <USBD_ProductStrDescriptor+0x34>)
 80080ca:	4808      	ldr	r0, [pc, #32]	; (80080ec <USBD_ProductStrDescriptor+0x38>)
 80080cc:	f002 fad9 	bl	800a682 <USBD_GetString>
 80080d0:	e004      	b.n	80080dc <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	4904      	ldr	r1, [pc, #16]	; (80080e8 <USBD_ProductStrDescriptor+0x34>)
 80080d6:	4805      	ldr	r0, [pc, #20]	; (80080ec <USBD_ProductStrDescriptor+0x38>)
 80080d8:	f002 fad3 	bl	800a682 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080dc:	4b02      	ldr	r3, [pc, #8]	; (80080e8 <USBD_ProductStrDescriptor+0x34>)
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000e68 	.word	0x20000e68
 80080ec:	0800c0c8 	.word	0x0800c0c8

080080f0 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	6039      	str	r1, [r7, #0]
 80080fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	4904      	ldr	r1, [pc, #16]	; (8008110 <USBD_ManufacturerStrDescriptor+0x20>)
 8008100:	4804      	ldr	r0, [pc, #16]	; (8008114 <USBD_ManufacturerStrDescriptor+0x24>)
 8008102:	f002 fabe 	bl	800a682 <USBD_GetString>
  return USBD_StrDesc;
 8008106:	4b02      	ldr	r3, [pc, #8]	; (8008110 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20000e68 	.word	0x20000e68
 8008114:	0800c0e0 	.word	0x0800c0e0

08008118 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	6039      	str	r1, [r7, #0]
 8008122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	221a      	movs	r2, #26
 8008128:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800812a:	f000 f843 	bl	80081b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800812e:	4b02      	ldr	r3, [pc, #8]	; (8008138 <USBD_SerialStrDescriptor+0x20>)
}
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	200000f8 	.word	0x200000f8

0800813c <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	6039      	str	r1, [r7, #0]
 8008146:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008148:	79fb      	ldrb	r3, [r7, #7]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d105      	bne.n	800815a <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	4907      	ldr	r1, [pc, #28]	; (8008170 <USBD_ConfigStrDescriptor+0x34>)
 8008152:	4808      	ldr	r0, [pc, #32]	; (8008174 <USBD_ConfigStrDescriptor+0x38>)
 8008154:	f002 fa95 	bl	800a682 <USBD_GetString>
 8008158:	e004      	b.n	8008164 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	4904      	ldr	r1, [pc, #16]	; (8008170 <USBD_ConfigStrDescriptor+0x34>)
 800815e:	4805      	ldr	r0, [pc, #20]	; (8008174 <USBD_ConfigStrDescriptor+0x38>)
 8008160:	f002 fa8f 	bl	800a682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008164:	4b02      	ldr	r3, [pc, #8]	; (8008170 <USBD_ConfigStrDescriptor+0x34>)
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20000e68 	.word	0x20000e68
 8008174:	0800c0f4 	.word	0x0800c0f4

08008178 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	6039      	str	r1, [r7, #0]
 8008182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d105      	bne.n	8008196 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	4907      	ldr	r1, [pc, #28]	; (80081ac <USBD_InterfaceStrDescriptor+0x34>)
 800818e:	4808      	ldr	r0, [pc, #32]	; (80081b0 <USBD_InterfaceStrDescriptor+0x38>)
 8008190:	f002 fa77 	bl	800a682 <USBD_GetString>
 8008194:	e004      	b.n	80081a0 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	4904      	ldr	r1, [pc, #16]	; (80081ac <USBD_InterfaceStrDescriptor+0x34>)
 800819a:	4805      	ldr	r0, [pc, #20]	; (80081b0 <USBD_InterfaceStrDescriptor+0x38>)
 800819c:	f002 fa71 	bl	800a682 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081a0:	4b02      	ldr	r3, [pc, #8]	; (80081ac <USBD_InterfaceStrDescriptor+0x34>)
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000e68 	.word	0x20000e68
 80081b0:	0800c104 	.word	0x0800c104

080081b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081ba:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <Get_SerialNum+0x44>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081c0:	4b0e      	ldr	r3, [pc, #56]	; (80081fc <Get_SerialNum+0x48>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081c6:	4b0e      	ldr	r3, [pc, #56]	; (8008200 <Get_SerialNum+0x4c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4413      	add	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081da:	2208      	movs	r2, #8
 80081dc:	4909      	ldr	r1, [pc, #36]	; (8008204 <Get_SerialNum+0x50>)
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 f814 	bl	800820c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081e4:	2204      	movs	r2, #4
 80081e6:	4908      	ldr	r1, [pc, #32]	; (8008208 <Get_SerialNum+0x54>)
 80081e8:	68b8      	ldr	r0, [r7, #8]
 80081ea:	f000 f80f 	bl	800820c <IntToUnicode>
  }
}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	1ffff7e8 	.word	0x1ffff7e8
 80081fc:	1ffff7ec 	.word	0x1ffff7ec
 8008200:	1ffff7f0 	.word	0x1ffff7f0
 8008204:	200000fa 	.word	0x200000fa
 8008208:	2000010a 	.word	0x2000010a

0800820c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]
 8008222:	e027      	b.n	8008274 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	0f1b      	lsrs	r3, r3, #28
 8008228:	2b09      	cmp	r3, #9
 800822a:	d80b      	bhi.n	8008244 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	0f1b      	lsrs	r3, r3, #28
 8008230:	b2da      	uxtb	r2, r3
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	4619      	mov	r1, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	440b      	add	r3, r1
 800823c:	3230      	adds	r2, #48	; 0x30
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	e00a      	b.n	800825a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	0f1b      	lsrs	r3, r3, #28
 8008248:	b2da      	uxtb	r2, r3
 800824a:	7dfb      	ldrb	r3, [r7, #23]
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	4619      	mov	r1, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	440b      	add	r3, r1
 8008254:	3237      	adds	r2, #55	; 0x37
 8008256:	b2d2      	uxtb	r2, r2
 8008258:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	011b      	lsls	r3, r3, #4
 800825e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	3301      	adds	r3, #1
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	4413      	add	r3, r2
 800826a:	2200      	movs	r2, #0
 800826c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	3301      	adds	r3, #1
 8008272:	75fb      	strb	r3, [r7, #23]
 8008274:	7dfa      	ldrb	r2, [r7, #23]
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	429a      	cmp	r2, r3
 800827a:	d3d3      	bcc.n	8008224 <IntToUnicode+0x18>
  }
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	bc80      	pop	{r7}
 8008286:	4770      	bx	lr

08008288 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008294:	2300      	movs	r3, #0
 8008296:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
 800829c:	e0c6      	b.n	800842c <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
 80082a8:	4a65      	ldr	r2, [pc, #404]	; (8008440 <USBD_CDC_Init+0x1b8>)
 80082aa:	4413      	add	r3, r2
 80082ac:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	7c1b      	ldrb	r3, [r3, #16]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d13d      	bne.n	8008332 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	4a62      	ldr	r2, [pc, #392]	; (8008444 <USBD_CDC_Init+0x1bc>)
 80082ba:	5cd1      	ldrb	r1, [r2, r3]
 80082bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082c0:	2202      	movs	r2, #2
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f002 fbe7 	bl	800aa96 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	4a5e      	ldr	r2, [pc, #376]	; (8008444 <USBD_CDC_Init+0x1bc>)
 80082cc:	5cd3      	ldrb	r3, [r2, r3]
 80082ce:	f003 020f 	and.w	r2, r3, #15
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	4613      	mov	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	440b      	add	r3, r1
 80082de:	3324      	adds	r3, #36	; 0x24
 80082e0:	2201      	movs	r2, #1
 80082e2:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	4a58      	ldr	r2, [pc, #352]	; (8008448 <USBD_CDC_Init+0x1c0>)
 80082e8:	5cd1      	ldrb	r1, [r2, r3]
 80082ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ee:	2202      	movs	r2, #2
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f002 fbd0 	bl	800aa96 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	4a53      	ldr	r2, [pc, #332]	; (8008448 <USBD_CDC_Init+0x1c0>)
 80082fa:	5cd3      	ldrb	r3, [r2, r3]
 80082fc:	f003 020f 	and.w	r2, r3, #15
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	440b      	add	r3, r1
 800830c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008310:	2201      	movs	r2, #1
 8008312:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	4a4d      	ldr	r2, [pc, #308]	; (800844c <USBD_CDC_Init+0x1c4>)
 8008318:	5cd3      	ldrb	r3, [r2, r3]
 800831a:	f003 020f 	and.w	r2, r3, #15
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	3326      	adds	r3, #38	; 0x26
 800832c:	2210      	movs	r2, #16
 800832e:	801a      	strh	r2, [r3, #0]
 8008330:	e03a      	b.n	80083a8 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	4a43      	ldr	r2, [pc, #268]	; (8008444 <USBD_CDC_Init+0x1bc>)
 8008336:	5cd1      	ldrb	r1, [r2, r3]
 8008338:	2340      	movs	r3, #64	; 0x40
 800833a:	2202      	movs	r2, #2
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f002 fbaa 	bl	800aa96 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	4a3f      	ldr	r2, [pc, #252]	; (8008444 <USBD_CDC_Init+0x1bc>)
 8008346:	5cd3      	ldrb	r3, [r2, r3]
 8008348:	f003 020f 	and.w	r2, r3, #15
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	440b      	add	r3, r1
 8008358:	3324      	adds	r3, #36	; 0x24
 800835a:	2201      	movs	r2, #1
 800835c:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800835e:	7bfb      	ldrb	r3, [r7, #15]
 8008360:	4a39      	ldr	r2, [pc, #228]	; (8008448 <USBD_CDC_Init+0x1c0>)
 8008362:	5cd1      	ldrb	r1, [r2, r3]
 8008364:	2340      	movs	r3, #64	; 0x40
 8008366:	2202      	movs	r2, #2
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f002 fb94 	bl	800aa96 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	4a35      	ldr	r2, [pc, #212]	; (8008448 <USBD_CDC_Init+0x1c0>)
 8008372:	5cd3      	ldrb	r3, [r2, r3]
 8008374:	f003 020f 	and.w	r2, r3, #15
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008388:	2201      	movs	r2, #1
 800838a:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	4a2f      	ldr	r2, [pc, #188]	; (800844c <USBD_CDC_Init+0x1c4>)
 8008390:	5cd3      	ldrb	r3, [r2, r3]
 8008392:	f003 020f 	and.w	r2, r3, #15
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	3326      	adds	r3, #38	; 0x26
 80083a4:	2210      	movs	r2, #16
 80083a6:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4a28      	ldr	r2, [pc, #160]	; (800844c <USBD_CDC_Init+0x1c4>)
 80083ac:	5cd1      	ldrb	r1, [r2, r3]
 80083ae:	2308      	movs	r3, #8
 80083b0:	2203      	movs	r2, #3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f002 fb6f 	bl	800aa96 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	4a24      	ldr	r2, [pc, #144]	; (800844c <USBD_CDC_Init+0x1c4>)
 80083bc:	5cd3      	ldrb	r3, [r2, r3]
 80083be:	f003 020f 	and.w	r2, r3, #15
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	440b      	add	r3, r1
 80083ce:	3324      	adds	r3, #36	; 0x24
 80083d0:	2201      	movs	r2, #1
 80083d2:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	7bfa      	ldrb	r2, [r7, #15]
 80083de:	4610      	mov	r0, r2
 80083e0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7c1b      	ldrb	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10b      	bne.n	8008412 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	4a12      	ldr	r2, [pc, #72]	; (8008448 <USBD_CDC_Init+0x1c0>)
 80083fe:	5cd1      	ldrb	r1, [r2, r3]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f002 fc32 	bl	800ac74 <USBD_LL_PrepareReceive>
 8008410:	e009      	b.n	8008426 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8008412:	7bfb      	ldrb	r3, [r7, #15]
 8008414:	4a0c      	ldr	r2, [pc, #48]	; (8008448 <USBD_CDC_Init+0x1c0>)
 8008416:	5cd1      	ldrb	r1, [r2, r3]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800841e:	2340      	movs	r3, #64	; 0x40
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f002 fc27 	bl	800ac74 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	3301      	adds	r3, #1
 800842a:	73fb      	strb	r3, [r7, #15]
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f43f af35 	beq.w	800829e <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20001080 	.word	0x20001080
 8008444:	20001068 	.word	0x20001068
 8008448:	2000106c 	.word	0x2000106c
 800844c:	20001070 	.word	0x20001070

08008450 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
 8008460:	e057      	b.n	8008512 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	4a2f      	ldr	r2, [pc, #188]	; (8008524 <USBD_CDC_DeInit+0xd4>)
 8008466:	5cd3      	ldrb	r3, [r2, r3]
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f002 fb39 	bl	800aae2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	4a2c      	ldr	r2, [pc, #176]	; (8008524 <USBD_CDC_DeInit+0xd4>)
 8008474:	5cd3      	ldrb	r3, [r2, r3]
 8008476:	f003 020f 	and.w	r2, r3, #15
 800847a:	6879      	ldr	r1, [r7, #4]
 800847c:	4613      	mov	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	440b      	add	r3, r1
 8008486:	3324      	adds	r3, #36	; 0x24
 8008488:	2200      	movs	r2, #0
 800848a:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	4a26      	ldr	r2, [pc, #152]	; (8008528 <USBD_CDC_DeInit+0xd8>)
 8008490:	5cd3      	ldrb	r3, [r2, r3]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f002 fb24 	bl	800aae2 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	4a22      	ldr	r2, [pc, #136]	; (8008528 <USBD_CDC_DeInit+0xd8>)
 800849e:	5cd3      	ldrb	r3, [r2, r3]
 80084a0:	f003 020f 	and.w	r2, r3, #15
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	440b      	add	r3, r1
 80084b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084b4:	2200      	movs	r2, #0
 80084b6:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	4a1c      	ldr	r2, [pc, #112]	; (800852c <USBD_CDC_DeInit+0xdc>)
 80084bc:	5cd3      	ldrb	r3, [r2, r3]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f002 fb0e 	bl	800aae2 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	4a18      	ldr	r2, [pc, #96]	; (800852c <USBD_CDC_DeInit+0xdc>)
 80084ca:	5cd3      	ldrb	r3, [r2, r3]
 80084cc:	f003 020f 	and.w	r2, r3, #15
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	2200      	movs	r2, #0
 80084e0:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	4a11      	ldr	r2, [pc, #68]	; (800852c <USBD_CDC_DeInit+0xdc>)
 80084e6:	5cd3      	ldrb	r3, [r2, r3]
 80084e8:	f003 020f 	and.w	r2, r3, #15
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	3326      	adds	r3, #38	; 0x26
 80084fa:	2200      	movs	r2, #0
 80084fc:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	7bfa      	ldrb	r2, [r7, #15]
 8008508:	4610      	mov	r0, r2
 800850a:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	3301      	adds	r3, #1
 8008510:	73fb      	strb	r3, [r7, #15]
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0a4      	beq.n	8008462 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20001068 	.word	0x20001068
 8008528:	2000106c 	.word	0x2000106c
 800852c:	20001070 	.word	0x20001070

08008530 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008530:	b590      	push	{r4, r7, lr}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800853a:	2300      	movs	r3, #0
 800853c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800854e:	2300      	movs	r3, #0
 8008550:	757b      	strb	r3, [r7, #21]
 8008552:	e015      	b.n	8008580 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	889b      	ldrh	r3, [r3, #4]
 8008558:	b2da      	uxtb	r2, r3
 800855a:	7d7b      	ldrb	r3, [r7, #21]
 800855c:	496d      	ldr	r1, [pc, #436]	; (8008714 <USBD_CDC_Setup+0x1e4>)
 800855e:	5ccb      	ldrb	r3, [r1, r3]
 8008560:	429a      	cmp	r2, r3
 8008562:	d007      	beq.n	8008574 <USBD_CDC_Setup+0x44>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	889b      	ldrh	r3, [r3, #4]
 8008568:	b2da      	uxtb	r2, r3
 800856a:	7d7b      	ldrb	r3, [r7, #21]
 800856c:	496a      	ldr	r1, [pc, #424]	; (8008718 <USBD_CDC_Setup+0x1e8>)
 800856e:	5ccb      	ldrb	r3, [r1, r3]
 8008570:	429a      	cmp	r2, r3
 8008572:	d102      	bne.n	800857a <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 8008574:	7d7b      	ldrb	r3, [r7, #21]
 8008576:	75bb      	strb	r3, [r7, #22]
      break;
 8008578:	e005      	b.n	8008586 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800857a:	7d7b      	ldrb	r3, [r7, #21]
 800857c:	3301      	adds	r3, #1
 800857e:	757b      	strb	r3, [r7, #21]
 8008580:	7d7b      	ldrb	r3, [r7, #21]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0e6      	beq.n	8008554 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8008586:	7dbb      	ldrb	r3, [r7, #22]
 8008588:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800858c:	fb02 f303 	mul.w	r3, r2, r3
 8008590:	4a62      	ldr	r2, [pc, #392]	; (800871c <USBD_CDC_Setup+0x1ec>)
 8008592:	4413      	add	r3, r2
 8008594:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d04a      	beq.n	8008638 <USBD_CDC_Setup+0x108>
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	f040 80aa 	bne.w	80086fc <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	88db      	ldrh	r3, [r3, #6]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d038      	beq.n	8008622 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	b25b      	sxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	da1d      	bge.n	80085f6 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085c0:	689c      	ldr	r4, [r3, #8]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	7859      	ldrb	r1, [r3, #1]
 80085c6:	7dbb      	ldrb	r3, [r7, #22]
 80085c8:	025b      	lsls	r3, r3, #9
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	441a      	add	r2, r3
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	88db      	ldrh	r3, [r3, #6]
 80085d2:	7db8      	ldrb	r0, [r7, #22]
 80085d4:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	88db      	ldrh	r3, [r3, #6]
 80085da:	2b07      	cmp	r3, #7
 80085dc:	bf28      	it	cs
 80085de:	2307      	movcs	r3, #7
 80085e0:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 80085e2:	7dbb      	ldrb	r3, [r7, #22]
 80085e4:	025b      	lsls	r3, r3, #9
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	4413      	add	r3, r2
 80085ea:	89fa      	ldrh	r2, [r7, #14]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f002 f8a6 	bl	800a740 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 80085f4:	e089      	b.n	800870a <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	785a      	ldrb	r2, [r3, #1]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	88db      	ldrh	r3, [r3, #6]
 8008604:	b2da      	uxtb	r2, r3
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800860c:	7dbb      	ldrb	r3, [r7, #22]
 800860e:	025b      	lsls	r3, r3, #9
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	18d1      	adds	r1, r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	88db      	ldrh	r3, [r3, #6]
 8008618:	461a      	mov	r2, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f002 f8bc 	bl	800a798 <USBD_CtlPrepareRx>
    break;
 8008620:	e073      	b.n	800870a <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008628:	689c      	ldr	r4, [r3, #8]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	7859      	ldrb	r1, [r3, #1]
 800862e:	7db8      	ldrb	r0, [r7, #22]
 8008630:	2300      	movs	r3, #0
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	47a0      	blx	r4
    break;
 8008636:	e068      	b.n	800870a <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	785b      	ldrb	r3, [r3, #1]
 800863c:	2b0b      	cmp	r3, #11
 800863e:	d852      	bhi.n	80086e6 <USBD_CDC_Setup+0x1b6>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <USBD_CDC_Setup+0x118>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	08008679 	.word	0x08008679
 800864c:	080086f5 	.word	0x080086f5
 8008650:	080086e7 	.word	0x080086e7
 8008654:	080086e7 	.word	0x080086e7
 8008658:	080086e7 	.word	0x080086e7
 800865c:	080086e7 	.word	0x080086e7
 8008660:	080086e7 	.word	0x080086e7
 8008664:	080086e7 	.word	0x080086e7
 8008668:	080086e7 	.word	0x080086e7
 800866c:	080086e7 	.word	0x080086e7
 8008670:	080086a3 	.word	0x080086a3
 8008674:	080086cd 	.word	0x080086cd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b03      	cmp	r3, #3
 8008682:	d107      	bne.n	8008694 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008684:	f107 030a 	add.w	r3, r7, #10
 8008688:	2202      	movs	r2, #2
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f002 f857 	bl	800a740 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008692:	e032      	b.n	80086fa <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 ffe2 	bl	800a660 <USBD_CtlError>
        ret = USBD_FAIL;
 800869c:	2303      	movs	r3, #3
 800869e:	75fb      	strb	r3, [r7, #23]
      break;
 80086a0:	e02b      	b.n	80086fa <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d107      	bne.n	80086be <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80086ae:	f107 030d 	add.w	r3, r7, #13
 80086b2:	2201      	movs	r2, #1
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f002 f842 	bl	800a740 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80086bc:	e01d      	b.n	80086fa <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 ffcd 	bl	800a660 <USBD_CtlError>
        ret = USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	75fb      	strb	r3, [r7, #23]
      break;
 80086ca:	e016      	b.n	80086fa <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d00f      	beq.n	80086f8 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 ffc0 	bl	800a660 <USBD_CtlError>
        ret = USBD_FAIL;
 80086e0:	2303      	movs	r3, #3
 80086e2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80086e4:	e008      	b.n	80086f8 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 ffb9 	bl	800a660 <USBD_CtlError>
      ret = USBD_FAIL;
 80086ee:	2303      	movs	r3, #3
 80086f0:	75fb      	strb	r3, [r7, #23]
      break;
 80086f2:	e002      	b.n	80086fa <USBD_CDC_Setup+0x1ca>
      break;
 80086f4:	bf00      	nop
 80086f6:	e008      	b.n	800870a <USBD_CDC_Setup+0x1da>
      break;
 80086f8:	bf00      	nop
    }
    break;
 80086fa:	e006      	b.n	800870a <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 ffae 	bl	800a660 <USBD_CtlError>
    ret = USBD_FAIL;
 8008704:	2303      	movs	r3, #3
 8008706:	75fb      	strb	r3, [r7, #23]
    break;
 8008708:	bf00      	nop
  }

  return (uint8_t)ret;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
}
 800870c:	4618      	mov	r0, r3
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	bd90      	pop	{r4, r7, pc}
 8008714:	20001074 	.word	0x20001074
 8008718:	20001078 	.word	0x20001078
 800871c:	20001080 	.word	0x20001080

08008720 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008720:	b590      	push	{r4, r7, lr}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800872c:	2300      	movs	r3, #0
 800872e:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8008736:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800873c:	2300      	movs	r3, #0
 800873e:	75bb      	strb	r3, [r7, #22]
 8008740:	e00d      	b.n	800875e <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	7dbb      	ldrb	r3, [r7, #22]
 8008746:	4934      	ldr	r1, [pc, #208]	; (8008818 <USBD_CDC_DataIn+0xf8>)
 8008748:	5ccb      	ldrb	r3, [r1, r3]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	429a      	cmp	r2, r3
 8008750:	d102      	bne.n	8008758 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8008752:	7dbb      	ldrb	r3, [r7, #22]
 8008754:	75fb      	strb	r3, [r7, #23]
      break;
 8008756:	e005      	b.n	8008764 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008758:	7dbb      	ldrb	r3, [r7, #22]
 800875a:	3301      	adds	r3, #1
 800875c:	75bb      	strb	r3, [r7, #22]
 800875e:	7dbb      	ldrb	r3, [r7, #22]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0ee      	beq.n	8008742 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800876a:	fb02 f303 	mul.w	r3, r2, r3
 800876e:	4a2b      	ldr	r2, [pc, #172]	; (800881c <USBD_CDC_DataIn+0xfc>)
 8008770:	4413      	add	r3, r2
 8008772:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008774:	78fa      	ldrb	r2, [r7, #3]
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	440b      	add	r3, r1
 8008782:	3318      	adds	r3, #24
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d029      	beq.n	80087de <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800878a:	78fa      	ldrb	r2, [r7, #3]
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	3318      	adds	r3, #24
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	78f9      	ldrb	r1, [r7, #3]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	460b      	mov	r3, r1
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4403      	add	r3, r0
 80087aa:	3338      	adds	r3, #56	; 0x38
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80087b2:	fb01 f303 	mul.w	r3, r1, r3
 80087b6:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d110      	bne.n	80087de <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	3318      	adds	r3, #24
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80087d0:	78f9      	ldrb	r1, [r7, #3]
 80087d2:	2300      	movs	r3, #0
 80087d4:	2200      	movs	r2, #0
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f002 fa2b 	bl	800ac32 <USBD_LL_Transmit>
 80087dc:	e016      	b.n	800880c <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00c      	beq.n	800880c <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f8:	691c      	ldr	r4, [r3, #16]
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8008806:	78fb      	ldrb	r3, [r7, #3]
 8008808:	7df8      	ldrb	r0, [r7, #23]
 800880a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	bd90      	pop	{r4, r7, pc}
 8008816:	bf00      	nop
 8008818:	20001068 	.word	0x20001068
 800881c:	20001080 	.word	0x20001080

08008820 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800882c:	2300      	movs	r3, #0
 800882e:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008834:	2300      	movs	r3, #0
 8008836:	73bb      	strb	r3, [r7, #14]
 8008838:	e00b      	b.n	8008852 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	4a17      	ldr	r2, [pc, #92]	; (800889c <USBD_CDC_DataOut+0x7c>)
 800883e:	5cd3      	ldrb	r3, [r2, r3]
 8008840:	78fa      	ldrb	r2, [r7, #3]
 8008842:	429a      	cmp	r2, r3
 8008844:	d102      	bne.n	800884c <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	73fb      	strb	r3, [r7, #15]
      break;
 800884a:	e005      	b.n	8008858 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	3301      	adds	r3, #1
 8008850:	73bb      	strb	r3, [r7, #14]
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0f0      	beq.n	800883a <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800885e:	fb02 f303 	mul.w	r3, r2, r3
 8008862:	4a0f      	ldr	r2, [pc, #60]	; (80088a0 <USBD_CDC_DataOut+0x80>)
 8008864:	4413      	add	r3, r2
 8008866:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f002 fa22 	bl	800acb6 <USBD_LL_GetRxDataSize>
 8008872:	4602      	mov	r2, r0
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800888e:	7bf8      	ldrb	r0, [r7, #15]
 8008890:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	2000106c 	.word	0x2000106c
 80088a0:	20001080 	.word	0x20001080

080088a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088a4:	b590      	push	{r4, r7, lr}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
 80088b4:	e02e      	b.n	8008914 <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80088bc:	fb02 f303 	mul.w	r3, r2, r3
 80088c0:	4a18      	ldr	r2, [pc, #96]	; (8008924 <USBD_CDC_EP0_RxReady+0x80>)
 80088c2:	4413      	add	r3, r2
 80088c4:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e025      	b.n	800891c <USBD_CDC_EP0_RxReady+0x78>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d019      	beq.n	800890e <USBD_CDC_EP0_RxReady+0x6a>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80088e0:	2bff      	cmp	r3, #255	; 0xff
 80088e2:	d014      	beq.n	800890e <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ea:	689c      	ldr	r4, [r3, #8]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	025b      	lsls	r3, r3, #9
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	441a      	add	r2, r3
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008900:	b29b      	uxth	r3, r3
 8008902:	7bf8      	ldrb	r0, [r7, #15]
 8008904:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	22ff      	movs	r2, #255	; 0xff
 800890a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	3301      	adds	r3, #1
 8008912:	73fb      	strb	r3, [r7, #15]
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0cd      	beq.n	80088b6 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	bd90      	pop	{r4, r7, pc}
 8008924:	20001080 	.word	0x20001080

08008928 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	224b      	movs	r2, #75	; 0x4b
 8008934:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008936:	4b03      	ldr	r3, [pc, #12]	; (8008944 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008938:	4618      	mov	r0, r3
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	200001a8 	.word	0x200001a8

08008948 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	224b      	movs	r2, #75	; 0x4b
 8008954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008956:	4b03      	ldr	r3, [pc, #12]	; (8008964 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	2000015c 	.word	0x2000015c

08008968 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	224b      	movs	r2, #75	; 0x4b
 8008974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008976:	4b03      	ldr	r3, [pc, #12]	; (8008984 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	bc80      	pop	{r7}
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	200001a8 	.word	0x200001a8

08008988 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	220a      	movs	r2, #10
 8008994:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008996:	4b03      	ldr	r3, [pc, #12]	; (80089a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008998:	4618      	mov	r0, r3
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	bc80      	pop	{r7}
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000114 	.word	0x20000114

080089a8 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e004      	b.n	80089c6 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bc80      	pop	{r7}
 80089ce:	4770      	bx	lr

080089d0 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
 80089da:	603b      	str	r3, [r7, #0]
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80089ea:	fb02 f303 	mul.w	r3, r2, r3
 80089ee:	4a08      	ldr	r2, [pc, #32]	; (8008a10 <USBD_CDC_SetTxBuffer+0x40>)
 80089f0:	4413      	add	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bc80      	pop	{r7}
 8008a0e:	4770      	bx	lr
 8008a10:	20001080 	.word	0x20001080

08008a14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008a2c:	fb02 f303 	mul.w	r3, r2, r3
 8008a30:	4a06      	ldr	r2, [pc, #24]	; (8008a4c <USBD_CDC_SetRxBuffer+0x38>)
 8008a32:	4413      	add	r3, r2
 8008a34:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	371c      	adds	r7, #28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bc80      	pop	{r7}
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20001080 	.word	0x20001080

08008a50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	6039      	str	r1, [r7, #0]
 8008a5a:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008a6a:	fb02 f303 	mul.w	r3, r2, r3
 8008a6e:	4a17      	ldr	r2, [pc, #92]	; (8008acc <USBD_CDC_TransmitPacket+0x7c>)
 8008a70:	4413      	add	r3, r2
 8008a72:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d121      	bne.n	8008ac2 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	4a11      	ldr	r2, [pc, #68]	; (8008ad0 <USBD_CDC_TransmitPacket+0x80>)
 8008a8a:	5cd3      	ldrb	r3, [r2, r3]
 8008a8c:	f003 020f 	and.w	r2, r3, #15
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008a96:	6838      	ldr	r0, [r7, #0]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4403      	add	r3, r0
 8008aa2:	3318      	adds	r3, #24
 8008aa4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	4a09      	ldr	r2, [pc, #36]	; (8008ad0 <USBD_CDC_TransmitPacket+0x80>)
 8008aaa:	5cd1      	ldrb	r1, [r2, r3]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008ab8:	6838      	ldr	r0, [r7, #0]
 8008aba:	f002 f8ba 	bl	800ac32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20001080 	.word	0x20001080
 8008ad0:	20001068 	.word	0x20001068

08008ad4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008aea:	fb02 f303 	mul.w	r3, r2, r3
 8008aee:	4a11      	ldr	r2, [pc, #68]	; (8008b34 <USBD_CDC_ReceivePacket+0x60>)
 8008af0:	4413      	add	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	7c1b      	ldrb	r3, [r3, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10b      	bne.n	8008b14 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	4a0e      	ldr	r2, [pc, #56]	; (8008b38 <USBD_CDC_ReceivePacket+0x64>)
 8008b00:	5cd1      	ldrb	r1, [r2, r3]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b0c:	6838      	ldr	r0, [r7, #0]
 8008b0e:	f002 f8b1 	bl	800ac74 <USBD_LL_PrepareReceive>
 8008b12:	e009      	b.n	8008b28 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	4a08      	ldr	r2, [pc, #32]	; (8008b38 <USBD_CDC_ReceivePacket+0x64>)
 8008b18:	5cd1      	ldrb	r1, [r2, r3]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b20:	2340      	movs	r3, #64	; 0x40
 8008b22:	6838      	ldr	r0, [r7, #0]
 8008b24:	f002 f8a6 	bl	800ac74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20001080 	.word	0x20001080
 8008b38:	2000106c 	.word	0x2000106c

08008b3c <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	70fb      	strb	r3, [r7, #3]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	70bb      	strb	r3, [r7, #2]
 8008b52:	4613      	mov	r3, r2
 8008b54:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	3309      	adds	r3, #9
 8008b5a:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
 8008b60:	e05b      	b.n	8008c1a <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3302      	adds	r3, #2
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3310      	adds	r3, #16
 8008b6e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008b72:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	330a      	adds	r3, #10
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	331a      	adds	r3, #26
 8008b80:	78ba      	ldrb	r2, [r7, #2]
 8008b82:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3322      	adds	r3, #34	; 0x22
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3323      	adds	r3, #35	; 0x23
 8008b90:	78ba      	ldrb	r2, [r7, #2]
 8008b92:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3326      	adds	r3, #38	; 0x26
 8008b98:	7e3a      	ldrb	r2, [r7, #24]
 8008b9a:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	332d      	adds	r3, #45	; 0x2d
 8008ba0:	78ba      	ldrb	r2, [r7, #2]
 8008ba2:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3336      	adds	r3, #54	; 0x36
 8008ba8:	7f3a      	ldrb	r2, [r7, #28]
 8008baa:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	333d      	adds	r3, #61	; 0x3d
 8008bb0:	787a      	ldrb	r2, [r7, #1]
 8008bb2:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3342      	adds	r3, #66	; 0x42
 8008bb8:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	491b      	ldr	r1, [pc, #108]	; (8008c2c <USBD_Update_CDC_ACM_DESC+0xf0>)
 8008bbe:	787a      	ldrb	r2, [r7, #1]
 8008bc0:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	491a      	ldr	r1, [pc, #104]	; (8008c30 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8008bc6:	7f3a      	ldrb	r2, [r7, #28]
 8008bc8:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	4919      	ldr	r1, [pc, #100]	; (8008c34 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8008bce:	7e3a      	ldrb	r2, [r7, #24]
 8008bd0:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	4918      	ldr	r1, [pc, #96]	; (8008c38 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	4917      	ldr	r1, [pc, #92]	; (8008c3c <USBD_Update_CDC_ACM_DESC+0x100>)
 8008bde:	78ba      	ldrb	r2, [r7, #2]
 8008be0:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	4916      	ldr	r1, [pc, #88]	; (8008c40 <USBD_Update_CDC_ACM_DESC+0x104>)
 8008be6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008bea:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8008bec:	787b      	ldrb	r3, [r7, #1]
 8008bee:	3302      	adds	r3, #2
 8008bf0:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8008bf2:	787b      	ldrb	r3, [r7, #1]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8008bf8:	7f3b      	ldrb	r3, [r7, #28]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8008bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c02:	3301      	adds	r3, #1
 8008c04:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8008c0e:	78fb      	ldrb	r3, [r7, #3]
 8008c10:	3301      	adds	r3, #1
 8008c12:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	3301      	adds	r3, #1
 8008c18:	73fb      	strb	r3, [r7, #15]
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0a0      	beq.n	8008b62 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8008c20:	bf00      	nop
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc80      	pop	{r7}
 8008c2a:	4770      	bx	lr
 8008c2c:	20001068 	.word	0x20001068
 8008c30:	2000106c 	.word	0x2000106c
 8008c34:	20001070 	.word	0x20001070
 8008c38:	20001074 	.word	0x20001074
 8008c3c:	20001078 	.word	0x20001078
 8008c40:	2000107c 	.word	0x2000107c

08008c44 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8008c50:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <USBD_COMPOSITE_Init+0x30>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	4611      	mov	r1, r2
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 8008c5c:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <USBD_COMPOSITE_Init+0x34>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	78fa      	ldrb	r2, [r7, #3]
 8008c62:	4611      	mov	r1, r2
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000120 	.word	0x20000120
 8008c78:	20000240 	.word	0x20000240

08008c7c <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8008c88:	4b08      	ldr	r3, [pc, #32]	; (8008cac <USBD_COMPOSITE_DeInit+0x30>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	78fa      	ldrb	r2, [r7, #3]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 8008c94:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <USBD_COMPOSITE_DeInit+0x34>)
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000120 	.word	0x20000120
 8008cb0:	20000240 	.word	0x20000240

08008cb4 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]
 8008cc2:	e019      	b.n	8008cf8 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	889b      	ldrh	r3, [r3, #4]
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	4915      	ldr	r1, [pc, #84]	; (8008d24 <USBD_COMPOSITE_Setup+0x70>)
 8008cce:	5ccb      	ldrb	r3, [r1, r3]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d007      	beq.n	8008ce4 <USBD_COMPOSITE_Setup+0x30>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	889b      	ldrh	r3, [r3, #4]
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	4912      	ldr	r1, [pc, #72]	; (8008d28 <USBD_COMPOSITE_Setup+0x74>)
 8008cde:	5ccb      	ldrb	r3, [r1, r3]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d106      	bne.n	8008cf2 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8008ce4:	4b11      	ldr	r3, [pc, #68]	; (8008d2c <USBD_COMPOSITE_Setup+0x78>)
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	4798      	blx	r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	e014      	b.n	8008d1c <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	73fb      	strb	r3, [r7, #15]
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0e2      	beq.n	8008cc4 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	889b      	ldrh	r3, [r3, #4]
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <USBD_COMPOSITE_Setup+0x7c>)
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d106      	bne.n	8008d1a <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 8008d0c:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <USBD_COMPOSITE_Setup+0x80>)
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	4798      	blx	r3
 8008d16:	4603      	mov	r3, r0
 8008d18:	e000      	b.n	8008d1c <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8008d1a:	2303      	movs	r3, #3
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20001074 	.word	0x20001074
 8008d28:	20001078 	.word	0x20001078
 8008d2c:	20000120 	.word	0x20000120
 8008d30:	200013a4 	.word	0x200013a4
 8008d34:	20000240 	.word	0x20000240

08008d38 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]
 8008d48:	e01a      	b.n	8008d80 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8008d4a:	78fa      	ldrb	r2, [r7, #3]
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	4918      	ldr	r1, [pc, #96]	; (8008db0 <USBD_COMPOSITE_DataIn+0x78>)
 8008d50:	5ccb      	ldrb	r3, [r1, r3]
 8008d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d007      	beq.n	8008d6a <USBD_COMPOSITE_DataIn+0x32>
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
 8008d5e:	4915      	ldr	r1, [pc, #84]	; (8008db4 <USBD_COMPOSITE_DataIn+0x7c>)
 8008d60:	5ccb      	ldrb	r3, [r1, r3]
 8008d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d107      	bne.n	8008d7a <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8008d6a:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <USBD_COMPOSITE_DataIn+0x80>)
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	4611      	mov	r1, r2
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	4798      	blx	r3
 8008d76:	4603      	mov	r3, r0
 8008d78:	e015      	b.n	8008da6 <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	73fb      	strb	r3, [r7, #15]
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0e1      	beq.n	8008d4a <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 8008d86:	78fa      	ldrb	r2, [r7, #3]
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <USBD_COMPOSITE_DataIn+0x84>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d107      	bne.n	8008da4 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 8008d94:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <USBD_COMPOSITE_DataIn+0x88>)
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	78fa      	ldrb	r2, [r7, #3]
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	4798      	blx	r3
 8008da0:	4603      	mov	r3, r0
 8008da2:	e000      	b.n	8008da6 <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20001068 	.word	0x20001068
 8008db4:	20001070 	.word	0x20001070
 8008db8:	20000120 	.word	0x20000120
 8008dbc:	2000023e 	.word	0x2000023e
 8008dc0:	20000240 	.word	0x20000240

08008dc4 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000120 	.word	0x20000120

08008de4 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bc80      	pop	{r7}
 8008df6:	4770      	bx	lr

08008df8 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bc80      	pop	{r7}
 8008e0a:	4770      	bx	lr

08008e0c <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr

08008e24 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr

08008e3c <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]
 8008e4c:	e010      	b.n	8008e70 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	4a0b      	ldr	r2, [pc, #44]	; (8008e80 <USBD_COMPOSITE_DataOut+0x44>)
 8008e52:	5cd3      	ldrb	r3, [r2, r3]
 8008e54:	78fa      	ldrb	r2, [r7, #3]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d107      	bne.n	8008e6a <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <USBD_COMPOSITE_DataOut+0x48>)
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	78fa      	ldrb	r2, [r7, #3]
 8008e60:	4611      	mov	r1, r2
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	4798      	blx	r3
 8008e66:	4603      	mov	r3, r0
 8008e68:	e006      	b.n	8008e78 <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	73fb      	strb	r3, [r7, #15]
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0eb      	beq.n	8008e4e <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8008e76:	2303      	movs	r3, #3
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	2000106c 	.word	0x2000106c
 8008e84:	20000120 	.word	0x20000120

08008e88 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2264      	movs	r2, #100	; 0x64
 8008e94:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8008e96:	4b03      	ldr	r3, [pc, #12]	; (8008ea4 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bc80      	pop	{r7}
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20001300 	.word	0x20001300

08008ea8 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2264      	movs	r2, #100	; 0x64
 8008eb4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8008eb6:	4b03      	ldr	r3, [pc, #12]	; (8008ec4 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	2000129c 	.word	0x2000129c

08008ec8 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2264      	movs	r2, #100	; 0x64
 8008ed4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8008ed6:	4b03      	ldr	r3, [pc, #12]	; (8008ee4 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bc80      	pop	{r7}
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20001300 	.word	0x20001300

08008ee8 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	220a      	movs	r2, #10
 8008ef4:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8008ef6:	4b03      	ldr	r3, [pc, #12]	; (8008f04 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bc80      	pop	{r7}
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20000234 	.word	0x20000234

08008f08 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08a      	sub	sp, #40	; 0x28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	460b      	mov	r3, r1
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8008f16:	4b20      	ldr	r3, [pc, #128]	; (8008f98 <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	7afa      	ldrb	r2, [r7, #11]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d836      	bhi.n	8008f8e <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8008f20:	2300      	movs	r3, #0
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	f107 0318 	add.w	r3, r7, #24
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	605a      	str	r2, [r3, #4]
 8008f2e:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008f30:	2300      	movs	r3, #0
 8008f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f36:	e01a      	b.n	8008f6e <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8008f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f3c:	4a17      	ldr	r2, [pc, #92]	; (8008f9c <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8008f3e:	5cd3      	ldrb	r3, [r2, r3]
 8008f40:	7afa      	ldrb	r2, [r7, #11]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d10e      	bne.n	8008f64 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8008f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f4a:	f107 0014 	add.w	r0, r7, #20
 8008f4e:	4a14      	ldr	r2, [pc, #80]	; (8008fa0 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8008f50:	2110      	movs	r1, #16
 8008f52:	f001 ff2f 	bl	800adb4 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8008f56:	f107 0314 	add.w	r3, r7, #20
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	4911      	ldr	r1, [pc, #68]	; (8008fa4 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 fb8f 	bl	800a682 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f68:	3301      	adds	r3, #1
 8008f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0e0      	beq.n	8008f38 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 8008f76:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	7afa      	ldrb	r2, [r7, #11]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d104      	bne.n	8008f8a <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4908      	ldr	r1, [pc, #32]	; (8008fa4 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8008f84:	4809      	ldr	r0, [pc, #36]	; (8008fac <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8008f86:	f001 fb7c 	bl	800a682 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8008f8c:	e000      	b.n	8008f90 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8008f8e:	2300      	movs	r3, #0
  }
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3728      	adds	r7, #40	; 0x28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	20000230 	.word	0x20000230
 8008f9c:	2000107c 	.word	0x2000107c
 8008fa0:	0800c118 	.word	0x0800c118
 8008fa4:	20001364 	.word	0x20001364
 8008fa8:	200013a5 	.word	0x200013a5
 8008fac:	0800c128 	.word	0x0800c128

08008fb0 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8008fb0:	b590      	push	{r4, r7, lr}
 8008fb2:	b089      	sub	sp, #36	; 0x24
 8008fb4:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8008fbe:	2381      	movs	r3, #129	; 0x81
 8008fc0:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 8008fca:	4b6f      	ldr	r3, [pc, #444]	; (8009188 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	1d3a      	adds	r2, r7, #4
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
 8008fd4:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8008fd6:	4b6d      	ldr	r3, [pc, #436]	; (800918c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	7afa      	ldrb	r2, [r7, #11]
 8008fdc:	7a79      	ldrb	r1, [r7, #9]
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 faf0 	bl	80095c4 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	3309      	adds	r3, #9
 8008fe8:	88ba      	ldrh	r2, [r7, #4]
 8008fea:	3a09      	subs	r2, #9
 8008fec:	4619      	mov	r1, r3
 8008fee:	4868      	ldr	r0, [pc, #416]	; (8009190 <USBD_COMPOSITE_Mount_Class+0x1e0>)
 8008ff0:	f001 feca 	bl	800ad88 <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 8008ff4:	4b64      	ldr	r3, [pc, #400]	; (8009188 <USBD_COMPOSITE_Mount_Class+0x1d8>)
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	1d3a      	adds	r2, r7, #4
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	4798      	blx	r3
 8008ffe:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8009000:	4b62      	ldr	r3, [pc, #392]	; (800918c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	7afa      	ldrb	r2, [r7, #11]
 8009006:	7a79      	ldrb	r1, [r7, #9]
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 fadb 	bl	80095c4 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3309      	adds	r3, #9
 8009012:	88ba      	ldrh	r2, [r7, #4]
 8009014:	3a09      	subs	r2, #9
 8009016:	4619      	mov	r1, r3
 8009018:	485e      	ldr	r0, [pc, #376]	; (8009194 <USBD_COMPOSITE_Mount_Class+0x1e4>)
 800901a:	f001 feb5 	bl	800ad88 <memcpy>

  in_ep_track += 1;
 800901e:	7afb      	ldrb	r3, [r7, #11]
 8009020:	3301      	adds	r3, #1
 8009022:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 8009024:	7a7b      	ldrb	r3, [r7, #9]
 8009026:	3301      	adds	r3, #1
 8009028:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800902a:	4b58      	ldr	r3, [pc, #352]	; (800918c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	3301      	adds	r3, #1
 8009030:	b2da      	uxtb	r2, r3
 8009032:	4b56      	ldr	r3, [pc, #344]	; (800918c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8009034:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8009036:	4b58      	ldr	r3, [pc, #352]	; (8009198 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 8009038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903a:	1d3a      	adds	r2, r7, #4
 800903c:	4610      	mov	r0, r2
 800903e:	4798      	blx	r3
 8009040:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8009042:	7a7b      	ldrb	r3, [r7, #9]
 8009044:	3301      	adds	r3, #1
 8009046:	b2d8      	uxtb	r0, r3
 8009048:	7afb      	ldrb	r3, [r7, #11]
 800904a:	3301      	adds	r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	4a4f      	ldr	r2, [pc, #316]	; (800918c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8009050:	7812      	ldrb	r2, [r2, #0]
 8009052:	7afc      	ldrb	r4, [r7, #11]
 8009054:	7a79      	ldrb	r1, [r7, #9]
 8009056:	9202      	str	r2, [sp, #8]
 8009058:	7aba      	ldrb	r2, [r7, #10]
 800905a:	9201      	str	r2, [sp, #4]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	4623      	mov	r3, r4
 8009060:	4602      	mov	r2, r0
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff fd6a 	bl	8008b3c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3309      	adds	r3, #9
 800906c:	88ba      	ldrh	r2, [r7, #4]
 800906e:	3a09      	subs	r2, #9
 8009070:	4619      	mov	r1, r3
 8009072:	484a      	ldr	r0, [pc, #296]	; (800919c <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8009074:	f001 fe88 	bl	800ad88 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8009078:	4b47      	ldr	r3, [pc, #284]	; (8009198 <USBD_COMPOSITE_Mount_Class+0x1e8>)
 800907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907c:	1d3a      	adds	r2, r7, #4
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3
 8009082:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8009084:	7a7b      	ldrb	r3, [r7, #9]
 8009086:	3301      	adds	r3, #1
 8009088:	b2d8      	uxtb	r0, r3
 800908a:	7afb      	ldrb	r3, [r7, #11]
 800908c:	3301      	adds	r3, #1
 800908e:	b2db      	uxtb	r3, r3
 8009090:	4a3e      	ldr	r2, [pc, #248]	; (800918c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8009092:	7812      	ldrb	r2, [r2, #0]
 8009094:	7afc      	ldrb	r4, [r7, #11]
 8009096:	7a79      	ldrb	r1, [r7, #9]
 8009098:	9202      	str	r2, [sp, #8]
 800909a:	7aba      	ldrb	r2, [r7, #10]
 800909c:	9201      	str	r2, [sp, #4]
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	4623      	mov	r3, r4
 80090a2:	4602      	mov	r2, r0
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff fd49 	bl	8008b3c <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3309      	adds	r3, #9
 80090ae:	88ba      	ldrh	r2, [r7, #4]
 80090b0:	3a09      	subs	r2, #9
 80090b2:	4619      	mov	r1, r3
 80090b4:	483a      	ldr	r0, [pc, #232]	; (80091a0 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 80090b6:	f001 fe67 	bl	800ad88 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 80090ba:	7afb      	ldrb	r3, [r7, #11]
 80090bc:	3302      	adds	r3, #2
 80090be:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 80090c0:	7abb      	ldrb	r3, [r7, #10]
 80090c2:	3301      	adds	r3, #1
 80090c4:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 80090c6:	7a7b      	ldrb	r3, [r7, #9]
 80090c8:	3302      	adds	r3, #2
 80090ca:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 80090cc:	4b2f      	ldr	r3, [pc, #188]	; (800918c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	3301      	adds	r3, #1
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	4b2d      	ldr	r3, [pc, #180]	; (800918c <USBD_COMPOSITE_Mount_Class+0x1dc>)
 80090d6:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 80090d8:	2364      	movs	r3, #100	; 0x64
 80090da:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 80090dc:	4b31      	ldr	r3, [pc, #196]	; (80091a4 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 80090de:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2209      	movs	r2, #9
 80090e4:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3301      	adds	r3, #1
 80090ea:	2202      	movs	r2, #2
 80090ec:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3302      	adds	r3, #2
 80090f2:	88fa      	ldrh	r2, [r7, #6]
 80090f4:	b2d2      	uxtb	r2, r2
 80090f6:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	0a1b      	lsrs	r3, r3, #8
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3303      	adds	r3, #3
 8009102:	b2d2      	uxtb	r2, r2
 8009104:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3304      	adds	r3, #4
 800910a:	7a7a      	ldrb	r2, [r7, #9]
 800910c:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3305      	adds	r3, #5
 8009112:	2201      	movs	r2, #1
 8009114:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3306      	adds	r3, #6
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3307      	adds	r3, #7
 8009122:	22c0      	movs	r2, #192	; 0xc0
 8009124:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3308      	adds	r3, #8
 800912a:	2232      	movs	r2, #50	; 0x32
 800912c:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800912e:	4b1e      	ldr	r3, [pc, #120]	; (80091a8 <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8009130:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2209      	movs	r2, #9
 8009136:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	2202      	movs	r2, #2
 800913e:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3302      	adds	r3, #2
 8009144:	88fa      	ldrh	r2, [r7, #6]
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	0a1b      	lsrs	r3, r3, #8
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3303      	adds	r3, #3
 8009154:	b2d2      	uxtb	r2, r2
 8009156:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3304      	adds	r3, #4
 800915c:	7a7a      	ldrb	r2, [r7, #9]
 800915e:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3305      	adds	r3, #5
 8009164:	2201      	movs	r2, #1
 8009166:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3306      	adds	r3, #6
 800916c:	2200      	movs	r2, #0
 800916e:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3307      	adds	r3, #7
 8009174:	22c0      	movs	r2, #192	; 0xc0
 8009176:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3308      	adds	r3, #8
 800917c:	2232      	movs	r2, #50	; 0x32
 800917e:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8009180:	bf00      	nop
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	bd90      	pop	{r4, r7, pc}
 8009188:	20000240 	.word	0x20000240
 800918c:	20000230 	.word	0x20000230
 8009190:	200012a5 	.word	0x200012a5
 8009194:	20001309 	.word	0x20001309
 8009198:	20000120 	.word	0x20000120
 800919c:	200012be 	.word	0x200012be
 80091a0:	20001322 	.word	0x20001322
 80091a4:	20001300 	.word	0x20001300
 80091a8:	2000129c 	.word	0x2000129c

080091ac <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 80091b8:	4b24      	ldr	r3, [pc, #144]	; (800924c <USBD_HID_Init+0xa0>)
 80091ba:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d105      	bne.n	80091ce <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 80091ca:	2302      	movs	r3, #2
 80091cc:	e03a      	b.n	8009244 <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	7c1b      	ldrb	r3, [r3, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10d      	bne.n	80091fa <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 80091de:	4b1c      	ldr	r3, [pc, #112]	; (8009250 <USBD_HID_Init+0xa4>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	f003 020f 	and.w	r2, r3, #15
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4613      	mov	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	3326      	adds	r3, #38	; 0x26
 80091f4:	2201      	movs	r2, #1
 80091f6:	801a      	strh	r2, [r3, #0]
 80091f8:	e00c      	b.n	8009214 <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 80091fa:	4b15      	ldr	r3, [pc, #84]	; (8009250 <USBD_HID_Init+0xa4>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 020f 	and.w	r2, r3, #15
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	440b      	add	r3, r1
 800920e:	3326      	adds	r3, #38	; 0x26
 8009210:	2201      	movs	r2, #1
 8009212:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 8009214:	4b0e      	ldr	r3, [pc, #56]	; (8009250 <USBD_HID_Init+0xa4>)
 8009216:	7819      	ldrb	r1, [r3, #0]
 8009218:	2308      	movs	r3, #8
 800921a:	2203      	movs	r2, #3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f001 fc3a 	bl	800aa96 <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 8009222:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <USBD_HID_Init+0xa4>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	f003 020f 	and.w	r2, r3, #15
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	4613      	mov	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	3324      	adds	r3, #36	; 0x24
 8009238:	2201      	movs	r2, #1
 800923a:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	200013a8 	.word	0x200013a8
 8009250:	2000023e 	.word	0x2000023e

08009254 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 8009260:	4b16      	ldr	r3, [pc, #88]	; (80092bc <USBD_HID_DeInit+0x68>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f001 fc3b 	bl	800aae2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 800926c:	4b13      	ldr	r3, [pc, #76]	; (80092bc <USBD_HID_DeInit+0x68>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	f003 020f 	and.w	r2, r3, #15
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	440b      	add	r3, r1
 8009280:	3324      	adds	r3, #36	; 0x24
 8009282:	2200      	movs	r2, #0
 8009284:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 8009286:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <USBD_HID_DeInit+0x68>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	f003 020f 	and.w	r2, r3, #15
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	4613      	mov	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	3326      	adds	r3, #38	; 0x26
 800929c:	2200      	movs	r2, #0
 800929e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }

  return (uint8_t)USBD_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	2000023e 	.word	0x2000023e

080092c0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092d0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d101      	bne.n	80092e4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e0e8      	b.n	80094b6 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d046      	beq.n	800937e <USBD_HID_Setup+0xbe>
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	f040 80d8 	bne.w	80094a6 <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	785b      	ldrb	r3, [r3, #1]
 80092fa:	3b02      	subs	r3, #2
 80092fc:	2b09      	cmp	r3, #9
 80092fe:	d836      	bhi.n	800936e <USBD_HID_Setup+0xae>
 8009300:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <USBD_HID_Setup+0x48>)
 8009302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009306:	bf00      	nop
 8009308:	0800935f 	.word	0x0800935f
 800930c:	0800933f 	.word	0x0800933f
 8009310:	0800936f 	.word	0x0800936f
 8009314:	0800936f 	.word	0x0800936f
 8009318:	0800936f 	.word	0x0800936f
 800931c:	0800936f 	.word	0x0800936f
 8009320:	0800936f 	.word	0x0800936f
 8009324:	0800936f 	.word	0x0800936f
 8009328:	0800934d 	.word	0x0800934d
 800932c:	08009331 	.word	0x08009331
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	885b      	ldrh	r3, [r3, #2]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	461a      	mov	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	601a      	str	r2, [r3, #0]
      break;
 800933c:	e01e      	b.n	800937c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 f9fb 	bl	800a740 <USBD_CtlSendData>
      break;
 800934a:	e017      	b.n	800937c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	885b      	ldrh	r3, [r3, #2]
 8009350:	0a1b      	lsrs	r3, r3, #8
 8009352:	b29b      	uxth	r3, r3
 8009354:	b2db      	uxtb	r3, r3
 8009356:	461a      	mov	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	605a      	str	r2, [r3, #4]
      break;
 800935c:	e00e      	b.n	800937c <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3304      	adds	r3, #4
 8009362:	2201      	movs	r2, #1
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 f9ea 	bl	800a740 <USBD_CtlSendData>
      break;
 800936c:	e006      	b.n	800937c <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 f975 	bl	800a660 <USBD_CtlError>
      ret = USBD_FAIL;
 8009376:	2303      	movs	r3, #3
 8009378:	75fb      	strb	r3, [r7, #23]
      break;
 800937a:	bf00      	nop
    }
    break;
 800937c:	e09a      	b.n	80094b4 <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	785b      	ldrb	r3, [r3, #1]
 8009382:	2b0b      	cmp	r3, #11
 8009384:	f200 8086 	bhi.w	8009494 <USBD_HID_Setup+0x1d4>
 8009388:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <USBD_HID_Setup+0xd0>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	080093c1 	.word	0x080093c1
 8009394:	080094a3 	.word	0x080094a3
 8009398:	08009495 	.word	0x08009495
 800939c:	08009495 	.word	0x08009495
 80093a0:	08009495 	.word	0x08009495
 80093a4:	08009495 	.word	0x08009495
 80093a8:	080093eb 	.word	0x080093eb
 80093ac:	08009495 	.word	0x08009495
 80093b0:	08009495 	.word	0x08009495
 80093b4:	08009495 	.word	0x08009495
 80093b8:	08009443 	.word	0x08009443
 80093bc:	0800946d 	.word	0x0800946d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d107      	bne.n	80093dc <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80093cc:	f107 030a 	add.w	r3, r7, #10
 80093d0:	2202      	movs	r2, #2
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 f9b3 	bl	800a740 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80093da:	e063      	b.n	80094a4 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f001 f93e 	bl	800a660 <USBD_CtlError>
        ret = USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	75fb      	strb	r3, [r7, #23]
      break;
 80093e8:	e05c      	b.n	80094a4 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	885b      	ldrh	r3, [r3, #2]
 80093ee:	0a1b      	lsrs	r3, r3, #8
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	2b22      	cmp	r3, #34	; 0x22
 80093f4:	d108      	bne.n	8009408 <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	88db      	ldrh	r3, [r3, #6]
 80093fa:	2bbb      	cmp	r3, #187	; 0xbb
 80093fc:	bf28      	it	cs
 80093fe:	23bb      	movcs	r3, #187	; 0xbb
 8009400:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 8009402:	4b2f      	ldr	r3, [pc, #188]	; (80094c0 <USBD_HID_Setup+0x200>)
 8009404:	613b      	str	r3, [r7, #16]
 8009406:	e015      	b.n	8009434 <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	885b      	ldrh	r3, [r3, #2]
 800940c:	0a1b      	lsrs	r3, r3, #8
 800940e:	b29b      	uxth	r3, r3
 8009410:	2b21      	cmp	r3, #33	; 0x21
 8009412:	d108      	bne.n	8009426 <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 8009414:	4b2b      	ldr	r3, [pc, #172]	; (80094c4 <USBD_HID_Setup+0x204>)
 8009416:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	88db      	ldrh	r3, [r3, #6]
 800941c:	2b09      	cmp	r3, #9
 800941e:	bf28      	it	cs
 8009420:	2309      	movcs	r3, #9
 8009422:	82bb      	strh	r3, [r7, #20]
 8009424:	e006      	b.n	8009434 <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 f919 	bl	800a660 <USBD_CtlError>
        ret = USBD_FAIL;
 800942e:	2303      	movs	r3, #3
 8009430:	75fb      	strb	r3, [r7, #23]
        break;
 8009432:	e037      	b.n	80094a4 <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009434:	8abb      	ldrh	r3, [r7, #20]
 8009436:	461a      	mov	r2, r3
 8009438:	6939      	ldr	r1, [r7, #16]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 f980 	bl	800a740 <USBD_CtlSendData>
      break;
 8009440:	e030      	b.n	80094a4 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b03      	cmp	r3, #3
 800944c:	d107      	bne.n	800945e <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3308      	adds	r3, #8
 8009452:	2201      	movs	r2, #1
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f001 f972 	bl	800a740 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800945c:	e022      	b.n	80094a4 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 f8fd 	bl	800a660 <USBD_CtlError>
        ret = USBD_FAIL;
 8009466:	2303      	movs	r3, #3
 8009468:	75fb      	strb	r3, [r7, #23]
      break;
 800946a:	e01b      	b.n	80094a4 <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b03      	cmp	r3, #3
 8009476:	d106      	bne.n	8009486 <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	885b      	ldrh	r3, [r3, #2]
 800947c:	b2db      	uxtb	r3, r3
 800947e:	461a      	mov	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009484:	e00e      	b.n	80094a4 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 f8e9 	bl	800a660 <USBD_CtlError>
        ret = USBD_FAIL;
 800948e:	2303      	movs	r3, #3
 8009490:	75fb      	strb	r3, [r7, #23]
      break;
 8009492:	e007      	b.n	80094a4 <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 f8e2 	bl	800a660 <USBD_CtlError>
      ret = USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	75fb      	strb	r3, [r7, #23]
      break;
 80094a0:	e000      	b.n	80094a4 <USBD_HID_Setup+0x1e4>
      break;
 80094a2:	bf00      	nop
    }
    break;
 80094a4:	e006      	b.n	80094b4 <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 f8d9 	bl	800a660 <USBD_CtlError>
    ret = USBD_FAIL;
 80094ae:	2303      	movs	r3, #3
 80094b0:	75fb      	strb	r3, [r7, #23]
    break;
 80094b2:	bf00      	nop
  }

  return (uint8_t)ret;
 80094b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3718      	adds	r7, #24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	200002dc 	.word	0x200002dc
 80094c4:	200002c4 	.word	0x200002c4

080094c8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2222      	movs	r2, #34	; 0x22
 80094d4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 80094d6:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	2000027c 	.word	0x2000027c

080094e8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2222      	movs	r2, #34	; 0x22
 80094f4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 80094f6:	4b03      	ldr	r3, [pc, #12]	; (8009504 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bc80      	pop	{r7}
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	200002a0 	.word	0x200002a0

08009508 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2222      	movs	r2, #34	; 0x22
 8009514:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 8009516:	4b03      	ldr	r3, [pc, #12]	; (8009524 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	bc80      	pop	{r7}
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	2000027c 	.word	0x2000027c

08009528 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800953a:	2200      	movs	r2, #0
 800953c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	bc80      	pop	{r7}
 8009548:	4770      	bx	lr
	...

0800954c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	220a      	movs	r2, #10
 8009558:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800955a:	4b03      	ldr	r3, [pc, #12]	; (8009568 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	bc80      	pop	{r7}
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	200002d0 	.word	0x200002d0

0800956c <USBD_HID_Keybaord_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Keybaord_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	80fb      	strh	r3, [r7, #6]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009580:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <USBD_HID_Keybaord_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8009588:	2303      	movs	r3, #3
 800958a:	e014      	b.n	80095b6 <USBD_HID_Keybaord_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b03      	cmp	r3, #3
 8009596:	d10d      	bne.n	80095b4 <USBD_HID_Keybaord_SendReport+0x48>
  {
    if (hhid->state == KEYBOARD_HID_IDLE)
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	7b1b      	ldrb	r3, [r3, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d109      	bne.n	80095b4 <USBD_HID_Keybaord_SendReport+0x48>
    {
      hhid->state = KEYBOARD_HID_BUSY;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2201      	movs	r2, #1
 80095a4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_KEYBOARD_IN_EP, report, len);
 80095a6:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <USBD_HID_Keybaord_SendReport+0x54>)
 80095a8:	7819      	ldrb	r1, [r3, #0]
 80095aa:	88fb      	ldrh	r3, [r7, #6]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f001 fb3f 	bl	800ac32 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	2000023e 	.word	0x2000023e

080095c4 <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	4608      	mov	r0, r1
 80095ce:	4611      	mov	r1, r2
 80095d0:	461a      	mov	r2, r3
 80095d2:	4603      	mov	r3, r0
 80095d4:	70fb      	strb	r3, [r7, #3]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70bb      	strb	r3, [r7, #2]
 80095da:	4613      	mov	r3, r2
 80095dc:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	330b      	adds	r3, #11
 80095e2:	78fa      	ldrb	r2, [r7, #3]
 80095e4:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3311      	adds	r3, #17
 80095ea:	787a      	ldrb	r2, [r7, #1]
 80095ec:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	331d      	adds	r3, #29
 80095f2:	78ba      	ldrb	r2, [r7, #2]
 80095f4:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 80095f6:	4a07      	ldr	r2, [pc, #28]	; (8009614 <USBD_Update_HID_KBD_DESC+0x50>)
 80095f8:	78bb      	ldrb	r3, [r7, #2]
 80095fa:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 80095fc:	4a06      	ldr	r2, [pc, #24]	; (8009618 <USBD_Update_HID_KBD_DESC+0x54>)
 80095fe:	78fb      	ldrb	r3, [r7, #3]
 8009600:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 8009602:	4a06      	ldr	r2, [pc, #24]	; (800961c <USBD_Update_HID_KBD_DESC+0x58>)
 8009604:	787b      	ldrb	r3, [r7, #1]
 8009606:	7013      	strb	r3, [r2, #0]
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	2000023e 	.word	0x2000023e
 8009618:	200013a4 	.word	0x200013a4
 800961c:	200013a5 	.word	0x200013a5

08009620 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009634:	2303      	movs	r3, #3
 8009636:	e01b      	b.n	8009670 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	79fa      	ldrb	r2, [r7, #7]
 8009662:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f001 f97d 	bl	800a964 <USBD_LL_Init>
 800966a:	4603      	mov	r3, r0
 800966c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800966e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800968c:	2303      	movs	r3, #3
 800968e:	e02d      	b.n	80096ec <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7c1b      	ldrb	r3, [r3, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d112      	bne.n	80096c6 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d01e      	beq.n	80096ea <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b4:	f107 020e 	add.w	r2, r7, #14
 80096b8:	4610      	mov	r0, r2
 80096ba:	4798      	blx	r3
 80096bc:	4602      	mov	r2, r0
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 80096c4:	e011      	b.n	80096ea <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00b      	beq.n	80096ea <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096da:	f107 020e 	add.w	r2, r7, #14
 80096de:	4610      	mov	r0, r2
 80096e0:	4798      	blx	r3
 80096e2:	4602      	mov	r2, r0
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 f9af 	bl	800aa60 <USBD_LL_Start>
 8009702:	4603      	mov	r3, r0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr

08009720 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800972c:	2303      	movs	r3, #3
 800972e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009736:	2b00      	cmp	r3, #0
 8009738:	d009      	beq.n	800974e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	4611      	mov	r1, r2
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
 800974a:	4603      	mov	r3, r0
 800974c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976a:	2b00      	cmp	r3, #0
 800976c:	d007      	beq.n	800977e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	78fa      	ldrb	r2, [r7, #3]
 8009778:	4611      	mov	r1, r2
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	4798      	blx	r3
  }

  return USBD_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 ff26 	bl	800a5ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80097ae:	461a      	mov	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097bc:	f003 031f 	and.w	r3, r3, #31
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d01a      	beq.n	80097fa <USBD_LL_SetupStage+0x72>
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d822      	bhi.n	800980e <USBD_LL_SetupStage+0x86>
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <USBD_LL_SetupStage+0x4a>
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d00a      	beq.n	80097e6 <USBD_LL_SetupStage+0x5e>
 80097d0:	e01d      	b.n	800980e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9e6 	bl	8009bac <USBD_StdDevReq>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
      break;
 80097e4:	e020      	b.n	8009828 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa4a 	bl	8009c88 <USBD_StdItfReq>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
      break;
 80097f8:	e016      	b.n	8009828 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa89 	bl	8009d1a <USBD_StdEPReq>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]
      break;
 800980c:	e00c      	b.n	8009828 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009814:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009818:	b2db      	uxtb	r3, r3
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 f97f 	bl	800ab20 <USBD_LL_StallEP>
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]
      break;
 8009826:	bf00      	nop
  }

  return ret;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b086      	sub	sp, #24
 8009836:	af00      	add	r7, sp, #0
 8009838:	60f8      	str	r0, [r7, #12]
 800983a:	460b      	mov	r3, r1
 800983c:	607a      	str	r2, [r7, #4]
 800983e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009840:	7afb      	ldrb	r3, [r7, #11]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d138      	bne.n	80098b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800984c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009854:	2b03      	cmp	r3, #3
 8009856:	d14a      	bne.n	80098ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	429a      	cmp	r2, r3
 8009862:	d913      	bls.n	800988c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	1ad2      	subs	r2, r2, r3
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	68da      	ldr	r2, [r3, #12]
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	4293      	cmp	r3, r2
 800987c:	bf28      	it	cs
 800987e:	4613      	movcs	r3, r2
 8009880:	461a      	mov	r2, r3
 8009882:	6879      	ldr	r1, [r7, #4]
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 ffa4 	bl	800a7d2 <USBD_CtlContinueRx>
 800988a:	e030      	b.n	80098ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b03      	cmp	r3, #3
 8009896:	d10b      	bne.n	80098b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 ff9f 	bl	800a7f4 <USBD_CtlSendStatus>
 80098b6:	e01a      	b.n	80098ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d114      	bne.n	80098ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00e      	beq.n	80098ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	7afa      	ldrb	r2, [r7, #11]
 80098da:	4611      	mov	r1, r2
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	4798      	blx	r3
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	e000      	b.n	80098f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	460b      	mov	r3, r1
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009906:	7afb      	ldrb	r3, [r7, #11]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d16b      	bne.n	80099e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3314      	adds	r3, #20
 8009910:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009918:	2b02      	cmp	r3, #2
 800991a:	d156      	bne.n	80099ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	429a      	cmp	r2, r3
 8009926:	d914      	bls.n	8009952 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	1ad2      	subs	r2, r2, r3
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	461a      	mov	r2, r3
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 ff19 	bl	800a776 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009944:	2300      	movs	r3, #0
 8009946:	2200      	movs	r2, #0
 8009948:	2100      	movs	r1, #0
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f001 f992 	bl	800ac74 <USBD_LL_PrepareReceive>
 8009950:	e03b      	b.n	80099ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	429a      	cmp	r2, r3
 800995c:	d11c      	bne.n	8009998 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009966:	429a      	cmp	r2, r3
 8009968:	d316      	bcc.n	8009998 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009974:	429a      	cmp	r2, r3
 8009976:	d20f      	bcs.n	8009998 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009978:	2200      	movs	r2, #0
 800997a:	2100      	movs	r1, #0
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 fefa 	bl	800a776 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800998a:	2300      	movs	r3, #0
 800998c:	2200      	movs	r2, #0
 800998e:	2100      	movs	r1, #0
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f001 f96f 	bl	800ac74 <USBD_LL_PrepareReceive>
 8009996:	e018      	b.n	80099ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d10b      	bne.n	80099bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80099bc:	2180      	movs	r1, #128	; 0x80
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f001 f8ae 	bl	800ab20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 ff28 	bl	800a81a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d122      	bne.n	8009a1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7ff fe99 	bl	800970c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099e2:	e01a      	b.n	8009a1a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d114      	bne.n	8009a1a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00e      	beq.n	8009a1a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	7afa      	ldrb	r2, [r7, #11]
 8009a06:	4611      	mov	r1, r2
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	4798      	blx	r3
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	e000      	b.n	8009a1c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e02a      	b.n	8009aae <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d009      	beq.n	8009a78 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	6852      	ldr	r2, [r2, #4]
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	4611      	mov	r1, r2
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a78:	2340      	movs	r3, #64	; 0x40
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f001 f809 	bl	800aa96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2240      	movs	r2, #64	; 0x40
 8009a90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a94:	2340      	movs	r3, #64	; 0x40
 8009a96:	2200      	movs	r2, #0
 8009a98:	2180      	movs	r1, #128	; 0x80
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fffb 	bl	800aa96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2240      	movs	r2, #64	; 0x40
 8009aaa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	78fa      	ldrb	r2, [r7, #3]
 8009ac6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bc80      	pop	{r7}
 8009ad2:	4770      	bx	lr

08009ad4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2204      	movs	r2, #4
 8009aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bc80      	pop	{r7}
 8009afc:	4770      	bx	lr

08009afe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d106      	bne.n	8009b20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bc80      	pop	{r7}
 8009b2a:	4770      	bx	lr

08009b2c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e012      	b.n	8009b68 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d10b      	bne.n	8009b66 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d005      	beq.n	8009b66 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b087      	sub	sp, #28
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	3301      	adds	r3, #1
 8009b86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b8e:	8a3b      	ldrh	r3, [r7, #16]
 8009b90:	021b      	lsls	r3, r3, #8
 8009b92:	b21a      	sxth	r2, r3
 8009b94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	b21b      	sxth	r3, r3
 8009b9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b9e:	89fb      	ldrh	r3, [r7, #14]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bc80      	pop	{r7}
 8009ba8:	4770      	bx	lr
	...

08009bac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bc2:	2b40      	cmp	r3, #64	; 0x40
 8009bc4:	d005      	beq.n	8009bd2 <USBD_StdDevReq+0x26>
 8009bc6:	2b40      	cmp	r3, #64	; 0x40
 8009bc8:	d853      	bhi.n	8009c72 <USBD_StdDevReq+0xc6>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <USBD_StdDevReq+0x3a>
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d14f      	bne.n	8009c72 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	4798      	blx	r3
 8009be0:	4603      	mov	r3, r0
 8009be2:	73fb      	strb	r3, [r7, #15]
      break;
 8009be4:	e04a      	b.n	8009c7c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	785b      	ldrb	r3, [r3, #1]
 8009bea:	2b09      	cmp	r3, #9
 8009bec:	d83b      	bhi.n	8009c66 <USBD_StdDevReq+0xba>
 8009bee:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <USBD_StdDevReq+0x48>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c49 	.word	0x08009c49
 8009bf8:	08009c5d 	.word	0x08009c5d
 8009bfc:	08009c67 	.word	0x08009c67
 8009c00:	08009c53 	.word	0x08009c53
 8009c04:	08009c67 	.word	0x08009c67
 8009c08:	08009c27 	.word	0x08009c27
 8009c0c:	08009c1d 	.word	0x08009c1d
 8009c10:	08009c67 	.word	0x08009c67
 8009c14:	08009c3f 	.word	0x08009c3f
 8009c18:	08009c31 	.word	0x08009c31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f9de 	bl	8009fe0 <USBD_GetDescriptor>
          break;
 8009c24:	e024      	b.n	8009c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fb55 	bl	800a2d8 <USBD_SetAddress>
          break;
 8009c2e:	e01f      	b.n	8009c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fb94 	bl	800a360 <USBD_SetConfig>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]
          break;
 8009c3c:	e018      	b.n	8009c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fc33 	bl	800a4ac <USBD_GetConfig>
          break;
 8009c46:	e013      	b.n	8009c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fc64 	bl	800a518 <USBD_GetStatus>
          break;
 8009c50:	e00e      	b.n	8009c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fc93 	bl	800a580 <USBD_SetFeature>
          break;
 8009c5a:	e009      	b.n	8009c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fca2 	bl	800a5a8 <USBD_ClrFeature>
          break;
 8009c64:	e004      	b.n	8009c70 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fcf9 	bl	800a660 <USBD_CtlError>
          break;
 8009c6e:	bf00      	nop
      }
      break;
 8009c70:	e004      	b.n	8009c7c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fcf3 	bl	800a660 <USBD_CtlError>
      break;
 8009c7a:	bf00      	nop
  }

  return ret;
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop

08009c88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c9e:	2b40      	cmp	r3, #64	; 0x40
 8009ca0:	d005      	beq.n	8009cae <USBD_StdItfReq+0x26>
 8009ca2:	2b40      	cmp	r3, #64	; 0x40
 8009ca4:	d82f      	bhi.n	8009d06 <USBD_StdItfReq+0x7e>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <USBD_StdItfReq+0x26>
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d12b      	bne.n	8009d06 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d81d      	bhi.n	8009cf8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	889b      	ldrh	r3, [r3, #4]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b0f      	cmp	r3, #15
 8009cc4:	d813      	bhi.n	8009cee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	4798      	blx	r3
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	88db      	ldrh	r3, [r3, #6]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d110      	bne.n	8009d02 <USBD_StdItfReq+0x7a>
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10d      	bne.n	8009d02 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fd84 	bl	800a7f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cec:	e009      	b.n	8009d02 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fcb5 	bl	800a660 <USBD_CtlError>
          break;
 8009cf6:	e004      	b.n	8009d02 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fcb0 	bl	800a660 <USBD_CtlError>
          break;
 8009d00:	e000      	b.n	8009d04 <USBD_StdItfReq+0x7c>
          break;
 8009d02:	bf00      	nop
      }
      break;
 8009d04:	e004      	b.n	8009d10 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fca9 	bl	800a660 <USBD_CtlError>
      break;
 8009d0e:	bf00      	nop
  }

  return ret;
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	889b      	ldrh	r3, [r3, #4]
 8009d2c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d36:	2b40      	cmp	r3, #64	; 0x40
 8009d38:	d007      	beq.n	8009d4a <USBD_StdEPReq+0x30>
 8009d3a:	2b40      	cmp	r3, #64	; 0x40
 8009d3c:	f200 8145 	bhi.w	8009fca <USBD_StdEPReq+0x2b0>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00c      	beq.n	8009d5e <USBD_StdEPReq+0x44>
 8009d44:	2b20      	cmp	r3, #32
 8009d46:	f040 8140 	bne.w	8009fca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	4798      	blx	r3
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d5c:	e13a      	b.n	8009fd4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d007      	beq.n	8009d76 <USBD_StdEPReq+0x5c>
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	f300 8129 	bgt.w	8009fbe <USBD_StdEPReq+0x2a4>
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d07f      	beq.n	8009e70 <USBD_StdEPReq+0x156>
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d03c      	beq.n	8009dee <USBD_StdEPReq+0xd4>
 8009d74:	e123      	b.n	8009fbe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d002      	beq.n	8009d88 <USBD_StdEPReq+0x6e>
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d016      	beq.n	8009db4 <USBD_StdEPReq+0x9a>
 8009d86:	e02c      	b.n	8009de2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00d      	beq.n	8009daa <USBD_StdEPReq+0x90>
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	2b80      	cmp	r3, #128	; 0x80
 8009d92:	d00a      	beq.n	8009daa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fec1 	bl	800ab20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d9e:	2180      	movs	r1, #128	; 0x80
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 febd 	bl	800ab20 <USBD_LL_StallEP>
 8009da6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009da8:	e020      	b.n	8009dec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fc57 	bl	800a660 <USBD_CtlError>
              break;
 8009db2:	e01b      	b.n	8009dec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	885b      	ldrh	r3, [r3, #2]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10e      	bne.n	8009dda <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00b      	beq.n	8009dda <USBD_StdEPReq+0xc0>
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b80      	cmp	r3, #128	; 0x80
 8009dc6:	d008      	beq.n	8009dda <USBD_StdEPReq+0xc0>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	88db      	ldrh	r3, [r3, #6]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d104      	bne.n	8009dda <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fea3 	bl	800ab20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fd0a 	bl	800a7f4 <USBD_CtlSendStatus>

              break;
 8009de0:	e004      	b.n	8009dec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fc3b 	bl	800a660 <USBD_CtlError>
              break;
 8009dea:	bf00      	nop
          }
          break;
 8009dec:	e0ec      	b.n	8009fc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d002      	beq.n	8009e00 <USBD_StdEPReq+0xe6>
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d016      	beq.n	8009e2c <USBD_StdEPReq+0x112>
 8009dfe:	e030      	b.n	8009e62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e00:	7bbb      	ldrb	r3, [r7, #14]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00d      	beq.n	8009e22 <USBD_StdEPReq+0x108>
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	2b80      	cmp	r3, #128	; 0x80
 8009e0a:	d00a      	beq.n	8009e22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fe85 	bl	800ab20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e16:	2180      	movs	r1, #128	; 0x80
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fe81 	bl	800ab20 <USBD_LL_StallEP>
 8009e1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e20:	e025      	b.n	8009e6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fc1b 	bl	800a660 <USBD_CtlError>
              break;
 8009e2a:	e020      	b.n	8009e6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	885b      	ldrh	r3, [r3, #2]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d11b      	bne.n	8009e6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d004      	beq.n	8009e48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e3e:	7bbb      	ldrb	r3, [r7, #14]
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fe8b 	bl	800ab5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fcd3 	bl	800a7f4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	4798      	blx	r3
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009e60:	e004      	b.n	8009e6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fbfb 	bl	800a660 <USBD_CtlError>
              break;
 8009e6a:	e000      	b.n	8009e6e <USBD_StdEPReq+0x154>
              break;
 8009e6c:	bf00      	nop
          }
          break;
 8009e6e:	e0ab      	b.n	8009fc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d002      	beq.n	8009e82 <USBD_StdEPReq+0x168>
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d032      	beq.n	8009ee6 <USBD_StdEPReq+0x1cc>
 8009e80:	e097      	b.n	8009fb2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d007      	beq.n	8009e98 <USBD_StdEPReq+0x17e>
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	2b80      	cmp	r3, #128	; 0x80
 8009e8c:	d004      	beq.n	8009e98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fbe5 	bl	800a660 <USBD_CtlError>
                break;
 8009e96:	e091      	b.n	8009fbc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	da0b      	bge.n	8009eb8 <USBD_StdEPReq+0x19e>
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	3310      	adds	r3, #16
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	e00b      	b.n	8009ed0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	3304      	adds	r3, #4
 8009ed0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2202      	movs	r2, #2
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fc2e 	bl	800a740 <USBD_CtlSendData>
              break;
 8009ee4:	e06a      	b.n	8009fbc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da11      	bge.n	8009f12 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	f003 020f 	and.w	r2, r3, #15
 8009ef4:	6879      	ldr	r1, [r7, #4]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	440b      	add	r3, r1
 8009f00:	3324      	adds	r3, #36	; 0x24
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d117      	bne.n	8009f38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fba8 	bl	800a660 <USBD_CtlError>
                  break;
 8009f10:	e054      	b.n	8009fbc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	f003 020f 	and.w	r2, r3, #15
 8009f18:	6879      	ldr	r1, [r7, #4]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	440b      	add	r3, r1
 8009f24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d104      	bne.n	8009f38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fb95 	bl	800a660 <USBD_CtlError>
                  break;
 8009f36:	e041      	b.n	8009fbc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	da0b      	bge.n	8009f58 <USBD_StdEPReq+0x23e>
 8009f40:	7bbb      	ldrb	r3, [r7, #14]
 8009f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f46:	4613      	mov	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	3310      	adds	r3, #16
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	4413      	add	r3, r2
 8009f54:	3304      	adds	r3, #4
 8009f56:	e00b      	b.n	8009f70 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	3304      	adds	r3, #4
 8009f70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <USBD_StdEPReq+0x264>
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	2b80      	cmp	r3, #128	; 0x80
 8009f7c:	d103      	bne.n	8009f86 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	e00e      	b.n	8009fa4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fe06 	bl	800ab9c <USBD_LL_IsStallEP>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	e002      	b.n	8009fa4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fbc8 	bl	800a740 <USBD_CtlSendData>
              break;
 8009fb0:	e004      	b.n	8009fbc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fb53 	bl	800a660 <USBD_CtlError>
              break;
 8009fba:	bf00      	nop
          }
          break;
 8009fbc:	e004      	b.n	8009fc8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fb4d 	bl	800a660 <USBD_CtlError>
          break;
 8009fc6:	bf00      	nop
      }
      break;
 8009fc8:	e004      	b.n	8009fd4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fb47 	bl	800a660 <USBD_CtlError>
      break;
 8009fd2:	bf00      	nop
  }

  return ret;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fea:	2300      	movs	r3, #0
 8009fec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	885b      	ldrh	r3, [r3, #2]
 8009ffa:	0a1b      	lsrs	r3, r3, #8
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	2b06      	cmp	r3, #6
 800a002:	f200 813b 	bhi.w	800a27c <USBD_GetDescriptor+0x29c>
 800a006:	a201      	add	r2, pc, #4	; (adr r2, 800a00c <USBD_GetDescriptor+0x2c>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a029 	.word	0x0800a029
 800a010:	0800a041 	.word	0x0800a041
 800a014:	0800a081 	.word	0x0800a081
 800a018:	0800a27d 	.word	0x0800a27d
 800a01c:	0800a27d 	.word	0x0800a27d
 800a020:	0800a21d 	.word	0x0800a21d
 800a024:	0800a249 	.word	0x0800a249
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	7c12      	ldrb	r2, [r2, #16]
 800a034:	f107 0108 	add.w	r1, r7, #8
 800a038:	4610      	mov	r0, r2
 800a03a:	4798      	blx	r3
 800a03c:	60f8      	str	r0, [r7, #12]
      break;
 800a03e:	e125      	b.n	800a28c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7c1b      	ldrb	r3, [r3, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10d      	bne.n	800a064 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a050:	f107 0208 	add.w	r2, r7, #8
 800a054:	4610      	mov	r0, r2
 800a056:	4798      	blx	r3
 800a058:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	3301      	adds	r3, #1
 800a05e:	2202      	movs	r2, #2
 800a060:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a062:	e113      	b.n	800a28c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	f107 0208 	add.w	r2, r7, #8
 800a070:	4610      	mov	r0, r2
 800a072:	4798      	blx	r3
 800a074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	2202      	movs	r2, #2
 800a07c:	701a      	strb	r2, [r3, #0]
      break;
 800a07e:	e105      	b.n	800a28c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	885b      	ldrh	r3, [r3, #2]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b05      	cmp	r3, #5
 800a088:	f200 80ac 	bhi.w	800a1e4 <USBD_GetDescriptor+0x204>
 800a08c:	a201      	add	r2, pc, #4	; (adr r2, 800a094 <USBD_GetDescriptor+0xb4>)
 800a08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a092:	bf00      	nop
 800a094:	0800a0ad 	.word	0x0800a0ad
 800a098:	0800a0e1 	.word	0x0800a0e1
 800a09c:	0800a115 	.word	0x0800a115
 800a0a0:	0800a149 	.word	0x0800a149
 800a0a4:	0800a17d 	.word	0x0800a17d
 800a0a8:	0800a1b1 	.word	0x0800a1b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7c12      	ldrb	r2, [r2, #16]
 800a0c4:	f107 0108 	add.w	r1, r7, #8
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ce:	e0a4      	b.n	800a21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fac4 	bl	800a660 <USBD_CtlError>
            err++;
 800a0d8:	7afb      	ldrb	r3, [r7, #11]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0de:	e09c      	b.n	800a21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00b      	beq.n	800a104 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	7c12      	ldrb	r2, [r2, #16]
 800a0f8:	f107 0108 	add.w	r1, r7, #8
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4798      	blx	r3
 800a100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a102:	e08a      	b.n	800a21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 faaa 	bl	800a660 <USBD_CtlError>
            err++;
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	3301      	adds	r3, #1
 800a110:	72fb      	strb	r3, [r7, #11]
          break;
 800a112:	e082      	b.n	800a21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	7c12      	ldrb	r2, [r2, #16]
 800a12c:	f107 0108 	add.w	r1, r7, #8
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
 800a134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a136:	e070      	b.n	800a21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fa90 	bl	800a660 <USBD_CtlError>
            err++;
 800a140:	7afb      	ldrb	r3, [r7, #11]
 800a142:	3301      	adds	r3, #1
 800a144:	72fb      	strb	r3, [r7, #11]
          break;
 800a146:	e068      	b.n	800a21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00b      	beq.n	800a16c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	7c12      	ldrb	r2, [r2, #16]
 800a160:	f107 0108 	add.w	r1, r7, #8
 800a164:	4610      	mov	r0, r2
 800a166:	4798      	blx	r3
 800a168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a16a:	e056      	b.n	800a21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fa76 	bl	800a660 <USBD_CtlError>
            err++;
 800a174:	7afb      	ldrb	r3, [r7, #11]
 800a176:	3301      	adds	r3, #1
 800a178:	72fb      	strb	r3, [r7, #11]
          break;
 800a17a:	e04e      	b.n	800a21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00b      	beq.n	800a1a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	7c12      	ldrb	r2, [r2, #16]
 800a194:	f107 0108 	add.w	r1, r7, #8
 800a198:	4610      	mov	r0, r2
 800a19a:	4798      	blx	r3
 800a19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a19e:	e03c      	b.n	800a21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fa5c 	bl	800a660 <USBD_CtlError>
            err++;
 800a1a8:	7afb      	ldrb	r3, [r7, #11]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ae:	e034      	b.n	800a21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00b      	beq.n	800a1d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	7c12      	ldrb	r2, [r2, #16]
 800a1c8:	f107 0108 	add.w	r1, r7, #8
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	4798      	blx	r3
 800a1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1d2:	e022      	b.n	800a21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fa42 	bl	800a660 <USBD_CtlError>
            err++;
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1e2:	e01a      	b.n	800a21a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00c      	beq.n	800a20a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	8852      	ldrh	r2, [r2, #2]
 800a1fc:	b2d1      	uxtb	r1, r2
 800a1fe:	f107 0208 	add.w	r2, r7, #8
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	4798      	blx	r3
 800a206:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800a208:	e006      	b.n	800a218 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fa27 	bl	800a660 <USBD_CtlError>
            err++;
 800a212:	7afb      	ldrb	r3, [r7, #11]
 800a214:	3301      	adds	r3, #1
 800a216:	72fb      	strb	r3, [r7, #11]
          break;
 800a218:	bf00      	nop
      }
      break;
 800a21a:	e037      	b.n	800a28c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	7c1b      	ldrb	r3, [r3, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d109      	bne.n	800a238 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22c:	f107 0208 	add.w	r2, r7, #8
 800a230:	4610      	mov	r0, r2
 800a232:	4798      	blx	r3
 800a234:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a236:	e029      	b.n	800a28c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fa10 	bl	800a660 <USBD_CtlError>
        err++;
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	3301      	adds	r3, #1
 800a244:	72fb      	strb	r3, [r7, #11]
      break;
 800a246:	e021      	b.n	800a28c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7c1b      	ldrb	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10d      	bne.n	800a26c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a258:	f107 0208 	add.w	r2, r7, #8
 800a25c:	4610      	mov	r0, r2
 800a25e:	4798      	blx	r3
 800a260:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3301      	adds	r3, #1
 800a266:	2207      	movs	r2, #7
 800a268:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a26a:	e00f      	b.n	800a28c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f9f6 	bl	800a660 <USBD_CtlError>
        err++;
 800a274:	7afb      	ldrb	r3, [r7, #11]
 800a276:	3301      	adds	r3, #1
 800a278:	72fb      	strb	r3, [r7, #11]
      break;
 800a27a:	e007      	b.n	800a28c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f9ee 	bl	800a660 <USBD_CtlError>
      err++;
 800a284:	7afb      	ldrb	r3, [r7, #11]
 800a286:	3301      	adds	r3, #1
 800a288:	72fb      	strb	r3, [r7, #11]
      break;
 800a28a:	bf00      	nop
  }

  if (err != 0U)
 800a28c:	7afb      	ldrb	r3, [r7, #11]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d11e      	bne.n	800a2d0 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	88db      	ldrh	r3, [r3, #6]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d016      	beq.n	800a2c8 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800a29a:	893b      	ldrh	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00e      	beq.n	800a2be <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	88da      	ldrh	r2, [r3, #6]
 800a2a4:	893b      	ldrh	r3, [r7, #8]
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	bf28      	it	cs
 800a2aa:	4613      	movcs	r3, r2
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2b0:	893b      	ldrh	r3, [r7, #8]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	68f9      	ldr	r1, [r7, #12]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fa42 	bl	800a740 <USBD_CtlSendData>
 800a2bc:	e009      	b.n	800a2d2 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f9cd 	bl	800a660 <USBD_CtlError>
 800a2c6:	e004      	b.n	800a2d2 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa93 	bl	800a7f4 <USBD_CtlSendStatus>
 800a2ce:	e000      	b.n	800a2d2 <USBD_GetDescriptor+0x2f2>
    return;
 800a2d0:	bf00      	nop
  }
}
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	889b      	ldrh	r3, [r3, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d131      	bne.n	800a34e <USBD_SetAddress+0x76>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	88db      	ldrh	r3, [r3, #6]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d12d      	bne.n	800a34e <USBD_SetAddress+0x76>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	885b      	ldrh	r3, [r3, #2]
 800a2f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a2f8:	d829      	bhi.n	800a34e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	885b      	ldrh	r3, [r3, #2]
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d104      	bne.n	800a31c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f9a3 	bl	800a660 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a31a:	e01d      	b.n	800a358 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	7bfa      	ldrb	r2, [r7, #15]
 800a320:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a324:	7bfb      	ldrb	r3, [r7, #15]
 800a326:	4619      	mov	r1, r3
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fc63 	bl	800abf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fa60 	bl	800a7f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d004      	beq.n	800a344 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2202      	movs	r2, #2
 800a33e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a342:	e009      	b.n	800a358 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34c:	e004      	b.n	800a358 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f985 	bl	800a660 <USBD_CtlError>
  }
}
 800a356:	bf00      	nop
 800a358:	bf00      	nop
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	885b      	ldrh	r3, [r3, #2]
 800a372:	b2da      	uxtb	r2, r3
 800a374:	4b4c      	ldr	r3, [pc, #304]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a376:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a378:	4b4b      	ldr	r3, [pc, #300]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d905      	bls.n	800a38c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f96c 	bl	800a660 <USBD_CtlError>
    return USBD_FAIL;
 800a388:	2303      	movs	r3, #3
 800a38a:	e088      	b.n	800a49e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b02      	cmp	r3, #2
 800a396:	d002      	beq.n	800a39e <USBD_SetConfig+0x3e>
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d025      	beq.n	800a3e8 <USBD_SetConfig+0x88>
 800a39c:	e071      	b.n	800a482 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a39e:	4b42      	ldr	r3, [pc, #264]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d01c      	beq.n	800a3e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a3a6:	4b40      	ldr	r3, [pc, #256]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3b0:	4b3d      	ldr	r3, [pc, #244]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff f9b2 	bl	8009720 <USBD_SetClassConfig>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d004      	beq.n	800a3d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f949 	bl	800a660 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3ce:	e065      	b.n	800a49c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fa0f 	bl	800a7f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2203      	movs	r2, #3
 800a3da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3de:	e05d      	b.n	800a49c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fa07 	bl	800a7f4 <USBD_CtlSendStatus>
      break;
 800a3e6:	e059      	b.n	800a49c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a3e8:	4b2f      	ldr	r3, [pc, #188]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d112      	bne.n	800a416 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a3f8:	4b2b      	ldr	r3, [pc, #172]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a402:	4b29      	ldr	r3, [pc, #164]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7ff f9a5 	bl	8009758 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f9f0 	bl	800a7f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a414:	e042      	b.n	800a49c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a416:	4b24      	ldr	r3, [pc, #144]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	429a      	cmp	r2, r3
 800a422:	d02a      	beq.n	800a47a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff f993 	bl	8009758 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a432:	4b1d      	ldr	r3, [pc, #116]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a43c:	4b1a      	ldr	r3, [pc, #104]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff f96c 	bl	8009720 <USBD_SetClassConfig>
 800a448:	4603      	mov	r3, r0
 800a44a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00f      	beq.n	800a472 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f903 	bl	800a660 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff f978 	bl	8009758 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2202      	movs	r2, #2
 800a46c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a470:	e014      	b.n	800a49c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f9be 	bl	800a7f4 <USBD_CtlSendStatus>
      break;
 800a478:	e010      	b.n	800a49c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f9ba 	bl	800a7f4 <USBD_CtlSendStatus>
      break;
 800a480:	e00c      	b.n	800a49c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f8eb 	bl	800a660 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a48a:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <USBD_SetConfig+0x148>)
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff f961 	bl	8009758 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a496:	2303      	movs	r3, #3
 800a498:	73fb      	strb	r3, [r7, #15]
      break;
 800a49a:	bf00      	nop
  }

  return ret;
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200013b8 	.word	0x200013b8

0800a4ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	88db      	ldrh	r3, [r3, #6]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d004      	beq.n	800a4c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f8cd 	bl	800a660 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4c6:	e023      	b.n	800a510 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	dc02      	bgt.n	800a4da <USBD_GetConfig+0x2e>
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	dc03      	bgt.n	800a4e0 <USBD_GetConfig+0x34>
 800a4d8:	e015      	b.n	800a506 <USBD_GetConfig+0x5a>
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d00b      	beq.n	800a4f6 <USBD_GetConfig+0x4a>
 800a4de:	e012      	b.n	800a506 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f926 	bl	800a740 <USBD_CtlSendData>
        break;
 800a4f4:	e00c      	b.n	800a510 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f91e 	bl	800a740 <USBD_CtlSendData>
        break;
 800a504:	e004      	b.n	800a510 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f8a9 	bl	800a660 <USBD_CtlError>
        break;
 800a50e:	bf00      	nop
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	3b01      	subs	r3, #1
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d81e      	bhi.n	800a56e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	88db      	ldrh	r3, [r3, #6]
 800a534:	2b02      	cmp	r3, #2
 800a536:	d004      	beq.n	800a542 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f890 	bl	800a660 <USBD_CtlError>
        break;
 800a540:	e01a      	b.n	800a578 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d005      	beq.n	800a55e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f043 0202 	orr.w	r2, r3, #2
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	330c      	adds	r3, #12
 800a562:	2202      	movs	r2, #2
 800a564:	4619      	mov	r1, r3
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f8ea 	bl	800a740 <USBD_CtlSendData>
      break;
 800a56c:	e004      	b.n	800a578 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f875 	bl	800a660 <USBD_CtlError>
      break;
 800a576:	bf00      	nop
  }
}
 800a578:	bf00      	nop
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	885b      	ldrh	r3, [r3, #2]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d106      	bne.n	800a5a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2201      	movs	r2, #1
 800a596:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f92a 	bl	800a7f4 <USBD_CtlSendStatus>
  }
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d80b      	bhi.n	800a5d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	885b      	ldrh	r3, [r3, #2]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d10c      	bne.n	800a5e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f90f 	bl	800a7f4 <USBD_CtlSendStatus>
      }
      break;
 800a5d6:	e004      	b.n	800a5e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f840 	bl	800a660 <USBD_CtlError>
      break;
 800a5e0:	e000      	b.n	800a5e4 <USBD_ClrFeature+0x3c>
      break;
 800a5e2:	bf00      	nop
  }
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	781a      	ldrb	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	3301      	adds	r3, #1
 800a606:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff faaa 	bl	8009b70 <SWAPBYTE>
 800a61c:	4603      	mov	r3, r0
 800a61e:	461a      	mov	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3301      	adds	r3, #1
 800a62e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff fa9d 	bl	8009b70 <SWAPBYTE>
 800a636:	4603      	mov	r3, r0
 800a638:	461a      	mov	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3301      	adds	r3, #1
 800a642:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3301      	adds	r3, #1
 800a648:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f7ff fa90 	bl	8009b70 <SWAPBYTE>
 800a650:	4603      	mov	r3, r0
 800a652:	461a      	mov	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	80da      	strh	r2, [r3, #6]
}
 800a658:	bf00      	nop
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a66a:	2180      	movs	r1, #128	; 0x80
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fa57 	bl	800ab20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a672:	2100      	movs	r1, #0
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fa53 	bl	800ab20 <USBD_LL_StallEP>
}
 800a67a:	bf00      	nop
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b086      	sub	sp, #24
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d036      	beq.n	800a706 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a69c:	6938      	ldr	r0, [r7, #16]
 800a69e:	f000 f836 	bl	800a70e <USBD_GetLen>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	7812      	ldrb	r2, [r2, #0]
 800a6ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6bc:	7dfb      	ldrb	r3, [r7, #23]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6c2:	7dfb      	ldrb	r3, [r7, #23]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	2203      	movs	r2, #3
 800a6ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6cc:	7dfb      	ldrb	r3, [r7, #23]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6d2:	e013      	b.n	800a6fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	4413      	add	r3, r2
 800a6da:	693a      	ldr	r2, [r7, #16]
 800a6dc:	7812      	ldrb	r2, [r2, #0]
 800a6de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	613b      	str	r3, [r7, #16]
    idx++;
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e7      	bne.n	800a6d4 <USBD_GetString+0x52>
 800a704:	e000      	b.n	800a708 <USBD_GetString+0x86>
    return;
 800a706:	bf00      	nop
  }
}
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a71e:	e005      	b.n	800a72c <USBD_GetLen+0x1e>
  {
    len++;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	3301      	adds	r3, #1
 800a724:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	3301      	adds	r3, #1
 800a72a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1f5      	bne.n	800a720 <USBD_GetLen+0x12>
  }

  return len;
 800a734:	7bfb      	ldrb	r3, [r7, #15]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bc80      	pop	{r7}
 800a73e:	4770      	bx	lr

0800a740 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2202      	movs	r2, #2
 800a750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	2100      	movs	r1, #0
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f000 fa63 	bl	800ac32 <USBD_LL_Transmit>

  return USBD_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	2100      	movs	r1, #0
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 fa52 	bl	800ac32 <USBD_LL_Transmit>

  return USBD_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f000 fa56 	bl	800ac74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	60b9      	str	r1, [r7, #8]
 800a7dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 fa45 	bl	800ac74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2204      	movs	r2, #4
 800a800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a804:	2300      	movs	r3, #0
 800a806:	2200      	movs	r2, #0
 800a808:	2100      	movs	r1, #0
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fa11 	bl	800ac32 <USBD_LL_Transmit>

  return USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b082      	sub	sp, #8
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2205      	movs	r2, #5
 800a826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a82a:	2300      	movs	r3, #0
 800a82c:	2200      	movs	r2, #0
 800a82e:	2100      	movs	r1, #0
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fa1f 	bl	800ac74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a854:	4619      	mov	r1, r3
 800a856:	4610      	mov	r0, r2
 800a858:	f7fe ff96 	bl	8009788 <USBD_LL_SetupStage>
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a876:	78fa      	ldrb	r2, [r7, #3]
 800a878:	6879      	ldr	r1, [r7, #4]
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	00db      	lsls	r3, r3, #3
 800a882:	440b      	add	r3, r1
 800a884:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	78fb      	ldrb	r3, [r7, #3]
 800a88c:	4619      	mov	r1, r3
 800a88e:	f7fe ffd0 	bl	8009832 <USBD_LL_DataOutStage>
}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a8ac:	78fa      	ldrb	r2, [r7, #3]
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	440b      	add	r3, r1
 800a8ba:	333c      	adds	r3, #60	; 0x3c
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	78fb      	ldrb	r3, [r7, #3]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	f7ff f819 	bl	80098f8 <USBD_LL_DataInStage>
}
 800a8c6:	bf00      	nop
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b082      	sub	sp, #8
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff f925 	bl	8009b2c <USBD_LL_SOF>
}
 800a8e2:	bf00      	nop
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d102      	bne.n	800a904 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800a8fe:	2301      	movs	r3, #1
 800a900:	73fb      	strb	r3, [r7, #15]
 800a902:	e001      	b.n	800a908 <HAL_PCD_ResetCallback+0x1e>
    speed = USBD_SPEED_HIGH;
  }
  #endif
  else
  {
    Error_Handler();
 800a904:	f7f6 fb2a 	bl	8000f5c <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a90e:	7bfa      	ldrb	r2, [r7, #15]
 800a910:	4611      	mov	r1, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff f8cf 	bl	8009ab6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff f880 	bl	8009a24 <USBD_LL_Reset>
}
 800a924:	bf00      	nop
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff f8ca 	bl	8009ad4 <USBD_LL_Suspend>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
  }
#endif
  /* USER CODE END 2 */
}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a956:	4618      	mov	r0, r3
 800a958:	f7ff f8d1 	bl	8009afe <USBD_LL_Resume>
}
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
#endif
  }
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800a96c:	4b36      	ldr	r3, [pc, #216]	; (800aa48 <USBD_LL_Init+0xe4>)
 800a96e:	4a37      	ldr	r2, [pc, #220]	; (800aa4c <USBD_LL_Init+0xe8>)
 800a970:	601a      	str	r2, [r3, #0]
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#endif

  if (pdev->id == DEVICE_FS)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d161      	bne.n	800aa3e <USBD_LL_Init+0xda>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800a97a:	4b33      	ldr	r3, [pc, #204]	; (800aa48 <USBD_LL_Init+0xe4>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    pdev->pData = hpcd_USB_OTG_PTR;
 800a984:	4b30      	ldr	r3, [pc, #192]	; (800aa48 <USBD_LL_Init+0xe4>)
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310

    /* @see HAL_PCD_Init() usb_otg.c generated by cube **/

#if (STM32F1_DEVICE)
    /** Device is F1 or similar or if HAL_PCDEx_PMAConfig() is used by HAL driver */
    uint16_t pma_track = 0x40; /** PMA offset*/
 800a98e:	2340      	movs	r3, #64	; 0x40
 800a990:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a998:	89fb      	ldrh	r3, [r7, #14]
 800a99a:	2200      	movs	r2, #0
 800a99c:	2100      	movs	r1, #0
 800a99e:	f7f9 fb18 	bl	8003fd2 <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 800a9a2:	89fb      	ldrh	r3, [r7, #14]
 800a9a4:	3340      	adds	r3, #64	; 0x40
 800a9a6:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x80, PCD_SNG_BUF, pma_track);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a9ae:	89fb      	ldrh	r3, [r7, #14]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2180      	movs	r1, #128	; 0x80
 800a9b4:	f7f9 fb0d 	bl	8003fd2 <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 800a9b8:	89fb      	ldrh	r3, [r7, #14]
 800a9ba:	3340      	adds	r3, #64	; 0x40
 800a9bc:	81fb      	strh	r3, [r7, #14]
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_MOUSE_IN_EP, PCD_SNG_BUF, pma_track);
    pma_track += 8;
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_KEYBOARD_IN_EP, PCD_SNG_BUF, pma_track);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a9c4:	4b22      	ldr	r3, [pc, #136]	; (800aa50 <USBD_LL_Init+0xec>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	b299      	uxth	r1, r3
 800a9ca:	89fb      	ldrh	r3, [r7, #14]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f7f9 fb00 	bl	8003fd2 <HAL_PCDEx_PMAConfig>
    pma_track += 8;
 800a9d2:	89fb      	ldrh	r3, [r7, #14]
 800a9d4:	3308      	adds	r3, #8
 800a9d6:	81fb      	strh	r3, [r7, #14]
    pma_track += 128;
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, PRNT_OUT_EP, PCD_SNG_BUF, pma_track);
    pma_track += 128;
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	737b      	strb	r3, [r7, #13]
 800a9dc:	e02c      	b.n	800aa38 <USBD_LL_Init+0xd4>
    {
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_IN_EP[i], PCD_SNG_BUF, pma_track);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a9e4:	7b7b      	ldrb	r3, [r7, #13]
 800a9e6:	4a1b      	ldr	r2, [pc, #108]	; (800aa54 <USBD_LL_Init+0xf0>)
 800a9e8:	5cd3      	ldrb	r3, [r2, r3]
 800a9ea:	b299      	uxth	r1, r3
 800a9ec:	89fb      	ldrh	r3, [r7, #14]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f7f9 faef 	bl	8003fd2 <HAL_PCDEx_PMAConfig>
      pma_track += 48;
 800a9f4:	89fb      	ldrh	r3, [r7, #14]
 800a9f6:	3330      	adds	r3, #48	; 0x30
 800a9f8:	81fb      	strh	r3, [r7, #14]

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_OUT_EP[i], PCD_SNG_BUF, pma_track);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800aa00:	7b7b      	ldrb	r3, [r7, #13]
 800aa02:	4a15      	ldr	r2, [pc, #84]	; (800aa58 <USBD_LL_Init+0xf4>)
 800aa04:	5cd3      	ldrb	r3, [r2, r3]
 800aa06:	b299      	uxth	r1, r3
 800aa08:	89fb      	ldrh	r3, [r7, #14]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f7f9 fae1 	bl	8003fd2 <HAL_PCDEx_PMAConfig>
      pma_track += 48;
 800aa10:	89fb      	ldrh	r3, [r7, #14]
 800aa12:	3330      	adds	r3, #48	; 0x30
 800aa14:	81fb      	strh	r3, [r7, #14]

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_CMD_EP[i], PCD_SNG_BUF, pma_track);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800aa1c:	7b7b      	ldrb	r3, [r7, #13]
 800aa1e:	4a0f      	ldr	r2, [pc, #60]	; (800aa5c <USBD_LL_Init+0xf8>)
 800aa20:	5cd3      	ldrb	r3, [r2, r3]
 800aa22:	b299      	uxth	r1, r3
 800aa24:	89fb      	ldrh	r3, [r7, #14]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f7f9 fad3 	bl	8003fd2 <HAL_PCDEx_PMAConfig>
      pma_track += 8;
 800aa2c:	89fb      	ldrh	r3, [r7, #14]
 800aa2e:	3308      	adds	r3, #8
 800aa30:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800aa32:	7b7b      	ldrb	r3, [r7, #13]
 800aa34:	3301      	adds	r3, #1
 800aa36:	737b      	strb	r3, [r7, #13]
 800aa38:	7b7b      	ldrb	r3, [r7, #13]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0cf      	beq.n	800a9de <USBD_LL_Init+0x7a>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	200013bc 	.word	0x200013bc
 800aa4c:	200007d4 	.word	0x200007d4
 800aa50:	2000023e 	.word	0x2000023e
 800aa54:	20001068 	.word	0x20001068
 800aa58:	2000106c 	.word	0x2000106c
 800aa5c:	20001070 	.word	0x20001070

0800aa60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7f7 ff35 	bl	80028e6 <HAL_PCD_Start>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 f92a 	bl	800acdc <USBD_Get_USB_Status>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	4608      	mov	r0, r1
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	70fb      	strb	r3, [r7, #3]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70bb      	strb	r3, [r7, #2]
 800aaac:	4613      	mov	r3, r2
 800aaae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800aabe:	78bb      	ldrb	r3, [r7, #2]
 800aac0:	883a      	ldrh	r2, [r7, #0]
 800aac2:	78f9      	ldrb	r1, [r7, #3]
 800aac4:	f7f8 f8ad 	bl	8002c22 <HAL_PCD_EP_Open>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f904 	bl	800acdc <USBD_Get_USB_Status>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	460b      	mov	r3, r1
 800aaec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800aafc:	78fa      	ldrb	r2, [r7, #3]
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7f8 f8f4 	bl	8002cee <HAL_PCD_EP_Close>
 800ab06:	4603      	mov	r3, r0
 800ab08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 f8e5 	bl	800acdc <USBD_Get_USB_Status>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800ab3a:	78fa      	ldrb	r2, [r7, #3]
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7f8 f9b4 	bl	8002eac <HAL_PCD_EP_SetStall>
 800ab44:	4603      	mov	r3, r0
 800ab46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 f8c6 	bl	800acdc <USBD_Get_USB_Status>
 800ab50:	4603      	mov	r3, r0
 800ab52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	460b      	mov	r3, r1
 800ab68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800ab78:	78fa      	ldrb	r2, [r7, #3]
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7f8 f9f5 	bl	8002f6c <HAL_PCD_EP_ClrStall>
 800ab82:	4603      	mov	r3, r0
 800ab84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 f8a7 	bl	800acdc <USBD_Get_USB_Status>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800abae:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800abb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	da0c      	bge.n	800abd2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800abb8:	78fb      	ldrb	r3, [r7, #3]
 800abba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abbe:	68f9      	ldr	r1, [r7, #12]
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	00db      	lsls	r3, r3, #3
 800abca:	440b      	add	r3, r1
 800abcc:	3302      	adds	r3, #2
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	e00b      	b.n	800abea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abd8:	68f9      	ldr	r1, [r7, #12]
 800abda:	4613      	mov	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	00db      	lsls	r3, r3, #3
 800abe2:	440b      	add	r3, r1
 800abe4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800abe8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	bc80      	pop	{r7}
 800abf2:	4770      	bx	lr

0800abf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800ac0e:	78fa      	ldrb	r2, [r7, #3]
 800ac10:	4611      	mov	r1, r2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7f7 ffe0 	bl	8002bd8 <HAL_PCD_SetAddress>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 f85c 	bl	800acdc <USBD_Get_USB_Status>
 800ac24:	4603      	mov	r3, r0
 800ac26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b086      	sub	sp, #24
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800ac50:	7af9      	ldrb	r1, [r7, #11]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	f7f8 f8e6 	bl	8002e26 <HAL_PCD_EP_Transmit>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 f83b 	bl	800acdc <USBD_Get_USB_Status>
 800ac66:	4603      	mov	r3, r0
 800ac68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac6a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3718      	adds	r7, #24
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	607a      	str	r2, [r7, #4]
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	460b      	mov	r3, r1
 800ac82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800ac92:	7af9      	ldrb	r1, [r7, #11]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	f7f8 f871 	bl	8002d7e <HAL_PCD_EP_Receive>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 f81a 	bl	800acdc <USBD_Get_USB_Status>
 800aca8:	4603      	mov	r3, r0
 800acaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acac:	7dbb      	ldrb	r3, [r7, #22]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	460b      	mov	r3, r1
 800acc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800acc8:	78fa      	ldrb	r2, [r7, #3]
 800acca:	4611      	mov	r1, r2
 800accc:	4618      	mov	r0, r3
 800acce:	f7f8 f893 	bl	8002df8 <HAL_PCD_EP_GetRxCount>
 800acd2:	4603      	mov	r3, r0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	2b03      	cmp	r3, #3
 800acee:	d817      	bhi.n	800ad20 <USBD_Get_USB_Status+0x44>
 800acf0:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <USBD_Get_USB_Status+0x1c>)
 800acf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf6:	bf00      	nop
 800acf8:	0800ad09 	.word	0x0800ad09
 800acfc:	0800ad0f 	.word	0x0800ad0f
 800ad00:	0800ad15 	.word	0x0800ad15
 800ad04:	0800ad1b 	.word	0x0800ad1b
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad0c:	e00b      	b.n	800ad26 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	73fb      	strb	r3, [r7, #15]
    break;
 800ad12:	e008      	b.n	800ad26 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800ad14:	2301      	movs	r3, #1
 800ad16:	73fb      	strb	r3, [r7, #15]
    break;
 800ad18:	e005      	b.n	800ad26 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad1e:	e002      	b.n	800ad26 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800ad20:	2303      	movs	r3, #3
 800ad22:	73fb      	strb	r3, [r7, #15]
    break;
 800ad24:	bf00      	nop
  }
  return usb_status;
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop

0800ad34 <__errno>:
 800ad34:	4b01      	ldr	r3, [pc, #4]	; (800ad3c <__errno+0x8>)
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20000398 	.word	0x20000398

0800ad40 <__libc_init_array>:
 800ad40:	b570      	push	{r4, r5, r6, lr}
 800ad42:	2600      	movs	r6, #0
 800ad44:	4d0c      	ldr	r5, [pc, #48]	; (800ad78 <__libc_init_array+0x38>)
 800ad46:	4c0d      	ldr	r4, [pc, #52]	; (800ad7c <__libc_init_array+0x3c>)
 800ad48:	1b64      	subs	r4, r4, r5
 800ad4a:	10a4      	asrs	r4, r4, #2
 800ad4c:	42a6      	cmp	r6, r4
 800ad4e:	d109      	bne.n	800ad64 <__libc_init_array+0x24>
 800ad50:	f001 f998 	bl	800c084 <_init>
 800ad54:	2600      	movs	r6, #0
 800ad56:	4d0a      	ldr	r5, [pc, #40]	; (800ad80 <__libc_init_array+0x40>)
 800ad58:	4c0a      	ldr	r4, [pc, #40]	; (800ad84 <__libc_init_array+0x44>)
 800ad5a:	1b64      	subs	r4, r4, r5
 800ad5c:	10a4      	asrs	r4, r4, #2
 800ad5e:	42a6      	cmp	r6, r4
 800ad60:	d105      	bne.n	800ad6e <__libc_init_array+0x2e>
 800ad62:	bd70      	pop	{r4, r5, r6, pc}
 800ad64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad68:	4798      	blx	r3
 800ad6a:	3601      	adds	r6, #1
 800ad6c:	e7ee      	b.n	800ad4c <__libc_init_array+0xc>
 800ad6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad72:	4798      	blx	r3
 800ad74:	3601      	adds	r6, #1
 800ad76:	e7f2      	b.n	800ad5e <__libc_init_array+0x1e>
 800ad78:	0800c308 	.word	0x0800c308
 800ad7c:	0800c308 	.word	0x0800c308
 800ad80:	0800c308 	.word	0x0800c308
 800ad84:	0800c30c 	.word	0x0800c30c

0800ad88 <memcpy>:
 800ad88:	440a      	add	r2, r1
 800ad8a:	4291      	cmp	r1, r2
 800ad8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ad90:	d100      	bne.n	800ad94 <memcpy+0xc>
 800ad92:	4770      	bx	lr
 800ad94:	b510      	push	{r4, lr}
 800ad96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad9a:	4291      	cmp	r1, r2
 800ad9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ada0:	d1f9      	bne.n	800ad96 <memcpy+0xe>
 800ada2:	bd10      	pop	{r4, pc}

0800ada4 <memset>:
 800ada4:	4603      	mov	r3, r0
 800ada6:	4402      	add	r2, r0
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d100      	bne.n	800adae <memset+0xa>
 800adac:	4770      	bx	lr
 800adae:	f803 1b01 	strb.w	r1, [r3], #1
 800adb2:	e7f9      	b.n	800ada8 <memset+0x4>

0800adb4 <sniprintf>:
 800adb4:	b40c      	push	{r2, r3}
 800adb6:	b530      	push	{r4, r5, lr}
 800adb8:	4b17      	ldr	r3, [pc, #92]	; (800ae18 <sniprintf+0x64>)
 800adba:	1e0c      	subs	r4, r1, #0
 800adbc:	681d      	ldr	r5, [r3, #0]
 800adbe:	b09d      	sub	sp, #116	; 0x74
 800adc0:	da08      	bge.n	800add4 <sniprintf+0x20>
 800adc2:	238b      	movs	r3, #139	; 0x8b
 800adc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	b01d      	add	sp, #116	; 0x74
 800adcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800add0:	b002      	add	sp, #8
 800add2:	4770      	bx	lr
 800add4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800add8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800addc:	bf0c      	ite	eq
 800adde:	4623      	moveq	r3, r4
 800ade0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ade4:	9304      	str	r3, [sp, #16]
 800ade6:	9307      	str	r3, [sp, #28]
 800ade8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adec:	9002      	str	r0, [sp, #8]
 800adee:	9006      	str	r0, [sp, #24]
 800adf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800adf4:	4628      	mov	r0, r5
 800adf6:	ab21      	add	r3, sp, #132	; 0x84
 800adf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800adfa:	a902      	add	r1, sp, #8
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	f000 f8c9 	bl	800af94 <_svfiprintf_r>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	bfbc      	itt	lt
 800ae06:	238b      	movlt	r3, #139	; 0x8b
 800ae08:	602b      	strlt	r3, [r5, #0]
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	d0dd      	beq.n	800adca <sniprintf+0x16>
 800ae0e:	2200      	movs	r2, #0
 800ae10:	9b02      	ldr	r3, [sp, #8]
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	e7d9      	b.n	800adca <sniprintf+0x16>
 800ae16:	bf00      	nop
 800ae18:	20000398 	.word	0x20000398

0800ae1c <siprintf>:
 800ae1c:	b40e      	push	{r1, r2, r3}
 800ae1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae22:	b500      	push	{lr}
 800ae24:	b09c      	sub	sp, #112	; 0x70
 800ae26:	ab1d      	add	r3, sp, #116	; 0x74
 800ae28:	9002      	str	r0, [sp, #8]
 800ae2a:	9006      	str	r0, [sp, #24]
 800ae2c:	9107      	str	r1, [sp, #28]
 800ae2e:	9104      	str	r1, [sp, #16]
 800ae30:	4808      	ldr	r0, [pc, #32]	; (800ae54 <siprintf+0x38>)
 800ae32:	4909      	ldr	r1, [pc, #36]	; (800ae58 <siprintf+0x3c>)
 800ae34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae38:	9105      	str	r1, [sp, #20]
 800ae3a:	6800      	ldr	r0, [r0, #0]
 800ae3c:	a902      	add	r1, sp, #8
 800ae3e:	9301      	str	r3, [sp, #4]
 800ae40:	f000 f8a8 	bl	800af94 <_svfiprintf_r>
 800ae44:	2200      	movs	r2, #0
 800ae46:	9b02      	ldr	r3, [sp, #8]
 800ae48:	701a      	strb	r2, [r3, #0]
 800ae4a:	b01c      	add	sp, #112	; 0x70
 800ae4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae50:	b003      	add	sp, #12
 800ae52:	4770      	bx	lr
 800ae54:	20000398 	.word	0x20000398
 800ae58:	ffff0208 	.word	0xffff0208

0800ae5c <siscanf>:
 800ae5c:	b40e      	push	{r1, r2, r3}
 800ae5e:	f44f 7201 	mov.w	r2, #516	; 0x204
 800ae62:	b530      	push	{r4, r5, lr}
 800ae64:	b09c      	sub	sp, #112	; 0x70
 800ae66:	ac1f      	add	r4, sp, #124	; 0x7c
 800ae68:	f854 5b04 	ldr.w	r5, [r4], #4
 800ae6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ae70:	9002      	str	r0, [sp, #8]
 800ae72:	9006      	str	r0, [sp, #24]
 800ae74:	f7f5 f96a 	bl	800014c <strlen>
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <siscanf+0x4c>)
 800ae7a:	9003      	str	r0, [sp, #12]
 800ae7c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae7e:	2300      	movs	r3, #0
 800ae80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae82:	9314      	str	r3, [sp, #80]	; 0x50
 800ae84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae88:	9007      	str	r0, [sp, #28]
 800ae8a:	4808      	ldr	r0, [pc, #32]	; (800aeac <siscanf+0x50>)
 800ae8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae90:	462a      	mov	r2, r5
 800ae92:	4623      	mov	r3, r4
 800ae94:	a902      	add	r1, sp, #8
 800ae96:	6800      	ldr	r0, [r0, #0]
 800ae98:	9401      	str	r4, [sp, #4]
 800ae9a:	f000 f9d5 	bl	800b248 <__ssvfiscanf_r>
 800ae9e:	b01c      	add	sp, #112	; 0x70
 800aea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aea4:	b003      	add	sp, #12
 800aea6:	4770      	bx	lr
 800aea8:	0800aeb1 	.word	0x0800aeb1
 800aeac:	20000398 	.word	0x20000398

0800aeb0 <__seofread>:
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	4770      	bx	lr

0800aeb4 <strlcpy>:
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	b510      	push	{r4, lr}
 800aeb8:	b162      	cbz	r2, 800aed4 <strlcpy+0x20>
 800aeba:	3a01      	subs	r2, #1
 800aebc:	d008      	beq.n	800aed0 <strlcpy+0x1c>
 800aebe:	f813 4b01 	ldrb.w	r4, [r3], #1
 800aec2:	f800 4b01 	strb.w	r4, [r0], #1
 800aec6:	2c00      	cmp	r4, #0
 800aec8:	d1f7      	bne.n	800aeba <strlcpy+0x6>
 800aeca:	1a58      	subs	r0, r3, r1
 800aecc:	3801      	subs	r0, #1
 800aece:	bd10      	pop	{r4, pc}
 800aed0:	2200      	movs	r2, #0
 800aed2:	7002      	strb	r2, [r0, #0]
 800aed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d1fb      	bne.n	800aed4 <strlcpy+0x20>
 800aedc:	e7f5      	b.n	800aeca <strlcpy+0x16>

0800aede <__ssputs_r>:
 800aede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee2:	688e      	ldr	r6, [r1, #8]
 800aee4:	4682      	mov	sl, r0
 800aee6:	429e      	cmp	r6, r3
 800aee8:	460c      	mov	r4, r1
 800aeea:	4690      	mov	r8, r2
 800aeec:	461f      	mov	r7, r3
 800aeee:	d838      	bhi.n	800af62 <__ssputs_r+0x84>
 800aef0:	898a      	ldrh	r2, [r1, #12]
 800aef2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aef6:	d032      	beq.n	800af5e <__ssputs_r+0x80>
 800aef8:	6825      	ldr	r5, [r4, #0]
 800aefa:	6909      	ldr	r1, [r1, #16]
 800aefc:	3301      	adds	r3, #1
 800aefe:	eba5 0901 	sub.w	r9, r5, r1
 800af02:	6965      	ldr	r5, [r4, #20]
 800af04:	444b      	add	r3, r9
 800af06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af0e:	106d      	asrs	r5, r5, #1
 800af10:	429d      	cmp	r5, r3
 800af12:	bf38      	it	cc
 800af14:	461d      	movcc	r5, r3
 800af16:	0553      	lsls	r3, r2, #21
 800af18:	d531      	bpl.n	800af7e <__ssputs_r+0xa0>
 800af1a:	4629      	mov	r1, r5
 800af1c:	f000 ffea 	bl	800bef4 <_malloc_r>
 800af20:	4606      	mov	r6, r0
 800af22:	b950      	cbnz	r0, 800af3a <__ssputs_r+0x5c>
 800af24:	230c      	movs	r3, #12
 800af26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af2a:	f8ca 3000 	str.w	r3, [sl]
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af3a:	464a      	mov	r2, r9
 800af3c:	6921      	ldr	r1, [r4, #16]
 800af3e:	f7ff ff23 	bl	800ad88 <memcpy>
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af4c:	81a3      	strh	r3, [r4, #12]
 800af4e:	6126      	str	r6, [r4, #16]
 800af50:	444e      	add	r6, r9
 800af52:	6026      	str	r6, [r4, #0]
 800af54:	463e      	mov	r6, r7
 800af56:	6165      	str	r5, [r4, #20]
 800af58:	eba5 0509 	sub.w	r5, r5, r9
 800af5c:	60a5      	str	r5, [r4, #8]
 800af5e:	42be      	cmp	r6, r7
 800af60:	d900      	bls.n	800af64 <__ssputs_r+0x86>
 800af62:	463e      	mov	r6, r7
 800af64:	4632      	mov	r2, r6
 800af66:	4641      	mov	r1, r8
 800af68:	6820      	ldr	r0, [r4, #0]
 800af6a:	f000 ff41 	bl	800bdf0 <memmove>
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	2000      	movs	r0, #0
 800af72:	1b9b      	subs	r3, r3, r6
 800af74:	60a3      	str	r3, [r4, #8]
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	4433      	add	r3, r6
 800af7a:	6023      	str	r3, [r4, #0]
 800af7c:	e7db      	b.n	800af36 <__ssputs_r+0x58>
 800af7e:	462a      	mov	r2, r5
 800af80:	f001 f82c 	bl	800bfdc <_realloc_r>
 800af84:	4606      	mov	r6, r0
 800af86:	2800      	cmp	r0, #0
 800af88:	d1e1      	bne.n	800af4e <__ssputs_r+0x70>
 800af8a:	4650      	mov	r0, sl
 800af8c:	6921      	ldr	r1, [r4, #16]
 800af8e:	f000 ff49 	bl	800be24 <_free_r>
 800af92:	e7c7      	b.n	800af24 <__ssputs_r+0x46>

0800af94 <_svfiprintf_r>:
 800af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	4698      	mov	r8, r3
 800af9a:	898b      	ldrh	r3, [r1, #12]
 800af9c:	4607      	mov	r7, r0
 800af9e:	061b      	lsls	r3, r3, #24
 800afa0:	460d      	mov	r5, r1
 800afa2:	4614      	mov	r4, r2
 800afa4:	b09d      	sub	sp, #116	; 0x74
 800afa6:	d50e      	bpl.n	800afc6 <_svfiprintf_r+0x32>
 800afa8:	690b      	ldr	r3, [r1, #16]
 800afaa:	b963      	cbnz	r3, 800afc6 <_svfiprintf_r+0x32>
 800afac:	2140      	movs	r1, #64	; 0x40
 800afae:	f000 ffa1 	bl	800bef4 <_malloc_r>
 800afb2:	6028      	str	r0, [r5, #0]
 800afb4:	6128      	str	r0, [r5, #16]
 800afb6:	b920      	cbnz	r0, 800afc2 <_svfiprintf_r+0x2e>
 800afb8:	230c      	movs	r3, #12
 800afba:	603b      	str	r3, [r7, #0]
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afc0:	e0d1      	b.n	800b166 <_svfiprintf_r+0x1d2>
 800afc2:	2340      	movs	r3, #64	; 0x40
 800afc4:	616b      	str	r3, [r5, #20]
 800afc6:	2300      	movs	r3, #0
 800afc8:	9309      	str	r3, [sp, #36]	; 0x24
 800afca:	2320      	movs	r3, #32
 800afcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afd0:	2330      	movs	r3, #48	; 0x30
 800afd2:	f04f 0901 	mov.w	r9, #1
 800afd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800afda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b180 <_svfiprintf_r+0x1ec>
 800afde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afe2:	4623      	mov	r3, r4
 800afe4:	469a      	mov	sl, r3
 800afe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afea:	b10a      	cbz	r2, 800aff0 <_svfiprintf_r+0x5c>
 800afec:	2a25      	cmp	r2, #37	; 0x25
 800afee:	d1f9      	bne.n	800afe4 <_svfiprintf_r+0x50>
 800aff0:	ebba 0b04 	subs.w	fp, sl, r4
 800aff4:	d00b      	beq.n	800b00e <_svfiprintf_r+0x7a>
 800aff6:	465b      	mov	r3, fp
 800aff8:	4622      	mov	r2, r4
 800affa:	4629      	mov	r1, r5
 800affc:	4638      	mov	r0, r7
 800affe:	f7ff ff6e 	bl	800aede <__ssputs_r>
 800b002:	3001      	adds	r0, #1
 800b004:	f000 80aa 	beq.w	800b15c <_svfiprintf_r+0x1c8>
 800b008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b00a:	445a      	add	r2, fp
 800b00c:	9209      	str	r2, [sp, #36]	; 0x24
 800b00e:	f89a 3000 	ldrb.w	r3, [sl]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 80a2 	beq.w	800b15c <_svfiprintf_r+0x1c8>
 800b018:	2300      	movs	r3, #0
 800b01a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b01e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b022:	f10a 0a01 	add.w	sl, sl, #1
 800b026:	9304      	str	r3, [sp, #16]
 800b028:	9307      	str	r3, [sp, #28]
 800b02a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b02e:	931a      	str	r3, [sp, #104]	; 0x68
 800b030:	4654      	mov	r4, sl
 800b032:	2205      	movs	r2, #5
 800b034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b038:	4851      	ldr	r0, [pc, #324]	; (800b180 <_svfiprintf_r+0x1ec>)
 800b03a:	f000 fecb 	bl	800bdd4 <memchr>
 800b03e:	9a04      	ldr	r2, [sp, #16]
 800b040:	b9d8      	cbnz	r0, 800b07a <_svfiprintf_r+0xe6>
 800b042:	06d0      	lsls	r0, r2, #27
 800b044:	bf44      	itt	mi
 800b046:	2320      	movmi	r3, #32
 800b048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b04c:	0711      	lsls	r1, r2, #28
 800b04e:	bf44      	itt	mi
 800b050:	232b      	movmi	r3, #43	; 0x2b
 800b052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b056:	f89a 3000 	ldrb.w	r3, [sl]
 800b05a:	2b2a      	cmp	r3, #42	; 0x2a
 800b05c:	d015      	beq.n	800b08a <_svfiprintf_r+0xf6>
 800b05e:	4654      	mov	r4, sl
 800b060:	2000      	movs	r0, #0
 800b062:	f04f 0c0a 	mov.w	ip, #10
 800b066:	9a07      	ldr	r2, [sp, #28]
 800b068:	4621      	mov	r1, r4
 800b06a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b06e:	3b30      	subs	r3, #48	; 0x30
 800b070:	2b09      	cmp	r3, #9
 800b072:	d94e      	bls.n	800b112 <_svfiprintf_r+0x17e>
 800b074:	b1b0      	cbz	r0, 800b0a4 <_svfiprintf_r+0x110>
 800b076:	9207      	str	r2, [sp, #28]
 800b078:	e014      	b.n	800b0a4 <_svfiprintf_r+0x110>
 800b07a:	eba0 0308 	sub.w	r3, r0, r8
 800b07e:	fa09 f303 	lsl.w	r3, r9, r3
 800b082:	4313      	orrs	r3, r2
 800b084:	46a2      	mov	sl, r4
 800b086:	9304      	str	r3, [sp, #16]
 800b088:	e7d2      	b.n	800b030 <_svfiprintf_r+0x9c>
 800b08a:	9b03      	ldr	r3, [sp, #12]
 800b08c:	1d19      	adds	r1, r3, #4
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	9103      	str	r1, [sp, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	bfbb      	ittet	lt
 800b096:	425b      	neglt	r3, r3
 800b098:	f042 0202 	orrlt.w	r2, r2, #2
 800b09c:	9307      	strge	r3, [sp, #28]
 800b09e:	9307      	strlt	r3, [sp, #28]
 800b0a0:	bfb8      	it	lt
 800b0a2:	9204      	strlt	r2, [sp, #16]
 800b0a4:	7823      	ldrb	r3, [r4, #0]
 800b0a6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0a8:	d10c      	bne.n	800b0c4 <_svfiprintf_r+0x130>
 800b0aa:	7863      	ldrb	r3, [r4, #1]
 800b0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ae:	d135      	bne.n	800b11c <_svfiprintf_r+0x188>
 800b0b0:	9b03      	ldr	r3, [sp, #12]
 800b0b2:	3402      	adds	r4, #2
 800b0b4:	1d1a      	adds	r2, r3, #4
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	9203      	str	r2, [sp, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	bfb8      	it	lt
 800b0be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b0c2:	9305      	str	r3, [sp, #20]
 800b0c4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b184 <_svfiprintf_r+0x1f0>
 800b0c8:	2203      	movs	r2, #3
 800b0ca:	4650      	mov	r0, sl
 800b0cc:	7821      	ldrb	r1, [r4, #0]
 800b0ce:	f000 fe81 	bl	800bdd4 <memchr>
 800b0d2:	b140      	cbz	r0, 800b0e6 <_svfiprintf_r+0x152>
 800b0d4:	2340      	movs	r3, #64	; 0x40
 800b0d6:	eba0 000a 	sub.w	r0, r0, sl
 800b0da:	fa03 f000 	lsl.w	r0, r3, r0
 800b0de:	9b04      	ldr	r3, [sp, #16]
 800b0e0:	3401      	adds	r4, #1
 800b0e2:	4303      	orrs	r3, r0
 800b0e4:	9304      	str	r3, [sp, #16]
 800b0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ea:	2206      	movs	r2, #6
 800b0ec:	4826      	ldr	r0, [pc, #152]	; (800b188 <_svfiprintf_r+0x1f4>)
 800b0ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0f2:	f000 fe6f 	bl	800bdd4 <memchr>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d038      	beq.n	800b16c <_svfiprintf_r+0x1d8>
 800b0fa:	4b24      	ldr	r3, [pc, #144]	; (800b18c <_svfiprintf_r+0x1f8>)
 800b0fc:	bb1b      	cbnz	r3, 800b146 <_svfiprintf_r+0x1b2>
 800b0fe:	9b03      	ldr	r3, [sp, #12]
 800b100:	3307      	adds	r3, #7
 800b102:	f023 0307 	bic.w	r3, r3, #7
 800b106:	3308      	adds	r3, #8
 800b108:	9303      	str	r3, [sp, #12]
 800b10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10c:	4433      	add	r3, r6
 800b10e:	9309      	str	r3, [sp, #36]	; 0x24
 800b110:	e767      	b.n	800afe2 <_svfiprintf_r+0x4e>
 800b112:	460c      	mov	r4, r1
 800b114:	2001      	movs	r0, #1
 800b116:	fb0c 3202 	mla	r2, ip, r2, r3
 800b11a:	e7a5      	b.n	800b068 <_svfiprintf_r+0xd4>
 800b11c:	2300      	movs	r3, #0
 800b11e:	f04f 0c0a 	mov.w	ip, #10
 800b122:	4619      	mov	r1, r3
 800b124:	3401      	adds	r4, #1
 800b126:	9305      	str	r3, [sp, #20]
 800b128:	4620      	mov	r0, r4
 800b12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b12e:	3a30      	subs	r2, #48	; 0x30
 800b130:	2a09      	cmp	r2, #9
 800b132:	d903      	bls.n	800b13c <_svfiprintf_r+0x1a8>
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0c5      	beq.n	800b0c4 <_svfiprintf_r+0x130>
 800b138:	9105      	str	r1, [sp, #20]
 800b13a:	e7c3      	b.n	800b0c4 <_svfiprintf_r+0x130>
 800b13c:	4604      	mov	r4, r0
 800b13e:	2301      	movs	r3, #1
 800b140:	fb0c 2101 	mla	r1, ip, r1, r2
 800b144:	e7f0      	b.n	800b128 <_svfiprintf_r+0x194>
 800b146:	ab03      	add	r3, sp, #12
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	462a      	mov	r2, r5
 800b14c:	4638      	mov	r0, r7
 800b14e:	4b10      	ldr	r3, [pc, #64]	; (800b190 <_svfiprintf_r+0x1fc>)
 800b150:	a904      	add	r1, sp, #16
 800b152:	f3af 8000 	nop.w
 800b156:	1c42      	adds	r2, r0, #1
 800b158:	4606      	mov	r6, r0
 800b15a:	d1d6      	bne.n	800b10a <_svfiprintf_r+0x176>
 800b15c:	89ab      	ldrh	r3, [r5, #12]
 800b15e:	065b      	lsls	r3, r3, #25
 800b160:	f53f af2c 	bmi.w	800afbc <_svfiprintf_r+0x28>
 800b164:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b166:	b01d      	add	sp, #116	; 0x74
 800b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16c:	ab03      	add	r3, sp, #12
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	462a      	mov	r2, r5
 800b172:	4638      	mov	r0, r7
 800b174:	4b06      	ldr	r3, [pc, #24]	; (800b190 <_svfiprintf_r+0x1fc>)
 800b176:	a904      	add	r1, sp, #16
 800b178:	f000 fa50 	bl	800b61c <_printf_i>
 800b17c:	e7eb      	b.n	800b156 <_svfiprintf_r+0x1c2>
 800b17e:	bf00      	nop
 800b180:	0800c158 	.word	0x0800c158
 800b184:	0800c15e 	.word	0x0800c15e
 800b188:	0800c162 	.word	0x0800c162
 800b18c:	00000000 	.word	0x00000000
 800b190:	0800aedf 	.word	0x0800aedf

0800b194 <_sungetc_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	1c4b      	adds	r3, r1, #1
 800b198:	4614      	mov	r4, r2
 800b19a:	d103      	bne.n	800b1a4 <_sungetc_r+0x10>
 800b19c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	bd38      	pop	{r3, r4, r5, pc}
 800b1a4:	8993      	ldrh	r3, [r2, #12]
 800b1a6:	b2cd      	uxtb	r5, r1
 800b1a8:	f023 0320 	bic.w	r3, r3, #32
 800b1ac:	8193      	strh	r3, [r2, #12]
 800b1ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1b0:	6852      	ldr	r2, [r2, #4]
 800b1b2:	b18b      	cbz	r3, 800b1d8 <_sungetc_r+0x44>
 800b1b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	dd08      	ble.n	800b1cc <_sungetc_r+0x38>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	1e5a      	subs	r2, r3, #1
 800b1be:	6022      	str	r2, [r4, #0]
 800b1c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b1c4:	6863      	ldr	r3, [r4, #4]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	6063      	str	r3, [r4, #4]
 800b1ca:	e7e9      	b.n	800b1a0 <_sungetc_r+0xc>
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	f000 fdc7 	bl	800bd60 <__submore>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d0f1      	beq.n	800b1ba <_sungetc_r+0x26>
 800b1d6:	e7e1      	b.n	800b19c <_sungetc_r+0x8>
 800b1d8:	6921      	ldr	r1, [r4, #16]
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	b151      	cbz	r1, 800b1f4 <_sungetc_r+0x60>
 800b1de:	4299      	cmp	r1, r3
 800b1e0:	d208      	bcs.n	800b1f4 <_sungetc_r+0x60>
 800b1e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b1e6:	42a9      	cmp	r1, r5
 800b1e8:	d104      	bne.n	800b1f4 <_sungetc_r+0x60>
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	3201      	adds	r2, #1
 800b1ee:	6023      	str	r3, [r4, #0]
 800b1f0:	6062      	str	r2, [r4, #4]
 800b1f2:	e7d5      	b.n	800b1a0 <_sungetc_r+0xc>
 800b1f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b1f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1fc:	6363      	str	r3, [r4, #52]	; 0x34
 800b1fe:	2303      	movs	r3, #3
 800b200:	63a3      	str	r3, [r4, #56]	; 0x38
 800b202:	4623      	mov	r3, r4
 800b204:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	2301      	movs	r3, #1
 800b20c:	e7dc      	b.n	800b1c8 <_sungetc_r+0x34>

0800b20e <__ssrefill_r>:
 800b20e:	b510      	push	{r4, lr}
 800b210:	460c      	mov	r4, r1
 800b212:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b214:	b169      	cbz	r1, 800b232 <__ssrefill_r+0x24>
 800b216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b21a:	4299      	cmp	r1, r3
 800b21c:	d001      	beq.n	800b222 <__ssrefill_r+0x14>
 800b21e:	f000 fe01 	bl	800be24 <_free_r>
 800b222:	2000      	movs	r0, #0
 800b224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b226:	6360      	str	r0, [r4, #52]	; 0x34
 800b228:	6063      	str	r3, [r4, #4]
 800b22a:	b113      	cbz	r3, 800b232 <__ssrefill_r+0x24>
 800b22c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b22e:	6023      	str	r3, [r4, #0]
 800b230:	bd10      	pop	{r4, pc}
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	2300      	movs	r3, #0
 800b23c:	6063      	str	r3, [r4, #4]
 800b23e:	89a3      	ldrh	r3, [r4, #12]
 800b240:	f043 0320 	orr.w	r3, r3, #32
 800b244:	81a3      	strh	r3, [r4, #12]
 800b246:	e7f3      	b.n	800b230 <__ssrefill_r+0x22>

0800b248 <__ssvfiscanf_r>:
 800b248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	460c      	mov	r4, r1
 800b24e:	2100      	movs	r1, #0
 800b250:	4606      	mov	r6, r0
 800b252:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b256:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b25a:	49a7      	ldr	r1, [pc, #668]	; (800b4f8 <__ssvfiscanf_r+0x2b0>)
 800b25c:	f10d 0804 	add.w	r8, sp, #4
 800b260:	91a0      	str	r1, [sp, #640]	; 0x280
 800b262:	49a6      	ldr	r1, [pc, #664]	; (800b4fc <__ssvfiscanf_r+0x2b4>)
 800b264:	4fa6      	ldr	r7, [pc, #664]	; (800b500 <__ssvfiscanf_r+0x2b8>)
 800b266:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b504 <__ssvfiscanf_r+0x2bc>
 800b26a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b26e:	91a1      	str	r1, [sp, #644]	; 0x284
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	7813      	ldrb	r3, [r2, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 815c 	beq.w	800b532 <__ssvfiscanf_r+0x2ea>
 800b27a:	5dd9      	ldrb	r1, [r3, r7]
 800b27c:	1c55      	adds	r5, r2, #1
 800b27e:	f011 0108 	ands.w	r1, r1, #8
 800b282:	d019      	beq.n	800b2b8 <__ssvfiscanf_r+0x70>
 800b284:	6863      	ldr	r3, [r4, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	dd0f      	ble.n	800b2aa <__ssvfiscanf_r+0x62>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	5cba      	ldrb	r2, [r7, r2]
 800b290:	0712      	lsls	r2, r2, #28
 800b292:	d401      	bmi.n	800b298 <__ssvfiscanf_r+0x50>
 800b294:	462a      	mov	r2, r5
 800b296:	e7ec      	b.n	800b272 <__ssvfiscanf_r+0x2a>
 800b298:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b29a:	3301      	adds	r3, #1
 800b29c:	3201      	adds	r2, #1
 800b29e:	9245      	str	r2, [sp, #276]	; 0x114
 800b2a0:	6862      	ldr	r2, [r4, #4]
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	3a01      	subs	r2, #1
 800b2a6:	6062      	str	r2, [r4, #4]
 800b2a8:	e7ec      	b.n	800b284 <__ssvfiscanf_r+0x3c>
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2b0:	4798      	blx	r3
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d0e9      	beq.n	800b28a <__ssvfiscanf_r+0x42>
 800b2b6:	e7ed      	b.n	800b294 <__ssvfiscanf_r+0x4c>
 800b2b8:	2b25      	cmp	r3, #37	; 0x25
 800b2ba:	d012      	beq.n	800b2e2 <__ssvfiscanf_r+0x9a>
 800b2bc:	469a      	mov	sl, r3
 800b2be:	6863      	ldr	r3, [r4, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f340 8094 	ble.w	800b3ee <__ssvfiscanf_r+0x1a6>
 800b2c6:	6822      	ldr	r2, [r4, #0]
 800b2c8:	7813      	ldrb	r3, [r2, #0]
 800b2ca:	4553      	cmp	r3, sl
 800b2cc:	f040 8131 	bne.w	800b532 <__ssvfiscanf_r+0x2ea>
 800b2d0:	6863      	ldr	r3, [r4, #4]
 800b2d2:	3201      	adds	r2, #1
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	6063      	str	r3, [r4, #4]
 800b2d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b2da:	6022      	str	r2, [r4, #0]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	9345      	str	r3, [sp, #276]	; 0x114
 800b2e0:	e7d8      	b.n	800b294 <__ssvfiscanf_r+0x4c>
 800b2e2:	9141      	str	r1, [sp, #260]	; 0x104
 800b2e4:	9143      	str	r1, [sp, #268]	; 0x10c
 800b2e6:	7853      	ldrb	r3, [r2, #1]
 800b2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ea:	bf04      	itt	eq
 800b2ec:	2310      	moveq	r3, #16
 800b2ee:	1c95      	addeq	r5, r2, #2
 800b2f0:	f04f 020a 	mov.w	r2, #10
 800b2f4:	bf08      	it	eq
 800b2f6:	9341      	streq	r3, [sp, #260]	; 0x104
 800b2f8:	46aa      	mov	sl, r5
 800b2fa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b2fe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b302:	2b09      	cmp	r3, #9
 800b304:	d91d      	bls.n	800b342 <__ssvfiscanf_r+0xfa>
 800b306:	2203      	movs	r2, #3
 800b308:	487e      	ldr	r0, [pc, #504]	; (800b504 <__ssvfiscanf_r+0x2bc>)
 800b30a:	f000 fd63 	bl	800bdd4 <memchr>
 800b30e:	b140      	cbz	r0, 800b322 <__ssvfiscanf_r+0xda>
 800b310:	2301      	movs	r3, #1
 800b312:	4655      	mov	r5, sl
 800b314:	eba0 0009 	sub.w	r0, r0, r9
 800b318:	fa03 f000 	lsl.w	r0, r3, r0
 800b31c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b31e:	4318      	orrs	r0, r3
 800b320:	9041      	str	r0, [sp, #260]	; 0x104
 800b322:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b326:	2b78      	cmp	r3, #120	; 0x78
 800b328:	d806      	bhi.n	800b338 <__ssvfiscanf_r+0xf0>
 800b32a:	2b57      	cmp	r3, #87	; 0x57
 800b32c:	d810      	bhi.n	800b350 <__ssvfiscanf_r+0x108>
 800b32e:	2b25      	cmp	r3, #37	; 0x25
 800b330:	d0c4      	beq.n	800b2bc <__ssvfiscanf_r+0x74>
 800b332:	d857      	bhi.n	800b3e4 <__ssvfiscanf_r+0x19c>
 800b334:	2b00      	cmp	r3, #0
 800b336:	d065      	beq.n	800b404 <__ssvfiscanf_r+0x1bc>
 800b338:	2303      	movs	r3, #3
 800b33a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b33c:	230a      	movs	r3, #10
 800b33e:	9342      	str	r3, [sp, #264]	; 0x108
 800b340:	e072      	b.n	800b428 <__ssvfiscanf_r+0x1e0>
 800b342:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b344:	4655      	mov	r5, sl
 800b346:	fb02 1103 	mla	r1, r2, r3, r1
 800b34a:	3930      	subs	r1, #48	; 0x30
 800b34c:	9143      	str	r1, [sp, #268]	; 0x10c
 800b34e:	e7d3      	b.n	800b2f8 <__ssvfiscanf_r+0xb0>
 800b350:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b354:	2a20      	cmp	r2, #32
 800b356:	d8ef      	bhi.n	800b338 <__ssvfiscanf_r+0xf0>
 800b358:	a101      	add	r1, pc, #4	; (adr r1, 800b360 <__ssvfiscanf_r+0x118>)
 800b35a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b35e:	bf00      	nop
 800b360:	0800b413 	.word	0x0800b413
 800b364:	0800b339 	.word	0x0800b339
 800b368:	0800b339 	.word	0x0800b339
 800b36c:	0800b471 	.word	0x0800b471
 800b370:	0800b339 	.word	0x0800b339
 800b374:	0800b339 	.word	0x0800b339
 800b378:	0800b339 	.word	0x0800b339
 800b37c:	0800b339 	.word	0x0800b339
 800b380:	0800b339 	.word	0x0800b339
 800b384:	0800b339 	.word	0x0800b339
 800b388:	0800b339 	.word	0x0800b339
 800b38c:	0800b487 	.word	0x0800b487
 800b390:	0800b45d 	.word	0x0800b45d
 800b394:	0800b3eb 	.word	0x0800b3eb
 800b398:	0800b3eb 	.word	0x0800b3eb
 800b39c:	0800b3eb 	.word	0x0800b3eb
 800b3a0:	0800b339 	.word	0x0800b339
 800b3a4:	0800b461 	.word	0x0800b461
 800b3a8:	0800b339 	.word	0x0800b339
 800b3ac:	0800b339 	.word	0x0800b339
 800b3b0:	0800b339 	.word	0x0800b339
 800b3b4:	0800b339 	.word	0x0800b339
 800b3b8:	0800b497 	.word	0x0800b497
 800b3bc:	0800b469 	.word	0x0800b469
 800b3c0:	0800b40b 	.word	0x0800b40b
 800b3c4:	0800b339 	.word	0x0800b339
 800b3c8:	0800b339 	.word	0x0800b339
 800b3cc:	0800b493 	.word	0x0800b493
 800b3d0:	0800b339 	.word	0x0800b339
 800b3d4:	0800b45d 	.word	0x0800b45d
 800b3d8:	0800b339 	.word	0x0800b339
 800b3dc:	0800b339 	.word	0x0800b339
 800b3e0:	0800b413 	.word	0x0800b413
 800b3e4:	3b45      	subs	r3, #69	; 0x45
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d8a6      	bhi.n	800b338 <__ssvfiscanf_r+0xf0>
 800b3ea:	2305      	movs	r3, #5
 800b3ec:	e01b      	b.n	800b426 <__ssvfiscanf_r+0x1de>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b3f4:	4798      	blx	r3
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	f43f af65 	beq.w	800b2c6 <__ssvfiscanf_r+0x7e>
 800b3fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f040 808d 	bne.w	800b51e <__ssvfiscanf_r+0x2d6>
 800b404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b408:	e08f      	b.n	800b52a <__ssvfiscanf_r+0x2e2>
 800b40a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b40c:	f042 0220 	orr.w	r2, r2, #32
 800b410:	9241      	str	r2, [sp, #260]	; 0x104
 800b412:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b418:	9241      	str	r2, [sp, #260]	; 0x104
 800b41a:	2210      	movs	r2, #16
 800b41c:	2b6f      	cmp	r3, #111	; 0x6f
 800b41e:	bf34      	ite	cc
 800b420:	2303      	movcc	r3, #3
 800b422:	2304      	movcs	r3, #4
 800b424:	9242      	str	r2, [sp, #264]	; 0x108
 800b426:	9347      	str	r3, [sp, #284]	; 0x11c
 800b428:	6863      	ldr	r3, [r4, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	dd42      	ble.n	800b4b4 <__ssvfiscanf_r+0x26c>
 800b42e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b430:	0659      	lsls	r1, r3, #25
 800b432:	d404      	bmi.n	800b43e <__ssvfiscanf_r+0x1f6>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	781a      	ldrb	r2, [r3, #0]
 800b438:	5cba      	ldrb	r2, [r7, r2]
 800b43a:	0712      	lsls	r2, r2, #28
 800b43c:	d441      	bmi.n	800b4c2 <__ssvfiscanf_r+0x27a>
 800b43e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b440:	2b02      	cmp	r3, #2
 800b442:	dc50      	bgt.n	800b4e6 <__ssvfiscanf_r+0x29e>
 800b444:	466b      	mov	r3, sp
 800b446:	4622      	mov	r2, r4
 800b448:	4630      	mov	r0, r6
 800b44a:	a941      	add	r1, sp, #260	; 0x104
 800b44c:	f000 fa0c 	bl	800b868 <_scanf_chars>
 800b450:	2801      	cmp	r0, #1
 800b452:	d06e      	beq.n	800b532 <__ssvfiscanf_r+0x2ea>
 800b454:	2802      	cmp	r0, #2
 800b456:	f47f af1d 	bne.w	800b294 <__ssvfiscanf_r+0x4c>
 800b45a:	e7cf      	b.n	800b3fc <__ssvfiscanf_r+0x1b4>
 800b45c:	220a      	movs	r2, #10
 800b45e:	e7dd      	b.n	800b41c <__ssvfiscanf_r+0x1d4>
 800b460:	2300      	movs	r3, #0
 800b462:	9342      	str	r3, [sp, #264]	; 0x108
 800b464:	2303      	movs	r3, #3
 800b466:	e7de      	b.n	800b426 <__ssvfiscanf_r+0x1de>
 800b468:	2308      	movs	r3, #8
 800b46a:	9342      	str	r3, [sp, #264]	; 0x108
 800b46c:	2304      	movs	r3, #4
 800b46e:	e7da      	b.n	800b426 <__ssvfiscanf_r+0x1de>
 800b470:	4629      	mov	r1, r5
 800b472:	4640      	mov	r0, r8
 800b474:	f000 fb4a 	bl	800bb0c <__sccl>
 800b478:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b47a:	4605      	mov	r5, r0
 800b47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b480:	9341      	str	r3, [sp, #260]	; 0x104
 800b482:	2301      	movs	r3, #1
 800b484:	e7cf      	b.n	800b426 <__ssvfiscanf_r+0x1de>
 800b486:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b48c:	9341      	str	r3, [sp, #260]	; 0x104
 800b48e:	2300      	movs	r3, #0
 800b490:	e7c9      	b.n	800b426 <__ssvfiscanf_r+0x1de>
 800b492:	2302      	movs	r3, #2
 800b494:	e7c7      	b.n	800b426 <__ssvfiscanf_r+0x1de>
 800b496:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b498:	06c3      	lsls	r3, r0, #27
 800b49a:	f53f aefb 	bmi.w	800b294 <__ssvfiscanf_r+0x4c>
 800b49e:	9b00      	ldr	r3, [sp, #0]
 800b4a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b4a2:	1d19      	adds	r1, r3, #4
 800b4a4:	9100      	str	r1, [sp, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f010 0f01 	tst.w	r0, #1
 800b4ac:	bf14      	ite	ne
 800b4ae:	801a      	strhne	r2, [r3, #0]
 800b4b0:	601a      	streq	r2, [r3, #0]
 800b4b2:	e6ef      	b.n	800b294 <__ssvfiscanf_r+0x4c>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4ba:	4798      	blx	r3
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d0b6      	beq.n	800b42e <__ssvfiscanf_r+0x1e6>
 800b4c0:	e79c      	b.n	800b3fc <__ssvfiscanf_r+0x1b4>
 800b4c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b4c4:	3201      	adds	r2, #1
 800b4c6:	9245      	str	r2, [sp, #276]	; 0x114
 800b4c8:	6862      	ldr	r2, [r4, #4]
 800b4ca:	3a01      	subs	r2, #1
 800b4cc:	2a00      	cmp	r2, #0
 800b4ce:	6062      	str	r2, [r4, #4]
 800b4d0:	dd02      	ble.n	800b4d8 <__ssvfiscanf_r+0x290>
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	e7ad      	b.n	800b434 <__ssvfiscanf_r+0x1ec>
 800b4d8:	4621      	mov	r1, r4
 800b4da:	4630      	mov	r0, r6
 800b4dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4de:	4798      	blx	r3
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d0a7      	beq.n	800b434 <__ssvfiscanf_r+0x1ec>
 800b4e4:	e78a      	b.n	800b3fc <__ssvfiscanf_r+0x1b4>
 800b4e6:	2b04      	cmp	r3, #4
 800b4e8:	dc0e      	bgt.n	800b508 <__ssvfiscanf_r+0x2c0>
 800b4ea:	466b      	mov	r3, sp
 800b4ec:	4622      	mov	r2, r4
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	a941      	add	r1, sp, #260	; 0x104
 800b4f2:	f000 fa13 	bl	800b91c <_scanf_i>
 800b4f6:	e7ab      	b.n	800b450 <__ssvfiscanf_r+0x208>
 800b4f8:	0800b195 	.word	0x0800b195
 800b4fc:	0800b20f 	.word	0x0800b20f
 800b500:	0800c1a7 	.word	0x0800c1a7
 800b504:	0800c15e 	.word	0x0800c15e
 800b508:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <__ssvfiscanf_r+0x2f0>)
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f43f aec2 	beq.w	800b294 <__ssvfiscanf_r+0x4c>
 800b510:	466b      	mov	r3, sp
 800b512:	4622      	mov	r2, r4
 800b514:	4630      	mov	r0, r6
 800b516:	a941      	add	r1, sp, #260	; 0x104
 800b518:	f3af 8000 	nop.w
 800b51c:	e798      	b.n	800b450 <__ssvfiscanf_r+0x208>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b524:	bf18      	it	ne
 800b526:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800b52a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b532:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b534:	e7f9      	b.n	800b52a <__ssvfiscanf_r+0x2e2>
 800b536:	bf00      	nop
 800b538:	00000000 	.word	0x00000000

0800b53c <_printf_common>:
 800b53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b540:	4616      	mov	r6, r2
 800b542:	4699      	mov	r9, r3
 800b544:	688a      	ldr	r2, [r1, #8]
 800b546:	690b      	ldr	r3, [r1, #16]
 800b548:	4607      	mov	r7, r0
 800b54a:	4293      	cmp	r3, r2
 800b54c:	bfb8      	it	lt
 800b54e:	4613      	movlt	r3, r2
 800b550:	6033      	str	r3, [r6, #0]
 800b552:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b556:	460c      	mov	r4, r1
 800b558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b55c:	b10a      	cbz	r2, 800b562 <_printf_common+0x26>
 800b55e:	3301      	adds	r3, #1
 800b560:	6033      	str	r3, [r6, #0]
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	0699      	lsls	r1, r3, #26
 800b566:	bf42      	ittt	mi
 800b568:	6833      	ldrmi	r3, [r6, #0]
 800b56a:	3302      	addmi	r3, #2
 800b56c:	6033      	strmi	r3, [r6, #0]
 800b56e:	6825      	ldr	r5, [r4, #0]
 800b570:	f015 0506 	ands.w	r5, r5, #6
 800b574:	d106      	bne.n	800b584 <_printf_common+0x48>
 800b576:	f104 0a19 	add.w	sl, r4, #25
 800b57a:	68e3      	ldr	r3, [r4, #12]
 800b57c:	6832      	ldr	r2, [r6, #0]
 800b57e:	1a9b      	subs	r3, r3, r2
 800b580:	42ab      	cmp	r3, r5
 800b582:	dc28      	bgt.n	800b5d6 <_printf_common+0x9a>
 800b584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b588:	1e13      	subs	r3, r2, #0
 800b58a:	6822      	ldr	r2, [r4, #0]
 800b58c:	bf18      	it	ne
 800b58e:	2301      	movne	r3, #1
 800b590:	0692      	lsls	r2, r2, #26
 800b592:	d42d      	bmi.n	800b5f0 <_printf_common+0xb4>
 800b594:	4649      	mov	r1, r9
 800b596:	4638      	mov	r0, r7
 800b598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b59c:	47c0      	blx	r8
 800b59e:	3001      	adds	r0, #1
 800b5a0:	d020      	beq.n	800b5e4 <_printf_common+0xa8>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	68e5      	ldr	r5, [r4, #12]
 800b5a6:	f003 0306 	and.w	r3, r3, #6
 800b5aa:	2b04      	cmp	r3, #4
 800b5ac:	bf18      	it	ne
 800b5ae:	2500      	movne	r5, #0
 800b5b0:	6832      	ldr	r2, [r6, #0]
 800b5b2:	f04f 0600 	mov.w	r6, #0
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	bf08      	it	eq
 800b5ba:	1aad      	subeq	r5, r5, r2
 800b5bc:	6922      	ldr	r2, [r4, #16]
 800b5be:	bf08      	it	eq
 800b5c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	bfc4      	itt	gt
 800b5c8:	1a9b      	subgt	r3, r3, r2
 800b5ca:	18ed      	addgt	r5, r5, r3
 800b5cc:	341a      	adds	r4, #26
 800b5ce:	42b5      	cmp	r5, r6
 800b5d0:	d11a      	bne.n	800b608 <_printf_common+0xcc>
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	e008      	b.n	800b5e8 <_printf_common+0xac>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4652      	mov	r2, sl
 800b5da:	4649      	mov	r1, r9
 800b5dc:	4638      	mov	r0, r7
 800b5de:	47c0      	blx	r8
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	d103      	bne.n	800b5ec <_printf_common+0xb0>
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ec:	3501      	adds	r5, #1
 800b5ee:	e7c4      	b.n	800b57a <_printf_common+0x3e>
 800b5f0:	2030      	movs	r0, #48	; 0x30
 800b5f2:	18e1      	adds	r1, r4, r3
 800b5f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5fe:	4422      	add	r2, r4
 800b600:	3302      	adds	r3, #2
 800b602:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b606:	e7c5      	b.n	800b594 <_printf_common+0x58>
 800b608:	2301      	movs	r3, #1
 800b60a:	4622      	mov	r2, r4
 800b60c:	4649      	mov	r1, r9
 800b60e:	4638      	mov	r0, r7
 800b610:	47c0      	blx	r8
 800b612:	3001      	adds	r0, #1
 800b614:	d0e6      	beq.n	800b5e4 <_printf_common+0xa8>
 800b616:	3601      	adds	r6, #1
 800b618:	e7d9      	b.n	800b5ce <_printf_common+0x92>
	...

0800b61c <_printf_i>:
 800b61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b620:	7e0f      	ldrb	r7, [r1, #24]
 800b622:	4691      	mov	r9, r2
 800b624:	2f78      	cmp	r7, #120	; 0x78
 800b626:	4680      	mov	r8, r0
 800b628:	460c      	mov	r4, r1
 800b62a:	469a      	mov	sl, r3
 800b62c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b62e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b632:	d807      	bhi.n	800b644 <_printf_i+0x28>
 800b634:	2f62      	cmp	r7, #98	; 0x62
 800b636:	d80a      	bhi.n	800b64e <_printf_i+0x32>
 800b638:	2f00      	cmp	r7, #0
 800b63a:	f000 80d9 	beq.w	800b7f0 <_printf_i+0x1d4>
 800b63e:	2f58      	cmp	r7, #88	; 0x58
 800b640:	f000 80a4 	beq.w	800b78c <_printf_i+0x170>
 800b644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b64c:	e03a      	b.n	800b6c4 <_printf_i+0xa8>
 800b64e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b652:	2b15      	cmp	r3, #21
 800b654:	d8f6      	bhi.n	800b644 <_printf_i+0x28>
 800b656:	a101      	add	r1, pc, #4	; (adr r1, 800b65c <_printf_i+0x40>)
 800b658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b65c:	0800b6b5 	.word	0x0800b6b5
 800b660:	0800b6c9 	.word	0x0800b6c9
 800b664:	0800b645 	.word	0x0800b645
 800b668:	0800b645 	.word	0x0800b645
 800b66c:	0800b645 	.word	0x0800b645
 800b670:	0800b645 	.word	0x0800b645
 800b674:	0800b6c9 	.word	0x0800b6c9
 800b678:	0800b645 	.word	0x0800b645
 800b67c:	0800b645 	.word	0x0800b645
 800b680:	0800b645 	.word	0x0800b645
 800b684:	0800b645 	.word	0x0800b645
 800b688:	0800b7d7 	.word	0x0800b7d7
 800b68c:	0800b6f9 	.word	0x0800b6f9
 800b690:	0800b7b9 	.word	0x0800b7b9
 800b694:	0800b645 	.word	0x0800b645
 800b698:	0800b645 	.word	0x0800b645
 800b69c:	0800b7f9 	.word	0x0800b7f9
 800b6a0:	0800b645 	.word	0x0800b645
 800b6a4:	0800b6f9 	.word	0x0800b6f9
 800b6a8:	0800b645 	.word	0x0800b645
 800b6ac:	0800b645 	.word	0x0800b645
 800b6b0:	0800b7c1 	.word	0x0800b7c1
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	1d1a      	adds	r2, r3, #4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	602a      	str	r2, [r5, #0]
 800b6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e0a4      	b.n	800b812 <_printf_i+0x1f6>
 800b6c8:	6820      	ldr	r0, [r4, #0]
 800b6ca:	6829      	ldr	r1, [r5, #0]
 800b6cc:	0606      	lsls	r6, r0, #24
 800b6ce:	f101 0304 	add.w	r3, r1, #4
 800b6d2:	d50a      	bpl.n	800b6ea <_printf_i+0xce>
 800b6d4:	680e      	ldr	r6, [r1, #0]
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	2e00      	cmp	r6, #0
 800b6da:	da03      	bge.n	800b6e4 <_printf_i+0xc8>
 800b6dc:	232d      	movs	r3, #45	; 0x2d
 800b6de:	4276      	negs	r6, r6
 800b6e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6e4:	230a      	movs	r3, #10
 800b6e6:	485e      	ldr	r0, [pc, #376]	; (800b860 <_printf_i+0x244>)
 800b6e8:	e019      	b.n	800b71e <_printf_i+0x102>
 800b6ea:	680e      	ldr	r6, [r1, #0]
 800b6ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b6f0:	602b      	str	r3, [r5, #0]
 800b6f2:	bf18      	it	ne
 800b6f4:	b236      	sxthne	r6, r6
 800b6f6:	e7ef      	b.n	800b6d8 <_printf_i+0xbc>
 800b6f8:	682b      	ldr	r3, [r5, #0]
 800b6fa:	6820      	ldr	r0, [r4, #0]
 800b6fc:	1d19      	adds	r1, r3, #4
 800b6fe:	6029      	str	r1, [r5, #0]
 800b700:	0601      	lsls	r1, r0, #24
 800b702:	d501      	bpl.n	800b708 <_printf_i+0xec>
 800b704:	681e      	ldr	r6, [r3, #0]
 800b706:	e002      	b.n	800b70e <_printf_i+0xf2>
 800b708:	0646      	lsls	r6, r0, #25
 800b70a:	d5fb      	bpl.n	800b704 <_printf_i+0xe8>
 800b70c:	881e      	ldrh	r6, [r3, #0]
 800b70e:	2f6f      	cmp	r7, #111	; 0x6f
 800b710:	bf0c      	ite	eq
 800b712:	2308      	moveq	r3, #8
 800b714:	230a      	movne	r3, #10
 800b716:	4852      	ldr	r0, [pc, #328]	; (800b860 <_printf_i+0x244>)
 800b718:	2100      	movs	r1, #0
 800b71a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b71e:	6865      	ldr	r5, [r4, #4]
 800b720:	2d00      	cmp	r5, #0
 800b722:	bfa8      	it	ge
 800b724:	6821      	ldrge	r1, [r4, #0]
 800b726:	60a5      	str	r5, [r4, #8]
 800b728:	bfa4      	itt	ge
 800b72a:	f021 0104 	bicge.w	r1, r1, #4
 800b72e:	6021      	strge	r1, [r4, #0]
 800b730:	b90e      	cbnz	r6, 800b736 <_printf_i+0x11a>
 800b732:	2d00      	cmp	r5, #0
 800b734:	d04d      	beq.n	800b7d2 <_printf_i+0x1b6>
 800b736:	4615      	mov	r5, r2
 800b738:	fbb6 f1f3 	udiv	r1, r6, r3
 800b73c:	fb03 6711 	mls	r7, r3, r1, r6
 800b740:	5dc7      	ldrb	r7, [r0, r7]
 800b742:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b746:	4637      	mov	r7, r6
 800b748:	42bb      	cmp	r3, r7
 800b74a:	460e      	mov	r6, r1
 800b74c:	d9f4      	bls.n	800b738 <_printf_i+0x11c>
 800b74e:	2b08      	cmp	r3, #8
 800b750:	d10b      	bne.n	800b76a <_printf_i+0x14e>
 800b752:	6823      	ldr	r3, [r4, #0]
 800b754:	07de      	lsls	r6, r3, #31
 800b756:	d508      	bpl.n	800b76a <_printf_i+0x14e>
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	6861      	ldr	r1, [r4, #4]
 800b75c:	4299      	cmp	r1, r3
 800b75e:	bfde      	ittt	le
 800b760:	2330      	movle	r3, #48	; 0x30
 800b762:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b766:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b76a:	1b52      	subs	r2, r2, r5
 800b76c:	6122      	str	r2, [r4, #16]
 800b76e:	464b      	mov	r3, r9
 800b770:	4621      	mov	r1, r4
 800b772:	4640      	mov	r0, r8
 800b774:	f8cd a000 	str.w	sl, [sp]
 800b778:	aa03      	add	r2, sp, #12
 800b77a:	f7ff fedf 	bl	800b53c <_printf_common>
 800b77e:	3001      	adds	r0, #1
 800b780:	d14c      	bne.n	800b81c <_printf_i+0x200>
 800b782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b786:	b004      	add	sp, #16
 800b788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78c:	4834      	ldr	r0, [pc, #208]	; (800b860 <_printf_i+0x244>)
 800b78e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b792:	6829      	ldr	r1, [r5, #0]
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	f851 6b04 	ldr.w	r6, [r1], #4
 800b79a:	6029      	str	r1, [r5, #0]
 800b79c:	061d      	lsls	r5, r3, #24
 800b79e:	d514      	bpl.n	800b7ca <_printf_i+0x1ae>
 800b7a0:	07df      	lsls	r7, r3, #31
 800b7a2:	bf44      	itt	mi
 800b7a4:	f043 0320 	orrmi.w	r3, r3, #32
 800b7a8:	6023      	strmi	r3, [r4, #0]
 800b7aa:	b91e      	cbnz	r6, 800b7b4 <_printf_i+0x198>
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	f023 0320 	bic.w	r3, r3, #32
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	2310      	movs	r3, #16
 800b7b6:	e7af      	b.n	800b718 <_printf_i+0xfc>
 800b7b8:	6823      	ldr	r3, [r4, #0]
 800b7ba:	f043 0320 	orr.w	r3, r3, #32
 800b7be:	6023      	str	r3, [r4, #0]
 800b7c0:	2378      	movs	r3, #120	; 0x78
 800b7c2:	4828      	ldr	r0, [pc, #160]	; (800b864 <_printf_i+0x248>)
 800b7c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7c8:	e7e3      	b.n	800b792 <_printf_i+0x176>
 800b7ca:	0659      	lsls	r1, r3, #25
 800b7cc:	bf48      	it	mi
 800b7ce:	b2b6      	uxthmi	r6, r6
 800b7d0:	e7e6      	b.n	800b7a0 <_printf_i+0x184>
 800b7d2:	4615      	mov	r5, r2
 800b7d4:	e7bb      	b.n	800b74e <_printf_i+0x132>
 800b7d6:	682b      	ldr	r3, [r5, #0]
 800b7d8:	6826      	ldr	r6, [r4, #0]
 800b7da:	1d18      	adds	r0, r3, #4
 800b7dc:	6961      	ldr	r1, [r4, #20]
 800b7de:	6028      	str	r0, [r5, #0]
 800b7e0:	0635      	lsls	r5, r6, #24
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	d501      	bpl.n	800b7ea <_printf_i+0x1ce>
 800b7e6:	6019      	str	r1, [r3, #0]
 800b7e8:	e002      	b.n	800b7f0 <_printf_i+0x1d4>
 800b7ea:	0670      	lsls	r0, r6, #25
 800b7ec:	d5fb      	bpl.n	800b7e6 <_printf_i+0x1ca>
 800b7ee:	8019      	strh	r1, [r3, #0]
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4615      	mov	r5, r2
 800b7f4:	6123      	str	r3, [r4, #16]
 800b7f6:	e7ba      	b.n	800b76e <_printf_i+0x152>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	1d1a      	adds	r2, r3, #4
 800b7fe:	602a      	str	r2, [r5, #0]
 800b800:	681d      	ldr	r5, [r3, #0]
 800b802:	6862      	ldr	r2, [r4, #4]
 800b804:	4628      	mov	r0, r5
 800b806:	f000 fae5 	bl	800bdd4 <memchr>
 800b80a:	b108      	cbz	r0, 800b810 <_printf_i+0x1f4>
 800b80c:	1b40      	subs	r0, r0, r5
 800b80e:	6060      	str	r0, [r4, #4]
 800b810:	6863      	ldr	r3, [r4, #4]
 800b812:	6123      	str	r3, [r4, #16]
 800b814:	2300      	movs	r3, #0
 800b816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b81a:	e7a8      	b.n	800b76e <_printf_i+0x152>
 800b81c:	462a      	mov	r2, r5
 800b81e:	4649      	mov	r1, r9
 800b820:	4640      	mov	r0, r8
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	47d0      	blx	sl
 800b826:	3001      	adds	r0, #1
 800b828:	d0ab      	beq.n	800b782 <_printf_i+0x166>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	079b      	lsls	r3, r3, #30
 800b82e:	d413      	bmi.n	800b858 <_printf_i+0x23c>
 800b830:	68e0      	ldr	r0, [r4, #12]
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	4298      	cmp	r0, r3
 800b836:	bfb8      	it	lt
 800b838:	4618      	movlt	r0, r3
 800b83a:	e7a4      	b.n	800b786 <_printf_i+0x16a>
 800b83c:	2301      	movs	r3, #1
 800b83e:	4632      	mov	r2, r6
 800b840:	4649      	mov	r1, r9
 800b842:	4640      	mov	r0, r8
 800b844:	47d0      	blx	sl
 800b846:	3001      	adds	r0, #1
 800b848:	d09b      	beq.n	800b782 <_printf_i+0x166>
 800b84a:	3501      	adds	r5, #1
 800b84c:	68e3      	ldr	r3, [r4, #12]
 800b84e:	9903      	ldr	r1, [sp, #12]
 800b850:	1a5b      	subs	r3, r3, r1
 800b852:	42ab      	cmp	r3, r5
 800b854:	dcf2      	bgt.n	800b83c <_printf_i+0x220>
 800b856:	e7eb      	b.n	800b830 <_printf_i+0x214>
 800b858:	2500      	movs	r5, #0
 800b85a:	f104 0619 	add.w	r6, r4, #25
 800b85e:	e7f5      	b.n	800b84c <_printf_i+0x230>
 800b860:	0800c169 	.word	0x0800c169
 800b864:	0800c17a 	.word	0x0800c17a

0800b868 <_scanf_chars>:
 800b868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b86c:	4615      	mov	r5, r2
 800b86e:	688a      	ldr	r2, [r1, #8]
 800b870:	4680      	mov	r8, r0
 800b872:	460c      	mov	r4, r1
 800b874:	b932      	cbnz	r2, 800b884 <_scanf_chars+0x1c>
 800b876:	698a      	ldr	r2, [r1, #24]
 800b878:	2a00      	cmp	r2, #0
 800b87a:	bf0c      	ite	eq
 800b87c:	2201      	moveq	r2, #1
 800b87e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800b882:	608a      	str	r2, [r1, #8]
 800b884:	2700      	movs	r7, #0
 800b886:	6822      	ldr	r2, [r4, #0]
 800b888:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b918 <_scanf_chars+0xb0>
 800b88c:	06d1      	lsls	r1, r2, #27
 800b88e:	bf5f      	itttt	pl
 800b890:	681a      	ldrpl	r2, [r3, #0]
 800b892:	1d11      	addpl	r1, r2, #4
 800b894:	6019      	strpl	r1, [r3, #0]
 800b896:	6816      	ldrpl	r6, [r2, #0]
 800b898:	69a0      	ldr	r0, [r4, #24]
 800b89a:	b188      	cbz	r0, 800b8c0 <_scanf_chars+0x58>
 800b89c:	2801      	cmp	r0, #1
 800b89e:	d107      	bne.n	800b8b0 <_scanf_chars+0x48>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	781a      	ldrb	r2, [r3, #0]
 800b8a4:	6963      	ldr	r3, [r4, #20]
 800b8a6:	5c9b      	ldrb	r3, [r3, r2]
 800b8a8:	b953      	cbnz	r3, 800b8c0 <_scanf_chars+0x58>
 800b8aa:	2f00      	cmp	r7, #0
 800b8ac:	d031      	beq.n	800b912 <_scanf_chars+0xaa>
 800b8ae:	e022      	b.n	800b8f6 <_scanf_chars+0x8e>
 800b8b0:	2802      	cmp	r0, #2
 800b8b2:	d120      	bne.n	800b8f6 <_scanf_chars+0x8e>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b8bc:	071b      	lsls	r3, r3, #28
 800b8be:	d41a      	bmi.n	800b8f6 <_scanf_chars+0x8e>
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	3701      	adds	r7, #1
 800b8c4:	06da      	lsls	r2, r3, #27
 800b8c6:	bf5e      	ittt	pl
 800b8c8:	682b      	ldrpl	r3, [r5, #0]
 800b8ca:	781b      	ldrbpl	r3, [r3, #0]
 800b8cc:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b8d0:	682a      	ldr	r2, [r5, #0]
 800b8d2:	686b      	ldr	r3, [r5, #4]
 800b8d4:	3201      	adds	r2, #1
 800b8d6:	602a      	str	r2, [r5, #0]
 800b8d8:	68a2      	ldr	r2, [r4, #8]
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	3a01      	subs	r2, #1
 800b8de:	606b      	str	r3, [r5, #4]
 800b8e0:	60a2      	str	r2, [r4, #8]
 800b8e2:	b142      	cbz	r2, 800b8f6 <_scanf_chars+0x8e>
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	dcd7      	bgt.n	800b898 <_scanf_chars+0x30>
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8f0:	4798      	blx	r3
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d0d0      	beq.n	800b898 <_scanf_chars+0x30>
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	f013 0310 	ands.w	r3, r3, #16
 800b8fc:	d105      	bne.n	800b90a <_scanf_chars+0xa2>
 800b8fe:	68e2      	ldr	r2, [r4, #12]
 800b900:	3201      	adds	r2, #1
 800b902:	60e2      	str	r2, [r4, #12]
 800b904:	69a2      	ldr	r2, [r4, #24]
 800b906:	b102      	cbz	r2, 800b90a <_scanf_chars+0xa2>
 800b908:	7033      	strb	r3, [r6, #0]
 800b90a:	2000      	movs	r0, #0
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	443b      	add	r3, r7
 800b910:	6123      	str	r3, [r4, #16]
 800b912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b916:	bf00      	nop
 800b918:	0800c1a7 	.word	0x0800c1a7

0800b91c <_scanf_i>:
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	460c      	mov	r4, r1
 800b922:	4698      	mov	r8, r3
 800b924:	4b75      	ldr	r3, [pc, #468]	; (800bafc <_scanf_i+0x1e0>)
 800b926:	b087      	sub	sp, #28
 800b928:	4682      	mov	sl, r0
 800b92a:	4616      	mov	r6, r2
 800b92c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b930:	ab03      	add	r3, sp, #12
 800b932:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b936:	4b72      	ldr	r3, [pc, #456]	; (800bb00 <_scanf_i+0x1e4>)
 800b938:	69a1      	ldr	r1, [r4, #24]
 800b93a:	4a72      	ldr	r2, [pc, #456]	; (800bb04 <_scanf_i+0x1e8>)
 800b93c:	4627      	mov	r7, r4
 800b93e:	2903      	cmp	r1, #3
 800b940:	bf18      	it	ne
 800b942:	461a      	movne	r2, r3
 800b944:	68a3      	ldr	r3, [r4, #8]
 800b946:	9201      	str	r2, [sp, #4]
 800b948:	1e5a      	subs	r2, r3, #1
 800b94a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b94e:	bf81      	itttt	hi
 800b950:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b954:	eb03 0905 	addhi.w	r9, r3, r5
 800b958:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b95c:	60a3      	strhi	r3, [r4, #8]
 800b95e:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b962:	bf98      	it	ls
 800b964:	f04f 0900 	movls.w	r9, #0
 800b968:	463d      	mov	r5, r7
 800b96a:	f04f 0b00 	mov.w	fp, #0
 800b96e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b972:	6023      	str	r3, [r4, #0]
 800b974:	6831      	ldr	r1, [r6, #0]
 800b976:	ab03      	add	r3, sp, #12
 800b978:	2202      	movs	r2, #2
 800b97a:	7809      	ldrb	r1, [r1, #0]
 800b97c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b980:	f000 fa28 	bl	800bdd4 <memchr>
 800b984:	b328      	cbz	r0, 800b9d2 <_scanf_i+0xb6>
 800b986:	f1bb 0f01 	cmp.w	fp, #1
 800b98a:	d159      	bne.n	800ba40 <_scanf_i+0x124>
 800b98c:	6862      	ldr	r2, [r4, #4]
 800b98e:	b92a      	cbnz	r2, 800b99c <_scanf_i+0x80>
 800b990:	2308      	movs	r3, #8
 800b992:	6822      	ldr	r2, [r4, #0]
 800b994:	6063      	str	r3, [r4, #4]
 800b996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b99a:	6022      	str	r2, [r4, #0]
 800b99c:	6822      	ldr	r2, [r4, #0]
 800b99e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b9a2:	6022      	str	r2, [r4, #0]
 800b9a4:	68a2      	ldr	r2, [r4, #8]
 800b9a6:	1e51      	subs	r1, r2, #1
 800b9a8:	60a1      	str	r1, [r4, #8]
 800b9aa:	b192      	cbz	r2, 800b9d2 <_scanf_i+0xb6>
 800b9ac:	6832      	ldr	r2, [r6, #0]
 800b9ae:	1c51      	adds	r1, r2, #1
 800b9b0:	6031      	str	r1, [r6, #0]
 800b9b2:	7812      	ldrb	r2, [r2, #0]
 800b9b4:	f805 2b01 	strb.w	r2, [r5], #1
 800b9b8:	6872      	ldr	r2, [r6, #4]
 800b9ba:	3a01      	subs	r2, #1
 800b9bc:	2a00      	cmp	r2, #0
 800b9be:	6072      	str	r2, [r6, #4]
 800b9c0:	dc07      	bgt.n	800b9d2 <_scanf_i+0xb6>
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4650      	mov	r0, sl
 800b9c6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b9ca:	4790      	blx	r2
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	f040 8085 	bne.w	800badc <_scanf_i+0x1c0>
 800b9d2:	f10b 0b01 	add.w	fp, fp, #1
 800b9d6:	f1bb 0f03 	cmp.w	fp, #3
 800b9da:	d1cb      	bne.n	800b974 <_scanf_i+0x58>
 800b9dc:	6863      	ldr	r3, [r4, #4]
 800b9de:	b90b      	cbnz	r3, 800b9e4 <_scanf_i+0xc8>
 800b9e0:	230a      	movs	r3, #10
 800b9e2:	6063      	str	r3, [r4, #4]
 800b9e4:	6863      	ldr	r3, [r4, #4]
 800b9e6:	4948      	ldr	r1, [pc, #288]	; (800bb08 <_scanf_i+0x1ec>)
 800b9e8:	6960      	ldr	r0, [r4, #20]
 800b9ea:	1ac9      	subs	r1, r1, r3
 800b9ec:	f000 f88e 	bl	800bb0c <__sccl>
 800b9f0:	f04f 0b00 	mov.w	fp, #0
 800b9f4:	68a3      	ldr	r3, [r4, #8]
 800b9f6:	6822      	ldr	r2, [r4, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d03d      	beq.n	800ba78 <_scanf_i+0x15c>
 800b9fc:	6831      	ldr	r1, [r6, #0]
 800b9fe:	6960      	ldr	r0, [r4, #20]
 800ba00:	f891 c000 	ldrb.w	ip, [r1]
 800ba04:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d035      	beq.n	800ba78 <_scanf_i+0x15c>
 800ba0c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ba10:	d124      	bne.n	800ba5c <_scanf_i+0x140>
 800ba12:	0510      	lsls	r0, r2, #20
 800ba14:	d522      	bpl.n	800ba5c <_scanf_i+0x140>
 800ba16:	f10b 0b01 	add.w	fp, fp, #1
 800ba1a:	f1b9 0f00 	cmp.w	r9, #0
 800ba1e:	d003      	beq.n	800ba28 <_scanf_i+0x10c>
 800ba20:	3301      	adds	r3, #1
 800ba22:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ba26:	60a3      	str	r3, [r4, #8]
 800ba28:	6873      	ldr	r3, [r6, #4]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	6073      	str	r3, [r6, #4]
 800ba30:	dd1b      	ble.n	800ba6a <_scanf_i+0x14e>
 800ba32:	6833      	ldr	r3, [r6, #0]
 800ba34:	3301      	adds	r3, #1
 800ba36:	6033      	str	r3, [r6, #0]
 800ba38:	68a3      	ldr	r3, [r4, #8]
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	60a3      	str	r3, [r4, #8]
 800ba3e:	e7d9      	b.n	800b9f4 <_scanf_i+0xd8>
 800ba40:	f1bb 0f02 	cmp.w	fp, #2
 800ba44:	d1ae      	bne.n	800b9a4 <_scanf_i+0x88>
 800ba46:	6822      	ldr	r2, [r4, #0]
 800ba48:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ba4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ba50:	d1bf      	bne.n	800b9d2 <_scanf_i+0xb6>
 800ba52:	2310      	movs	r3, #16
 800ba54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba58:	6063      	str	r3, [r4, #4]
 800ba5a:	e7a2      	b.n	800b9a2 <_scanf_i+0x86>
 800ba5c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ba60:	6022      	str	r2, [r4, #0]
 800ba62:	780b      	ldrb	r3, [r1, #0]
 800ba64:	f805 3b01 	strb.w	r3, [r5], #1
 800ba68:	e7de      	b.n	800ba28 <_scanf_i+0x10c>
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba72:	4798      	blx	r3
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d0df      	beq.n	800ba38 <_scanf_i+0x11c>
 800ba78:	6823      	ldr	r3, [r4, #0]
 800ba7a:	05db      	lsls	r3, r3, #23
 800ba7c:	d50d      	bpl.n	800ba9a <_scanf_i+0x17e>
 800ba7e:	42bd      	cmp	r5, r7
 800ba80:	d909      	bls.n	800ba96 <_scanf_i+0x17a>
 800ba82:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ba86:	4632      	mov	r2, r6
 800ba88:	4650      	mov	r0, sl
 800ba8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba8e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ba92:	4798      	blx	r3
 800ba94:	464d      	mov	r5, r9
 800ba96:	42bd      	cmp	r5, r7
 800ba98:	d02d      	beq.n	800baf6 <_scanf_i+0x1da>
 800ba9a:	6822      	ldr	r2, [r4, #0]
 800ba9c:	f012 0210 	ands.w	r2, r2, #16
 800baa0:	d113      	bne.n	800baca <_scanf_i+0x1ae>
 800baa2:	702a      	strb	r2, [r5, #0]
 800baa4:	4639      	mov	r1, r7
 800baa6:	6863      	ldr	r3, [r4, #4]
 800baa8:	4650      	mov	r0, sl
 800baaa:	9e01      	ldr	r6, [sp, #4]
 800baac:	47b0      	blx	r6
 800baae:	6821      	ldr	r1, [r4, #0]
 800bab0:	f8d8 3000 	ldr.w	r3, [r8]
 800bab4:	f011 0f20 	tst.w	r1, #32
 800bab8:	d013      	beq.n	800bae2 <_scanf_i+0x1c6>
 800baba:	1d1a      	adds	r2, r3, #4
 800babc:	f8c8 2000 	str.w	r2, [r8]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6018      	str	r0, [r3, #0]
 800bac4:	68e3      	ldr	r3, [r4, #12]
 800bac6:	3301      	adds	r3, #1
 800bac8:	60e3      	str	r3, [r4, #12]
 800baca:	2000      	movs	r0, #0
 800bacc:	1bed      	subs	r5, r5, r7
 800bace:	44ab      	add	fp, r5
 800bad0:	6925      	ldr	r5, [r4, #16]
 800bad2:	445d      	add	r5, fp
 800bad4:	6125      	str	r5, [r4, #16]
 800bad6:	b007      	add	sp, #28
 800bad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800badc:	f04f 0b00 	mov.w	fp, #0
 800bae0:	e7ca      	b.n	800ba78 <_scanf_i+0x15c>
 800bae2:	1d1a      	adds	r2, r3, #4
 800bae4:	f8c8 2000 	str.w	r2, [r8]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f011 0f01 	tst.w	r1, #1
 800baee:	bf14      	ite	ne
 800baf0:	8018      	strhne	r0, [r3, #0]
 800baf2:	6018      	streq	r0, [r3, #0]
 800baf4:	e7e6      	b.n	800bac4 <_scanf_i+0x1a8>
 800baf6:	2001      	movs	r0, #1
 800baf8:	e7ed      	b.n	800bad6 <_scanf_i+0x1ba>
 800bafa:	bf00      	nop
 800bafc:	0800c13c 	.word	0x0800c13c
 800bb00:	0800bd5d 	.word	0x0800bd5d
 800bb04:	0800bc75 	.word	0x0800bc75
 800bb08:	0800c1a4 	.word	0x0800c1a4

0800bb0c <__sccl>:
 800bb0c:	b570      	push	{r4, r5, r6, lr}
 800bb0e:	780b      	ldrb	r3, [r1, #0]
 800bb10:	4604      	mov	r4, r0
 800bb12:	2b5e      	cmp	r3, #94	; 0x5e
 800bb14:	bf13      	iteet	ne
 800bb16:	2200      	movne	r2, #0
 800bb18:	2201      	moveq	r2, #1
 800bb1a:	784b      	ldrbeq	r3, [r1, #1]
 800bb1c:	1c48      	addne	r0, r1, #1
 800bb1e:	bf08      	it	eq
 800bb20:	1c88      	addeq	r0, r1, #2
 800bb22:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bb26:	1e61      	subs	r1, r4, #1
 800bb28:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bb2c:	42a9      	cmp	r1, r5
 800bb2e:	d1fb      	bne.n	800bb28 <__sccl+0x1c>
 800bb30:	b90b      	cbnz	r3, 800bb36 <__sccl+0x2a>
 800bb32:	3801      	subs	r0, #1
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	f082 0201 	eor.w	r2, r2, #1
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	54e2      	strb	r2, [r4, r3]
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bb44:	292d      	cmp	r1, #45	; 0x2d
 800bb46:	d006      	beq.n	800bb56 <__sccl+0x4a>
 800bb48:	295d      	cmp	r1, #93	; 0x5d
 800bb4a:	d0f3      	beq.n	800bb34 <__sccl+0x28>
 800bb4c:	b909      	cbnz	r1, 800bb52 <__sccl+0x46>
 800bb4e:	4628      	mov	r0, r5
 800bb50:	e7f0      	b.n	800bb34 <__sccl+0x28>
 800bb52:	460b      	mov	r3, r1
 800bb54:	e7f1      	b.n	800bb3a <__sccl+0x2e>
 800bb56:	786e      	ldrb	r6, [r5, #1]
 800bb58:	2e5d      	cmp	r6, #93	; 0x5d
 800bb5a:	d0fa      	beq.n	800bb52 <__sccl+0x46>
 800bb5c:	42b3      	cmp	r3, r6
 800bb5e:	dcf8      	bgt.n	800bb52 <__sccl+0x46>
 800bb60:	4619      	mov	r1, r3
 800bb62:	3502      	adds	r5, #2
 800bb64:	3101      	adds	r1, #1
 800bb66:	428e      	cmp	r6, r1
 800bb68:	5462      	strb	r2, [r4, r1]
 800bb6a:	dcfb      	bgt.n	800bb64 <__sccl+0x58>
 800bb6c:	1af1      	subs	r1, r6, r3
 800bb6e:	3901      	subs	r1, #1
 800bb70:	42b3      	cmp	r3, r6
 800bb72:	bfa8      	it	ge
 800bb74:	2100      	movge	r1, #0
 800bb76:	1c58      	adds	r0, r3, #1
 800bb78:	1843      	adds	r3, r0, r1
 800bb7a:	e7e0      	b.n	800bb3e <__sccl+0x32>

0800bb7c <_strtol_l.constprop.0>:
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb82:	4680      	mov	r8, r0
 800bb84:	d001      	beq.n	800bb8a <_strtol_l.constprop.0+0xe>
 800bb86:	2b24      	cmp	r3, #36	; 0x24
 800bb88:	d906      	bls.n	800bb98 <_strtol_l.constprop.0+0x1c>
 800bb8a:	f7ff f8d3 	bl	800ad34 <__errno>
 800bb8e:	2316      	movs	r3, #22
 800bb90:	6003      	str	r3, [r0, #0]
 800bb92:	2000      	movs	r0, #0
 800bb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb98:	460d      	mov	r5, r1
 800bb9a:	4f35      	ldr	r7, [pc, #212]	; (800bc70 <_strtol_l.constprop.0+0xf4>)
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bba2:	5de6      	ldrb	r6, [r4, r7]
 800bba4:	f016 0608 	ands.w	r6, r6, #8
 800bba8:	d1f8      	bne.n	800bb9c <_strtol_l.constprop.0+0x20>
 800bbaa:	2c2d      	cmp	r4, #45	; 0x2d
 800bbac:	d12f      	bne.n	800bc0e <_strtol_l.constprop.0+0x92>
 800bbae:	2601      	movs	r6, #1
 800bbb0:	782c      	ldrb	r4, [r5, #0]
 800bbb2:	1c85      	adds	r5, r0, #2
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d057      	beq.n	800bc68 <_strtol_l.constprop.0+0xec>
 800bbb8:	2b10      	cmp	r3, #16
 800bbba:	d109      	bne.n	800bbd0 <_strtol_l.constprop.0+0x54>
 800bbbc:	2c30      	cmp	r4, #48	; 0x30
 800bbbe:	d107      	bne.n	800bbd0 <_strtol_l.constprop.0+0x54>
 800bbc0:	7828      	ldrb	r0, [r5, #0]
 800bbc2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bbc6:	2858      	cmp	r0, #88	; 0x58
 800bbc8:	d149      	bne.n	800bc5e <_strtol_l.constprop.0+0xe2>
 800bbca:	2310      	movs	r3, #16
 800bbcc:	786c      	ldrb	r4, [r5, #1]
 800bbce:	3502      	adds	r5, #2
 800bbd0:	2700      	movs	r7, #0
 800bbd2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800bbd6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800bbda:	fbbe f9f3 	udiv	r9, lr, r3
 800bbde:	4638      	mov	r0, r7
 800bbe0:	fb03 ea19 	mls	sl, r3, r9, lr
 800bbe4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bbe8:	f1bc 0f09 	cmp.w	ip, #9
 800bbec:	d814      	bhi.n	800bc18 <_strtol_l.constprop.0+0x9c>
 800bbee:	4664      	mov	r4, ip
 800bbf0:	42a3      	cmp	r3, r4
 800bbf2:	dd22      	ble.n	800bc3a <_strtol_l.constprop.0+0xbe>
 800bbf4:	2f00      	cmp	r7, #0
 800bbf6:	db1d      	blt.n	800bc34 <_strtol_l.constprop.0+0xb8>
 800bbf8:	4581      	cmp	r9, r0
 800bbfa:	d31b      	bcc.n	800bc34 <_strtol_l.constprop.0+0xb8>
 800bbfc:	d101      	bne.n	800bc02 <_strtol_l.constprop.0+0x86>
 800bbfe:	45a2      	cmp	sl, r4
 800bc00:	db18      	blt.n	800bc34 <_strtol_l.constprop.0+0xb8>
 800bc02:	2701      	movs	r7, #1
 800bc04:	fb00 4003 	mla	r0, r0, r3, r4
 800bc08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc0c:	e7ea      	b.n	800bbe4 <_strtol_l.constprop.0+0x68>
 800bc0e:	2c2b      	cmp	r4, #43	; 0x2b
 800bc10:	bf04      	itt	eq
 800bc12:	782c      	ldrbeq	r4, [r5, #0]
 800bc14:	1c85      	addeq	r5, r0, #2
 800bc16:	e7cd      	b.n	800bbb4 <_strtol_l.constprop.0+0x38>
 800bc18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bc1c:	f1bc 0f19 	cmp.w	ip, #25
 800bc20:	d801      	bhi.n	800bc26 <_strtol_l.constprop.0+0xaa>
 800bc22:	3c37      	subs	r4, #55	; 0x37
 800bc24:	e7e4      	b.n	800bbf0 <_strtol_l.constprop.0+0x74>
 800bc26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bc2a:	f1bc 0f19 	cmp.w	ip, #25
 800bc2e:	d804      	bhi.n	800bc3a <_strtol_l.constprop.0+0xbe>
 800bc30:	3c57      	subs	r4, #87	; 0x57
 800bc32:	e7dd      	b.n	800bbf0 <_strtol_l.constprop.0+0x74>
 800bc34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc38:	e7e6      	b.n	800bc08 <_strtol_l.constprop.0+0x8c>
 800bc3a:	2f00      	cmp	r7, #0
 800bc3c:	da07      	bge.n	800bc4e <_strtol_l.constprop.0+0xd2>
 800bc3e:	2322      	movs	r3, #34	; 0x22
 800bc40:	4670      	mov	r0, lr
 800bc42:	f8c8 3000 	str.w	r3, [r8]
 800bc46:	2a00      	cmp	r2, #0
 800bc48:	d0a4      	beq.n	800bb94 <_strtol_l.constprop.0+0x18>
 800bc4a:	1e69      	subs	r1, r5, #1
 800bc4c:	e005      	b.n	800bc5a <_strtol_l.constprop.0+0xde>
 800bc4e:	b106      	cbz	r6, 800bc52 <_strtol_l.constprop.0+0xd6>
 800bc50:	4240      	negs	r0, r0
 800bc52:	2a00      	cmp	r2, #0
 800bc54:	d09e      	beq.n	800bb94 <_strtol_l.constprop.0+0x18>
 800bc56:	2f00      	cmp	r7, #0
 800bc58:	d1f7      	bne.n	800bc4a <_strtol_l.constprop.0+0xce>
 800bc5a:	6011      	str	r1, [r2, #0]
 800bc5c:	e79a      	b.n	800bb94 <_strtol_l.constprop.0+0x18>
 800bc5e:	2430      	movs	r4, #48	; 0x30
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1b5      	bne.n	800bbd0 <_strtol_l.constprop.0+0x54>
 800bc64:	2308      	movs	r3, #8
 800bc66:	e7b3      	b.n	800bbd0 <_strtol_l.constprop.0+0x54>
 800bc68:	2c30      	cmp	r4, #48	; 0x30
 800bc6a:	d0a9      	beq.n	800bbc0 <_strtol_l.constprop.0+0x44>
 800bc6c:	230a      	movs	r3, #10
 800bc6e:	e7af      	b.n	800bbd0 <_strtol_l.constprop.0+0x54>
 800bc70:	0800c1a7 	.word	0x0800c1a7

0800bc74 <_strtol_r>:
 800bc74:	f7ff bf82 	b.w	800bb7c <_strtol_l.constprop.0>

0800bc78 <_strtoul_l.constprop.0>:
 800bc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc7c:	4686      	mov	lr, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	4f35      	ldr	r7, [pc, #212]	; (800bd58 <_strtoul_l.constprop.0+0xe0>)
 800bc82:	4628      	mov	r0, r5
 800bc84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc88:	5de6      	ldrb	r6, [r4, r7]
 800bc8a:	f016 0608 	ands.w	r6, r6, #8
 800bc8e:	d1f8      	bne.n	800bc82 <_strtoul_l.constprop.0+0xa>
 800bc90:	2c2d      	cmp	r4, #45	; 0x2d
 800bc92:	d12f      	bne.n	800bcf4 <_strtoul_l.constprop.0+0x7c>
 800bc94:	2601      	movs	r6, #1
 800bc96:	782c      	ldrb	r4, [r5, #0]
 800bc98:	1c85      	adds	r5, r0, #2
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d057      	beq.n	800bd4e <_strtoul_l.constprop.0+0xd6>
 800bc9e:	2b10      	cmp	r3, #16
 800bca0:	d109      	bne.n	800bcb6 <_strtoul_l.constprop.0+0x3e>
 800bca2:	2c30      	cmp	r4, #48	; 0x30
 800bca4:	d107      	bne.n	800bcb6 <_strtoul_l.constprop.0+0x3e>
 800bca6:	7828      	ldrb	r0, [r5, #0]
 800bca8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bcac:	2858      	cmp	r0, #88	; 0x58
 800bcae:	d149      	bne.n	800bd44 <_strtoul_l.constprop.0+0xcc>
 800bcb0:	2310      	movs	r3, #16
 800bcb2:	786c      	ldrb	r4, [r5, #1]
 800bcb4:	3502      	adds	r5, #2
 800bcb6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800bcba:	fbb8 f8f3 	udiv	r8, r8, r3
 800bcbe:	2700      	movs	r7, #0
 800bcc0:	fb03 f908 	mul.w	r9, r3, r8
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	ea6f 0909 	mvn.w	r9, r9
 800bcca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bcce:	f1bc 0f09 	cmp.w	ip, #9
 800bcd2:	d814      	bhi.n	800bcfe <_strtoul_l.constprop.0+0x86>
 800bcd4:	4664      	mov	r4, ip
 800bcd6:	42a3      	cmp	r3, r4
 800bcd8:	dd22      	ble.n	800bd20 <_strtoul_l.constprop.0+0xa8>
 800bcda:	2f00      	cmp	r7, #0
 800bcdc:	db1d      	blt.n	800bd1a <_strtoul_l.constprop.0+0xa2>
 800bcde:	4580      	cmp	r8, r0
 800bce0:	d31b      	bcc.n	800bd1a <_strtoul_l.constprop.0+0xa2>
 800bce2:	d101      	bne.n	800bce8 <_strtoul_l.constprop.0+0x70>
 800bce4:	45a1      	cmp	r9, r4
 800bce6:	db18      	blt.n	800bd1a <_strtoul_l.constprop.0+0xa2>
 800bce8:	2701      	movs	r7, #1
 800bcea:	fb00 4003 	mla	r0, r0, r3, r4
 800bcee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcf2:	e7ea      	b.n	800bcca <_strtoul_l.constprop.0+0x52>
 800bcf4:	2c2b      	cmp	r4, #43	; 0x2b
 800bcf6:	bf04      	itt	eq
 800bcf8:	782c      	ldrbeq	r4, [r5, #0]
 800bcfa:	1c85      	addeq	r5, r0, #2
 800bcfc:	e7cd      	b.n	800bc9a <_strtoul_l.constprop.0+0x22>
 800bcfe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bd02:	f1bc 0f19 	cmp.w	ip, #25
 800bd06:	d801      	bhi.n	800bd0c <_strtoul_l.constprop.0+0x94>
 800bd08:	3c37      	subs	r4, #55	; 0x37
 800bd0a:	e7e4      	b.n	800bcd6 <_strtoul_l.constprop.0+0x5e>
 800bd0c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bd10:	f1bc 0f19 	cmp.w	ip, #25
 800bd14:	d804      	bhi.n	800bd20 <_strtoul_l.constprop.0+0xa8>
 800bd16:	3c57      	subs	r4, #87	; 0x57
 800bd18:	e7dd      	b.n	800bcd6 <_strtoul_l.constprop.0+0x5e>
 800bd1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bd1e:	e7e6      	b.n	800bcee <_strtoul_l.constprop.0+0x76>
 800bd20:	2f00      	cmp	r7, #0
 800bd22:	da07      	bge.n	800bd34 <_strtoul_l.constprop.0+0xbc>
 800bd24:	2322      	movs	r3, #34	; 0x22
 800bd26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd2a:	f8ce 3000 	str.w	r3, [lr]
 800bd2e:	b932      	cbnz	r2, 800bd3e <_strtoul_l.constprop.0+0xc6>
 800bd30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd34:	b106      	cbz	r6, 800bd38 <_strtoul_l.constprop.0+0xc0>
 800bd36:	4240      	negs	r0, r0
 800bd38:	2a00      	cmp	r2, #0
 800bd3a:	d0f9      	beq.n	800bd30 <_strtoul_l.constprop.0+0xb8>
 800bd3c:	b107      	cbz	r7, 800bd40 <_strtoul_l.constprop.0+0xc8>
 800bd3e:	1e69      	subs	r1, r5, #1
 800bd40:	6011      	str	r1, [r2, #0]
 800bd42:	e7f5      	b.n	800bd30 <_strtoul_l.constprop.0+0xb8>
 800bd44:	2430      	movs	r4, #48	; 0x30
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1b5      	bne.n	800bcb6 <_strtoul_l.constprop.0+0x3e>
 800bd4a:	2308      	movs	r3, #8
 800bd4c:	e7b3      	b.n	800bcb6 <_strtoul_l.constprop.0+0x3e>
 800bd4e:	2c30      	cmp	r4, #48	; 0x30
 800bd50:	d0a9      	beq.n	800bca6 <_strtoul_l.constprop.0+0x2e>
 800bd52:	230a      	movs	r3, #10
 800bd54:	e7af      	b.n	800bcb6 <_strtoul_l.constprop.0+0x3e>
 800bd56:	bf00      	nop
 800bd58:	0800c1a7 	.word	0x0800c1a7

0800bd5c <_strtoul_r>:
 800bd5c:	f7ff bf8c 	b.w	800bc78 <_strtoul_l.constprop.0>

0800bd60 <__submore>:
 800bd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd64:	460c      	mov	r4, r1
 800bd66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bd68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd6c:	4299      	cmp	r1, r3
 800bd6e:	d11b      	bne.n	800bda8 <__submore+0x48>
 800bd70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bd74:	f000 f8be 	bl	800bef4 <_malloc_r>
 800bd78:	b918      	cbnz	r0, 800bd82 <__submore+0x22>
 800bd7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd86:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bd8c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bd92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bd96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bd9a:	7043      	strb	r3, [r0, #1]
 800bd9c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bda0:	7003      	strb	r3, [r0, #0]
 800bda2:	6020      	str	r0, [r4, #0]
 800bda4:	2000      	movs	r0, #0
 800bda6:	e7ea      	b.n	800bd7e <__submore+0x1e>
 800bda8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bdaa:	0077      	lsls	r7, r6, #1
 800bdac:	463a      	mov	r2, r7
 800bdae:	f000 f915 	bl	800bfdc <_realloc_r>
 800bdb2:	4605      	mov	r5, r0
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d0e0      	beq.n	800bd7a <__submore+0x1a>
 800bdb8:	eb00 0806 	add.w	r8, r0, r6
 800bdbc:	4601      	mov	r1, r0
 800bdbe:	4632      	mov	r2, r6
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	f7fe ffe1 	bl	800ad88 <memcpy>
 800bdc6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bdca:	f8c4 8000 	str.w	r8, [r4]
 800bdce:	e7e9      	b.n	800bda4 <__submore+0x44>

0800bdd0 <__retarget_lock_acquire_recursive>:
 800bdd0:	4770      	bx	lr

0800bdd2 <__retarget_lock_release_recursive>:
 800bdd2:	4770      	bx	lr

0800bdd4 <memchr>:
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	b510      	push	{r4, lr}
 800bdd8:	b2c9      	uxtb	r1, r1
 800bdda:	4402      	add	r2, r0
 800bddc:	4293      	cmp	r3, r2
 800bdde:	4618      	mov	r0, r3
 800bde0:	d101      	bne.n	800bde6 <memchr+0x12>
 800bde2:	2000      	movs	r0, #0
 800bde4:	e003      	b.n	800bdee <memchr+0x1a>
 800bde6:	7804      	ldrb	r4, [r0, #0]
 800bde8:	3301      	adds	r3, #1
 800bdea:	428c      	cmp	r4, r1
 800bdec:	d1f6      	bne.n	800bddc <memchr+0x8>
 800bdee:	bd10      	pop	{r4, pc}

0800bdf0 <memmove>:
 800bdf0:	4288      	cmp	r0, r1
 800bdf2:	b510      	push	{r4, lr}
 800bdf4:	eb01 0402 	add.w	r4, r1, r2
 800bdf8:	d902      	bls.n	800be00 <memmove+0x10>
 800bdfa:	4284      	cmp	r4, r0
 800bdfc:	4623      	mov	r3, r4
 800bdfe:	d807      	bhi.n	800be10 <memmove+0x20>
 800be00:	1e43      	subs	r3, r0, #1
 800be02:	42a1      	cmp	r1, r4
 800be04:	d008      	beq.n	800be18 <memmove+0x28>
 800be06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be0e:	e7f8      	b.n	800be02 <memmove+0x12>
 800be10:	4601      	mov	r1, r0
 800be12:	4402      	add	r2, r0
 800be14:	428a      	cmp	r2, r1
 800be16:	d100      	bne.n	800be1a <memmove+0x2a>
 800be18:	bd10      	pop	{r4, pc}
 800be1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be22:	e7f7      	b.n	800be14 <memmove+0x24>

0800be24 <_free_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	4605      	mov	r5, r0
 800be28:	2900      	cmp	r1, #0
 800be2a:	d040      	beq.n	800beae <_free_r+0x8a>
 800be2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be30:	1f0c      	subs	r4, r1, #4
 800be32:	2b00      	cmp	r3, #0
 800be34:	bfb8      	it	lt
 800be36:	18e4      	addlt	r4, r4, r3
 800be38:	f000 f910 	bl	800c05c <__malloc_lock>
 800be3c:	4a1c      	ldr	r2, [pc, #112]	; (800beb0 <_free_r+0x8c>)
 800be3e:	6813      	ldr	r3, [r2, #0]
 800be40:	b933      	cbnz	r3, 800be50 <_free_r+0x2c>
 800be42:	6063      	str	r3, [r4, #4]
 800be44:	6014      	str	r4, [r2, #0]
 800be46:	4628      	mov	r0, r5
 800be48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be4c:	f000 b90c 	b.w	800c068 <__malloc_unlock>
 800be50:	42a3      	cmp	r3, r4
 800be52:	d908      	bls.n	800be66 <_free_r+0x42>
 800be54:	6820      	ldr	r0, [r4, #0]
 800be56:	1821      	adds	r1, r4, r0
 800be58:	428b      	cmp	r3, r1
 800be5a:	bf01      	itttt	eq
 800be5c:	6819      	ldreq	r1, [r3, #0]
 800be5e:	685b      	ldreq	r3, [r3, #4]
 800be60:	1809      	addeq	r1, r1, r0
 800be62:	6021      	streq	r1, [r4, #0]
 800be64:	e7ed      	b.n	800be42 <_free_r+0x1e>
 800be66:	461a      	mov	r2, r3
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	b10b      	cbz	r3, 800be70 <_free_r+0x4c>
 800be6c:	42a3      	cmp	r3, r4
 800be6e:	d9fa      	bls.n	800be66 <_free_r+0x42>
 800be70:	6811      	ldr	r1, [r2, #0]
 800be72:	1850      	adds	r0, r2, r1
 800be74:	42a0      	cmp	r0, r4
 800be76:	d10b      	bne.n	800be90 <_free_r+0x6c>
 800be78:	6820      	ldr	r0, [r4, #0]
 800be7a:	4401      	add	r1, r0
 800be7c:	1850      	adds	r0, r2, r1
 800be7e:	4283      	cmp	r3, r0
 800be80:	6011      	str	r1, [r2, #0]
 800be82:	d1e0      	bne.n	800be46 <_free_r+0x22>
 800be84:	6818      	ldr	r0, [r3, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	4401      	add	r1, r0
 800be8a:	6011      	str	r1, [r2, #0]
 800be8c:	6053      	str	r3, [r2, #4]
 800be8e:	e7da      	b.n	800be46 <_free_r+0x22>
 800be90:	d902      	bls.n	800be98 <_free_r+0x74>
 800be92:	230c      	movs	r3, #12
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	e7d6      	b.n	800be46 <_free_r+0x22>
 800be98:	6820      	ldr	r0, [r4, #0]
 800be9a:	1821      	adds	r1, r4, r0
 800be9c:	428b      	cmp	r3, r1
 800be9e:	bf01      	itttt	eq
 800bea0:	6819      	ldreq	r1, [r3, #0]
 800bea2:	685b      	ldreq	r3, [r3, #4]
 800bea4:	1809      	addeq	r1, r1, r0
 800bea6:	6021      	streq	r1, [r4, #0]
 800bea8:	6063      	str	r3, [r4, #4]
 800beaa:	6054      	str	r4, [r2, #4]
 800beac:	e7cb      	b.n	800be46 <_free_r+0x22>
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	200013c8 	.word	0x200013c8

0800beb4 <sbrk_aligned>:
 800beb4:	b570      	push	{r4, r5, r6, lr}
 800beb6:	4e0e      	ldr	r6, [pc, #56]	; (800bef0 <sbrk_aligned+0x3c>)
 800beb8:	460c      	mov	r4, r1
 800beba:	6831      	ldr	r1, [r6, #0]
 800bebc:	4605      	mov	r5, r0
 800bebe:	b911      	cbnz	r1, 800bec6 <sbrk_aligned+0x12>
 800bec0:	f000 f8bc 	bl	800c03c <_sbrk_r>
 800bec4:	6030      	str	r0, [r6, #0]
 800bec6:	4621      	mov	r1, r4
 800bec8:	4628      	mov	r0, r5
 800beca:	f000 f8b7 	bl	800c03c <_sbrk_r>
 800bece:	1c43      	adds	r3, r0, #1
 800bed0:	d00a      	beq.n	800bee8 <sbrk_aligned+0x34>
 800bed2:	1cc4      	adds	r4, r0, #3
 800bed4:	f024 0403 	bic.w	r4, r4, #3
 800bed8:	42a0      	cmp	r0, r4
 800beda:	d007      	beq.n	800beec <sbrk_aligned+0x38>
 800bedc:	1a21      	subs	r1, r4, r0
 800bede:	4628      	mov	r0, r5
 800bee0:	f000 f8ac 	bl	800c03c <_sbrk_r>
 800bee4:	3001      	adds	r0, #1
 800bee6:	d101      	bne.n	800beec <sbrk_aligned+0x38>
 800bee8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800beec:	4620      	mov	r0, r4
 800beee:	bd70      	pop	{r4, r5, r6, pc}
 800bef0:	200013cc 	.word	0x200013cc

0800bef4 <_malloc_r>:
 800bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef8:	1ccd      	adds	r5, r1, #3
 800befa:	f025 0503 	bic.w	r5, r5, #3
 800befe:	3508      	adds	r5, #8
 800bf00:	2d0c      	cmp	r5, #12
 800bf02:	bf38      	it	cc
 800bf04:	250c      	movcc	r5, #12
 800bf06:	2d00      	cmp	r5, #0
 800bf08:	4607      	mov	r7, r0
 800bf0a:	db01      	blt.n	800bf10 <_malloc_r+0x1c>
 800bf0c:	42a9      	cmp	r1, r5
 800bf0e:	d905      	bls.n	800bf1c <_malloc_r+0x28>
 800bf10:	230c      	movs	r3, #12
 800bf12:	2600      	movs	r6, #0
 800bf14:	603b      	str	r3, [r7, #0]
 800bf16:	4630      	mov	r0, r6
 800bf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf1c:	4e2e      	ldr	r6, [pc, #184]	; (800bfd8 <_malloc_r+0xe4>)
 800bf1e:	f000 f89d 	bl	800c05c <__malloc_lock>
 800bf22:	6833      	ldr	r3, [r6, #0]
 800bf24:	461c      	mov	r4, r3
 800bf26:	bb34      	cbnz	r4, 800bf76 <_malloc_r+0x82>
 800bf28:	4629      	mov	r1, r5
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	f7ff ffc2 	bl	800beb4 <sbrk_aligned>
 800bf30:	1c43      	adds	r3, r0, #1
 800bf32:	4604      	mov	r4, r0
 800bf34:	d14d      	bne.n	800bfd2 <_malloc_r+0xde>
 800bf36:	6834      	ldr	r4, [r6, #0]
 800bf38:	4626      	mov	r6, r4
 800bf3a:	2e00      	cmp	r6, #0
 800bf3c:	d140      	bne.n	800bfc0 <_malloc_r+0xcc>
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	4631      	mov	r1, r6
 800bf42:	4638      	mov	r0, r7
 800bf44:	eb04 0803 	add.w	r8, r4, r3
 800bf48:	f000 f878 	bl	800c03c <_sbrk_r>
 800bf4c:	4580      	cmp	r8, r0
 800bf4e:	d13a      	bne.n	800bfc6 <_malloc_r+0xd2>
 800bf50:	6821      	ldr	r1, [r4, #0]
 800bf52:	3503      	adds	r5, #3
 800bf54:	1a6d      	subs	r5, r5, r1
 800bf56:	f025 0503 	bic.w	r5, r5, #3
 800bf5a:	3508      	adds	r5, #8
 800bf5c:	2d0c      	cmp	r5, #12
 800bf5e:	bf38      	it	cc
 800bf60:	250c      	movcc	r5, #12
 800bf62:	4638      	mov	r0, r7
 800bf64:	4629      	mov	r1, r5
 800bf66:	f7ff ffa5 	bl	800beb4 <sbrk_aligned>
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	d02b      	beq.n	800bfc6 <_malloc_r+0xd2>
 800bf6e:	6823      	ldr	r3, [r4, #0]
 800bf70:	442b      	add	r3, r5
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	e00e      	b.n	800bf94 <_malloc_r+0xa0>
 800bf76:	6822      	ldr	r2, [r4, #0]
 800bf78:	1b52      	subs	r2, r2, r5
 800bf7a:	d41e      	bmi.n	800bfba <_malloc_r+0xc6>
 800bf7c:	2a0b      	cmp	r2, #11
 800bf7e:	d916      	bls.n	800bfae <_malloc_r+0xba>
 800bf80:	1961      	adds	r1, r4, r5
 800bf82:	42a3      	cmp	r3, r4
 800bf84:	6025      	str	r5, [r4, #0]
 800bf86:	bf18      	it	ne
 800bf88:	6059      	strne	r1, [r3, #4]
 800bf8a:	6863      	ldr	r3, [r4, #4]
 800bf8c:	bf08      	it	eq
 800bf8e:	6031      	streq	r1, [r6, #0]
 800bf90:	5162      	str	r2, [r4, r5]
 800bf92:	604b      	str	r3, [r1, #4]
 800bf94:	4638      	mov	r0, r7
 800bf96:	f104 060b 	add.w	r6, r4, #11
 800bf9a:	f000 f865 	bl	800c068 <__malloc_unlock>
 800bf9e:	f026 0607 	bic.w	r6, r6, #7
 800bfa2:	1d23      	adds	r3, r4, #4
 800bfa4:	1af2      	subs	r2, r6, r3
 800bfa6:	d0b6      	beq.n	800bf16 <_malloc_r+0x22>
 800bfa8:	1b9b      	subs	r3, r3, r6
 800bfaa:	50a3      	str	r3, [r4, r2]
 800bfac:	e7b3      	b.n	800bf16 <_malloc_r+0x22>
 800bfae:	6862      	ldr	r2, [r4, #4]
 800bfb0:	42a3      	cmp	r3, r4
 800bfb2:	bf0c      	ite	eq
 800bfb4:	6032      	streq	r2, [r6, #0]
 800bfb6:	605a      	strne	r2, [r3, #4]
 800bfb8:	e7ec      	b.n	800bf94 <_malloc_r+0xa0>
 800bfba:	4623      	mov	r3, r4
 800bfbc:	6864      	ldr	r4, [r4, #4]
 800bfbe:	e7b2      	b.n	800bf26 <_malloc_r+0x32>
 800bfc0:	4634      	mov	r4, r6
 800bfc2:	6876      	ldr	r6, [r6, #4]
 800bfc4:	e7b9      	b.n	800bf3a <_malloc_r+0x46>
 800bfc6:	230c      	movs	r3, #12
 800bfc8:	4638      	mov	r0, r7
 800bfca:	603b      	str	r3, [r7, #0]
 800bfcc:	f000 f84c 	bl	800c068 <__malloc_unlock>
 800bfd0:	e7a1      	b.n	800bf16 <_malloc_r+0x22>
 800bfd2:	6025      	str	r5, [r4, #0]
 800bfd4:	e7de      	b.n	800bf94 <_malloc_r+0xa0>
 800bfd6:	bf00      	nop
 800bfd8:	200013c8 	.word	0x200013c8

0800bfdc <_realloc_r>:
 800bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	4614      	mov	r4, r2
 800bfe4:	460e      	mov	r6, r1
 800bfe6:	b921      	cbnz	r1, 800bff2 <_realloc_r+0x16>
 800bfe8:	4611      	mov	r1, r2
 800bfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfee:	f7ff bf81 	b.w	800bef4 <_malloc_r>
 800bff2:	b92a      	cbnz	r2, 800c000 <_realloc_r+0x24>
 800bff4:	f7ff ff16 	bl	800be24 <_free_r>
 800bff8:	4625      	mov	r5, r4
 800bffa:	4628      	mov	r0, r5
 800bffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c000:	f000 f838 	bl	800c074 <_malloc_usable_size_r>
 800c004:	4284      	cmp	r4, r0
 800c006:	4607      	mov	r7, r0
 800c008:	d802      	bhi.n	800c010 <_realloc_r+0x34>
 800c00a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c00e:	d812      	bhi.n	800c036 <_realloc_r+0x5a>
 800c010:	4621      	mov	r1, r4
 800c012:	4640      	mov	r0, r8
 800c014:	f7ff ff6e 	bl	800bef4 <_malloc_r>
 800c018:	4605      	mov	r5, r0
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d0ed      	beq.n	800bffa <_realloc_r+0x1e>
 800c01e:	42bc      	cmp	r4, r7
 800c020:	4622      	mov	r2, r4
 800c022:	4631      	mov	r1, r6
 800c024:	bf28      	it	cs
 800c026:	463a      	movcs	r2, r7
 800c028:	f7fe feae 	bl	800ad88 <memcpy>
 800c02c:	4631      	mov	r1, r6
 800c02e:	4640      	mov	r0, r8
 800c030:	f7ff fef8 	bl	800be24 <_free_r>
 800c034:	e7e1      	b.n	800bffa <_realloc_r+0x1e>
 800c036:	4635      	mov	r5, r6
 800c038:	e7df      	b.n	800bffa <_realloc_r+0x1e>
	...

0800c03c <_sbrk_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	2300      	movs	r3, #0
 800c040:	4d05      	ldr	r5, [pc, #20]	; (800c058 <_sbrk_r+0x1c>)
 800c042:	4604      	mov	r4, r0
 800c044:	4608      	mov	r0, r1
 800c046:	602b      	str	r3, [r5, #0]
 800c048:	f7f5 f80a 	bl	8001060 <_sbrk>
 800c04c:	1c43      	adds	r3, r0, #1
 800c04e:	d102      	bne.n	800c056 <_sbrk_r+0x1a>
 800c050:	682b      	ldr	r3, [r5, #0]
 800c052:	b103      	cbz	r3, 800c056 <_sbrk_r+0x1a>
 800c054:	6023      	str	r3, [r4, #0]
 800c056:	bd38      	pop	{r3, r4, r5, pc}
 800c058:	200013c0 	.word	0x200013c0

0800c05c <__malloc_lock>:
 800c05c:	4801      	ldr	r0, [pc, #4]	; (800c064 <__malloc_lock+0x8>)
 800c05e:	f7ff beb7 	b.w	800bdd0 <__retarget_lock_acquire_recursive>
 800c062:	bf00      	nop
 800c064:	200013c4 	.word	0x200013c4

0800c068 <__malloc_unlock>:
 800c068:	4801      	ldr	r0, [pc, #4]	; (800c070 <__malloc_unlock+0x8>)
 800c06a:	f7ff beb2 	b.w	800bdd2 <__retarget_lock_release_recursive>
 800c06e:	bf00      	nop
 800c070:	200013c4 	.word	0x200013c4

0800c074 <_malloc_usable_size_r>:
 800c074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c078:	1f18      	subs	r0, r3, #4
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	bfbc      	itt	lt
 800c07e:	580b      	ldrlt	r3, [r1, r0]
 800c080:	18c0      	addlt	r0, r0, r3
 800c082:	4770      	bx	lr

0800c084 <_init>:
 800c084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c086:	bf00      	nop
 800c088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08a:	bc08      	pop	{r3}
 800c08c:	469e      	mov	lr, r3
 800c08e:	4770      	bx	lr

0800c090 <_fini>:
 800c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c092:	bf00      	nop
 800c094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c096:	bc08      	pop	{r3}
 800c098:	469e      	mov	lr, r3
 800c09a:	4770      	bx	lr
