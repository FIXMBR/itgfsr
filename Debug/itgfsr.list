
itgfsr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b184  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800b290  0800b290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b37c  0800b37c  000203ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800b37c  0800b37c  000203ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b37c  0800b37c  000203ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b37c  0800b37c  0001b37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b380  0800b380  0001b380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003ac  20000000  0800b384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc8  200003ac  0800b730  000203ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20001174  0800b730  00021174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018458  00000000  00000000  000203d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000432c  00000000  00000000  0003882d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ced7  00000000  00000000  0003f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6b2  00000000  00000000  0005bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000942c9  00000000  00000000  00076621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a8ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000533c  00000000  00000000  0010a93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200003ac 	.word	0x200003ac
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b278 	.word	0x0800b278

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200003b0 	.word	0x200003b0
 8000148:	0800b278 	.word	0x0800b278

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b58      	ldr	r3, [pc, #352]	; (80002c0 <MX_ADC1_Init+0x174>)
 800015e:	4a59      	ldr	r2, [pc, #356]	; (80002c4 <MX_ADC1_Init+0x178>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b57      	ldr	r3, [pc, #348]	; (80002c0 <MX_ADC1_Init+0x174>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800016a:	4b55      	ldr	r3, [pc, #340]	; (80002c0 <MX_ADC1_Init+0x174>)
 800016c:	2200      	movs	r2, #0
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b53      	ldr	r3, [pc, #332]	; (80002c0 <MX_ADC1_Init+0x174>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b52      	ldr	r3, [pc, #328]	; (80002c0 <MX_ADC1_Init+0x174>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b50      	ldr	r3, [pc, #320]	; (80002c0 <MX_ADC1_Init+0x174>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8000184:	4b4e      	ldr	r3, [pc, #312]	; (80002c0 <MX_ADC1_Init+0x174>)
 8000186:	220a      	movs	r2, #10
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	484d      	ldr	r0, [pc, #308]	; (80002c0 <MX_ADC1_Init+0x174>)
 800018c:	f000 fec2 	bl	8000f14 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fc93 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a2:	2300      	movs	r3, #0
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4845      	ldr	r0, [pc, #276]	; (80002c0 <MX_ADC1_Init+0x174>)
 80001ac:	f001 f992 	bl	80014d4 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fc83 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ba:	2301      	movs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	483e      	ldr	r0, [pc, #248]	; (80002c0 <MX_ADC1_Init+0x174>)
 80001c8:	f001 f984 	bl	80014d4 <HAL_ADC_ConfigChannel>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d2:	f000 fc75 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001d6:	2302      	movs	r3, #2
 80001d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001da:	2303      	movs	r3, #3
 80001dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4619      	mov	r1, r3
 80001e2:	4837      	ldr	r0, [pc, #220]	; (80002c0 <MX_ADC1_Init+0x174>)
 80001e4:	f001 f976 	bl	80014d4 <HAL_ADC_ConfigChannel>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001ee:	f000 fc67 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80001f2:	2303      	movs	r3, #3
 80001f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001f6:	2304      	movs	r3, #4
 80001f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4619      	mov	r1, r3
 80001fe:	4830      	ldr	r0, [pc, #192]	; (80002c0 <MX_ADC1_Init+0x174>)
 8000200:	f001 f968 	bl	80014d4 <HAL_ADC_ConfigChannel>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800020a:	f000 fc59 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800020e:	2304      	movs	r3, #4
 8000210:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000212:	2305      	movs	r3, #5
 8000214:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	4829      	ldr	r0, [pc, #164]	; (80002c0 <MX_ADC1_Init+0x174>)
 800021c:	f001 f95a 	bl	80014d4 <HAL_ADC_ConfigChannel>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000226:	f000 fc4b 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800022a:	2305      	movs	r3, #5
 800022c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800022e:	2306      	movs	r3, #6
 8000230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4619      	mov	r1, r3
 8000236:	4822      	ldr	r0, [pc, #136]	; (80002c0 <MX_ADC1_Init+0x174>)
 8000238:	f001 f94c 	bl	80014d4 <HAL_ADC_ConfigChannel>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000242:	f000 fc3d 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000246:	2306      	movs	r3, #6
 8000248:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800024a:	2307      	movs	r3, #7
 800024c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4619      	mov	r1, r3
 8000252:	481b      	ldr	r0, [pc, #108]	; (80002c0 <MX_ADC1_Init+0x174>)
 8000254:	f001 f93e 	bl	80014d4 <HAL_ADC_ConfigChannel>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800025e:	f000 fc2f 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000262:	2307      	movs	r3, #7
 8000264:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000266:	2308      	movs	r3, #8
 8000268:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4814      	ldr	r0, [pc, #80]	; (80002c0 <MX_ADC1_Init+0x174>)
 8000270:	f001 f930 	bl	80014d4 <HAL_ADC_ConfigChannel>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800027a:	f000 fc21 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800027e:	2308      	movs	r3, #8
 8000280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000282:	2309      	movs	r3, #9
 8000284:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4619      	mov	r1, r3
 800028a:	480d      	ldr	r0, [pc, #52]	; (80002c0 <MX_ADC1_Init+0x174>)
 800028c:	f001 f922 	bl	80014d4 <HAL_ADC_ConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000296:	f000 fc13 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800029a:	2309      	movs	r3, #9
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800029e:	230a      	movs	r3, #10
 80002a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <MX_ADC1_Init+0x174>)
 80002a8:	f001 f914 	bl	80014d4 <HAL_ADC_ConfigChannel>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 80002b2:	f000 fc05 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	200003c8 	.word	0x200003c8
 80002c4:	40012400 	.word	0x40012400

080002c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d0:	f107 0318 	add.w	r3, r7, #24
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a37      	ldr	r2, [pc, #220]	; (80003c0 <HAL_ADC_MspInit+0xf8>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d167      	bne.n	80003b8 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002e8:	4b36      	ldr	r3, [pc, #216]	; (80003c4 <HAL_ADC_MspInit+0xfc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a35      	ldr	r2, [pc, #212]	; (80003c4 <HAL_ADC_MspInit+0xfc>)
 80002ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b33      	ldr	r3, [pc, #204]	; (80003c4 <HAL_ADC_MspInit+0xfc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002fc:	617b      	str	r3, [r7, #20]
 80002fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000300:	4b30      	ldr	r3, [pc, #192]	; (80003c4 <HAL_ADC_MspInit+0xfc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a2f      	ldr	r2, [pc, #188]	; (80003c4 <HAL_ADC_MspInit+0xfc>)
 8000306:	f043 0304 	orr.w	r3, r3, #4
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <HAL_ADC_MspInit+0xfc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0304 	and.w	r3, r3, #4
 8000314:	613b      	str	r3, [r7, #16]
 8000316:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000318:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <HAL_ADC_MspInit+0xfc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <HAL_ADC_MspInit+0xfc>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <HAL_ADC_MspInit+0xfc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0308 	and.w	r3, r3, #8
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000330:	23ff      	movs	r3, #255	; 0xff
 8000332:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000334:	2303      	movs	r3, #3
 8000336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000338:	f107 0318 	add.w	r3, r7, #24
 800033c:	4619      	mov	r1, r3
 800033e:	4822      	ldr	r0, [pc, #136]	; (80003c8 <HAL_ADC_MspInit+0x100>)
 8000340:	f001 fe00 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000344:	2303      	movs	r3, #3
 8000346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000348:	2303      	movs	r3, #3
 800034a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034c:	f107 0318 	add.w	r3, r7, #24
 8000350:	4619      	mov	r1, r3
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <HAL_ADC_MspInit+0x104>)
 8000354:	f001 fdf6 	bl	8001f44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000358:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 800035a:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <HAL_ADC_MspInit+0x10c>)
 800035c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800035e:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 8000360:	2200      	movs	r2, #0
 8000362:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 800036c:	2280      	movs	r2, #128	; 0x80
 800036e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000370:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 8000372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000376:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 800037a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800037e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000386:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800038c:	4810      	ldr	r0, [pc, #64]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 800038e:	f001 fbb1 	bl	8001af4 <HAL_DMA_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000398:	f000 fb92 	bl	8000ac0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 80003a0:	621a      	str	r2, [r3, #32]
 80003a2:	4a0b      	ldr	r2, [pc, #44]	; (80003d0 <HAL_ADC_MspInit+0x108>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2012      	movs	r0, #18
 80003ae:	f001 fb6a 	bl	8001a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80003b2:	2012      	movs	r0, #18
 80003b4:	f001 fb83 	bl	8001abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003b8:	bf00      	nop
 80003ba:	3728      	adds	r7, #40	; 0x28
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40012400 	.word	0x40012400
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800
 80003cc:	40010c00 	.word	0x40010c00
 80003d0:	200003f8 	.word	0x200003f8
 80003d4:	40020008 	.word	0x40020008

080003d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_DMA_Init+0x38>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <MX_DMA_Init+0x38>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_DMA_Init+0x38>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	200b      	movs	r0, #11
 80003fc:	f001 fb43 	bl	8001a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000400:	200b      	movs	r0, #11
 8000402:	f001 fb5c 	bl	8001abe <HAL_NVIC_EnableIRQ>

}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <MX_GPIO_Init+0x90>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <MX_GPIO_Init+0x90>)
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0320 	and.w	r3, r3, #32
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <MX_GPIO_Init+0x90>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_GPIO_Init+0x90>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0308 	and.w	r3, r3, #8
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Output_1_Pin|Output_2_Pin|Output_3_Pin|Output_4_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000476:	480c      	ldr	r0, [pc, #48]	; (80004a8 <MX_GPIO_Init+0x94>)
 8000478:	f001 fee8 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Output_1_Pin|Output_2_Pin|Output_3_Pin|Output_4_Pin;
 800047c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2302      	movs	r3, #2
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4804      	ldr	r0, [pc, #16]	; (80004a8 <MX_GPIO_Init+0x94>)
 8000496:	f001 fd55 	bl	8001f44 <HAL_GPIO_Init>

}
 800049a:	bf00      	nop
 800049c:	3720      	adds	r7, #32
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010c00 	.word	0x40010c00

080004ac <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	//	CDC_Transmit(0,"gowno", sizeof("gowno"));
	//	ground_id=69;
	debug_var++;
 80004b4:	4b31      	ldr	r3, [pc, #196]	; (800057c <HAL_ADC_ConvCpltCallback+0xd0>)
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	3301      	adds	r3, #1
 80004bc:	b29a      	uxth	r2, r3
 80004be:	4b2f      	ldr	r3, [pc, #188]	; (800057c <HAL_ADC_ConvCpltCallback+0xd0>)
 80004c0:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 80004c2:	482f      	ldr	r0, [pc, #188]	; (8000580 <HAL_ADC_ConvCpltCallback+0xd4>)
 80004c4:	f000 fedc 	bl	8001280 <HAL_ADC_Stop_DMA>
	switch (ground_id) {
 80004c8:	4b2e      	ldr	r3, [pc, #184]	; (8000584 <HAL_ADC_ConvCpltCallback+0xd8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	3b01      	subs	r3, #1
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d84f      	bhi.n	8000574 <HAL_ADC_ConvCpltCallback+0xc8>
 80004d4:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <HAL_ADC_ConvCpltCallback+0x30>)
 80004d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004da:	bf00      	nop
 80004dc:	080004ed 	.word	0x080004ed
 80004e0:	0800050f 	.word	0x0800050f
 80004e4:	08000531 	.word	0x08000531
 80004e8:	08000553 	.word	0x08000553
	case 1:
		HAL_GPIO_Init(Output_1_GPIO_Port, &Output_1_in);
 80004ec:	4926      	ldr	r1, [pc, #152]	; (8000588 <HAL_ADC_ConvCpltCallback+0xdc>)
 80004ee:	4827      	ldr	r0, [pc, #156]	; (800058c <HAL_ADC_ConvCpltCallback+0xe0>)
 80004f0:	f001 fd28 	bl	8001f44 <HAL_GPIO_Init>
		HAL_GPIO_Init(Output_2_GPIO_Port, &Output_2_out);
 80004f4:	4926      	ldr	r1, [pc, #152]	; (8000590 <HAL_ADC_ConvCpltCallback+0xe4>)
 80004f6:	4825      	ldr	r0, [pc, #148]	; (800058c <HAL_ADC_ConvCpltCallback+0xe0>)
 80004f8:	f001 fd24 	bl	8001f44 <HAL_GPIO_Init>
		ground_id=2;
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <HAL_ADC_ConvCpltCallback+0xd8>)
 80004fe:	2202      	movs	r2, #2
 8000500:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, &adc_results_2, 10);
 8000502:	220a      	movs	r2, #10
 8000504:	4923      	ldr	r1, [pc, #140]	; (8000594 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000506:	481e      	ldr	r0, [pc, #120]	; (8000580 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000508:	f000 fddc 	bl	80010c4 <HAL_ADC_Start_DMA>
		break;
 800050c:	e032      	b.n	8000574 <HAL_ADC_ConvCpltCallback+0xc8>
	case 2:
		HAL_GPIO_Init(Output_2_GPIO_Port, &Output_2_in);
 800050e:	4922      	ldr	r1, [pc, #136]	; (8000598 <HAL_ADC_ConvCpltCallback+0xec>)
 8000510:	481e      	ldr	r0, [pc, #120]	; (800058c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000512:	f001 fd17 	bl	8001f44 <HAL_GPIO_Init>
		HAL_GPIO_Init(Output_3_GPIO_Port, &Output_3_out);
 8000516:	4921      	ldr	r1, [pc, #132]	; (800059c <HAL_ADC_ConvCpltCallback+0xf0>)
 8000518:	481c      	ldr	r0, [pc, #112]	; (800058c <HAL_ADC_ConvCpltCallback+0xe0>)
 800051a:	f001 fd13 	bl	8001f44 <HAL_GPIO_Init>
		ground_id=3;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000520:	2203      	movs	r2, #3
 8000522:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, &adc_results_3, 10);
 8000524:	220a      	movs	r2, #10
 8000526:	491e      	ldr	r1, [pc, #120]	; (80005a0 <HAL_ADC_ConvCpltCallback+0xf4>)
 8000528:	4815      	ldr	r0, [pc, #84]	; (8000580 <HAL_ADC_ConvCpltCallback+0xd4>)
 800052a:	f000 fdcb 	bl	80010c4 <HAL_ADC_Start_DMA>
		break;
 800052e:	e021      	b.n	8000574 <HAL_ADC_ConvCpltCallback+0xc8>
	case 3:
		HAL_GPIO_Init(Output_3_GPIO_Port, &Output_3_in);
 8000530:	491c      	ldr	r1, [pc, #112]	; (80005a4 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000532:	4816      	ldr	r0, [pc, #88]	; (800058c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000534:	f001 fd06 	bl	8001f44 <HAL_GPIO_Init>
		HAL_GPIO_Init(Output_4_GPIO_Port, &Output_4_out);
 8000538:	491b      	ldr	r1, [pc, #108]	; (80005a8 <HAL_ADC_ConvCpltCallback+0xfc>)
 800053a:	4814      	ldr	r0, [pc, #80]	; (800058c <HAL_ADC_ConvCpltCallback+0xe0>)
 800053c:	f001 fd02 	bl	8001f44 <HAL_GPIO_Init>
		ground_id=4;
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000542:	2204      	movs	r2, #4
 8000544:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, &adc_results_4, 10);
 8000546:	220a      	movs	r2, #10
 8000548:	4918      	ldr	r1, [pc, #96]	; (80005ac <HAL_ADC_ConvCpltCallback+0x100>)
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <HAL_ADC_ConvCpltCallback+0xd4>)
 800054c:	f000 fdba 	bl	80010c4 <HAL_ADC_Start_DMA>
		break;
 8000550:	e010      	b.n	8000574 <HAL_ADC_ConvCpltCallback+0xc8>
	case 4:
		HAL_GPIO_Init(Output_4_GPIO_Port, &Output_4_in);
 8000552:	4917      	ldr	r1, [pc, #92]	; (80005b0 <HAL_ADC_ConvCpltCallback+0x104>)
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000556:	f001 fcf5 	bl	8001f44 <HAL_GPIO_Init>
		HAL_GPIO_Init(Output_1_GPIO_Port, &Output_1_out);
 800055a:	4916      	ldr	r1, [pc, #88]	; (80005b4 <HAL_ADC_ConvCpltCallback+0x108>)
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <HAL_ADC_ConvCpltCallback+0xe0>)
 800055e:	f001 fcf1 	bl	8001f44 <HAL_GPIO_Init>
		ground_id=1;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc1, &adc_results_1, 10);
 8000568:	220a      	movs	r2, #10
 800056a:	4913      	ldr	r1, [pc, #76]	; (80005b8 <HAL_ADC_ConvCpltCallback+0x10c>)
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <HAL_ADC_ConvCpltCallback+0xd4>)
 800056e:	f000 fda9 	bl	80010c4 <HAL_ADC_Start_DMA>
		break;
 8000572:	bf00      	nop
	}
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000049e 	.word	0x2000049e
 8000580:	200003c8 	.word	0x200003c8
 8000584:	20000000 	.word	0x20000000
 8000588:	200004ac 	.word	0x200004ac
 800058c:	40010c00 	.word	0x40010c00
 8000590:	200004dc 	.word	0x200004dc
 8000594:	20000458 	.word	0x20000458
 8000598:	200004cc 	.word	0x200004cc
 800059c:	200004fc 	.word	0x200004fc
 80005a0:	2000046c 	.word	0x2000046c
 80005a4:	200004ec 	.word	0x200004ec
 80005a8:	2000051c 	.word	0x2000051c
 80005ac:	20000480 	.word	0x20000480
 80005b0:	2000050c 	.word	0x2000050c
 80005b4:	200004bc 	.word	0x200004bc
 80005b8:	20000444 	.word	0x20000444

080005bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005cc:	f040 809a 	bne.w	8000704 <HAL_TIM_PeriodElapsedCallback+0x148>
		for (int i = 0; i < 9; ++i) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	e082      	b.n	80006dc <HAL_TIM_PeriodElapsedCallback+0x120>
			sensors_states[i]=0;
 80005d6:	4a4d      	ldr	r2, [pc, #308]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4413      	add	r3, r2
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 4; ++j) {
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	e074      	b.n	80006d0 <HAL_TIM_PeriodElapsedCallback+0x114>
				switch (j) {
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d86e      	bhi.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x10e>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000605 	.word	0x08000605
 80005f8:	08000633 	.word	0x08000633
 80005fc:	08000661 	.word	0x08000661
 8000600:	0800068f 	.word	0x0800068f
				case 0:
					//					sprintf(msg, "%hu ", adc_results_1[j]);
					//					CDC_Transmit(0,msg, sizeof(msg));
					if(sensor_treshholds[i+j*10]>adc_results_1[i]){
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	4a3e      	ldr	r2, [pc, #248]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000616:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800061a:	493e      	ldr	r1, [pc, #248]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000622:	429a      	cmp	r2, r3
 8000624:	d94a      	bls.n	80006bc <HAL_TIM_PeriodElapsedCallback+0x100>
						sensors_states[i]=1;
 8000626:	4a39      	ldr	r2, [pc, #228]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
						//						sprintf(msg, "%hu ", adc_results_1[j]);
						//											CDC_Transmit(0,msg, sizeof(msg));
					}
					break;
 8000630:	e044      	b.n	80006bc <HAL_TIM_PeriodElapsedCallback+0x100>
				case 1:
					//					sprintf(msg, "%hu ", adc_results_2[j]);
					//					CDC_Transmit(0,msg, sizeof(msg));
					if(sensor_treshholds[i+j*10]>adc_results_2[i]){
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	461a      	mov	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	4413      	add	r3, r2
 8000642:	4a33      	ldr	r2, [pc, #204]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000644:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000648:	4933      	ldr	r1, [pc, #204]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000650:	429a      	cmp	r2, r3
 8000652:	d935      	bls.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x104>
						sensors_states[i]=1;
 8000654:	4a2d      	ldr	r2, [pc, #180]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	4413      	add	r3, r2
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
						//						sprintf(msg, "%hu ", adc_results_2[j]);
						//											CDC_Transmit(0,msg, sizeof(msg));
					}

					break;
 800065e:	e02f      	b.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x104>
				case 2:
					//					sprintf(msg, "%hu ", adc_results_3[j]);
					//					CDC_Transmit(0,msg, sizeof(msg));
					if(sensor_treshholds[i+j*10]>adc_results_3[i]){
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	461a      	mov	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000672:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000676:	4929      	ldr	r1, [pc, #164]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800067e:	429a      	cmp	r2, r3
 8000680:	d920      	bls.n	80006c4 <HAL_TIM_PeriodElapsedCallback+0x108>
						sensors_states[i]=1;
 8000682:	4a22      	ldr	r2, [pc, #136]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
						//											sprintf(msg, "%hu ", adc_results_3[j]);
						//											CDC_Transmit(0,msg, sizeof(msg));
					}
					break;
 800068c:	e01a      	b.n	80006c4 <HAL_TIM_PeriodElapsedCallback+0x108>
				case 3:
					//					sprintf(msg, "%hu ", adc_results_4[j]);
					//					CDC_Transmit(0,msg, sizeof(msg));
					if(sensor_treshholds[i+j*10]>adc_results_4[i]){
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	461a      	mov	r2, r3
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	4413      	add	r3, r2
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80006a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006a4:	491e      	ldr	r1, [pc, #120]	; (8000720 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d90b      	bls.n	80006c8 <HAL_TIM_PeriodElapsedCallback+0x10c>
						sensors_states[i]=1;
 80006b0:	4a16      	ldr	r2, [pc, #88]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4413      	add	r3, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
						//						sprintf(msg, "%hu ", adc_results_4[j]);
						//											CDC_Transmit(0,msg, sizeof(msg));
					}
					break;
 80006ba:	e005      	b.n	80006c8 <HAL_TIM_PeriodElapsedCallback+0x10c>
					break;
 80006bc:	bf00      	nop
 80006be:	e004      	b.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x10e>
					break;
 80006c0:	bf00      	nop
 80006c2:	e002      	b.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x10e>
					break;
 80006c4:	bf00      	nop
 80006c6:	e000      	b.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x10e>
					break;
 80006c8:	bf00      	nop
			for (int j = 0; j < 4; ++j) {
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3301      	adds	r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	dd87      	ble.n	80005e6 <HAL_TIM_PeriodElapsedCallback+0x2a>
		for (int i = 0; i < 9; ++i) {
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b08      	cmp	r3, #8
 80006e0:	f77f af79 	ble.w	80005d6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		//					}
		//				}
		//			}
		//		}

		if(sensors_states[0]==1){
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x150>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d103      	bne.n	80006f4 <HAL_TIM_PeriodElapsedCallback+0x138>
//			keyBoardHIDsub[2]=sensors_keymap[0];
			keyBoardHIDsub[2]=0x05;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80006ee:	2205      	movs	r2, #5
 80006f0:	709a      	strb	r2, [r3, #2]
 80006f2:	e002      	b.n	80006fa <HAL_TIM_PeriodElapsedCallback+0x13e>
		}else{
			keyBoardHIDsub[2]=0x00;
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	709a      	strb	r2, [r3, #2]
		}


		USBD_HID_Keybaord_SendReport(&hUsbDevice, &keyBoardHIDsub, sizeof(keyBoardHIDsub));
 80006fa:	2208      	movs	r2, #8
 80006fc:	4909      	ldr	r1, [pc, #36]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000700:	f008 fcf6 	bl	80090f0 <USBD_HID_Keybaord_SendReport>
	}
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200004a0 	.word	0x200004a0
 8000710:	20000004 	.word	0x20000004
 8000714:	20000444 	.word	0x20000444
 8000718:	20000458 	.word	0x20000458
 800071c:	2000046c 	.word	0x2000046c
 8000720:	20000480 	.word	0x20000480
 8000724:	2000043c 	.word	0x2000043c
 8000728:	20000868 	.word	0x20000868

0800072c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	int volatile jajco = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000736:	f000 fb67 	bl	8000e08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800073a:	f000 f963 	bl	8000a04 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800073e:	f7ff fe69 	bl	8000414 <MX_GPIO_Init>
	MX_DMA_Init();
 8000742:	f7ff fe49 	bl	80003d8 <MX_DMA_Init>
	MX_ADC1_Init();
 8000746:	f7ff fd01 	bl	800014c <MX_ADC1_Init>
	MX_USB_PCD_Init();
 800074a:	f000 fae7 	bl	8000d1c <MX_USB_PCD_Init>
	MX_TIM2_Init();
 800074e:	f000 fa75 	bl	8000c3c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	Output_1_in.Pin=Output_1_Pin;
 8000752:	4b95      	ldr	r3, [pc, #596]	; (80009a8 <main+0x27c>)
 8000754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000758:	601a      	str	r2, [r3, #0]
	Output_1_in.Mode=GPIO_MODE_INPUT;
 800075a:	4b93      	ldr	r3, [pc, #588]	; (80009a8 <main+0x27c>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
	Output_1_in.Pull=GPIO_NOPULL;
 8000760:	4b91      	ldr	r3, [pc, #580]	; (80009a8 <main+0x27c>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
	Output_1_in.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	4b90      	ldr	r3, [pc, #576]	; (80009a8 <main+0x27c>)
 8000768:	2202      	movs	r2, #2
 800076a:	60da      	str	r2, [r3, #12]
	Output_1_out.Pin=Output_1_Pin;
 800076c:	4b8f      	ldr	r3, [pc, #572]	; (80009ac <main+0x280>)
 800076e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000772:	601a      	str	r2, [r3, #0]
	Output_1_out.Mode=GPIO_MODE_OUTPUT_PP;
 8000774:	4b8d      	ldr	r3, [pc, #564]	; (80009ac <main+0x280>)
 8000776:	2201      	movs	r2, #1
 8000778:	605a      	str	r2, [r3, #4]
	Output_1_out.Pull=GPIO_NOPULL;
 800077a:	4b8c      	ldr	r3, [pc, #560]	; (80009ac <main+0x280>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
	Output_1_out.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	4b8a      	ldr	r3, [pc, #552]	; (80009ac <main+0x280>)
 8000782:	2202      	movs	r2, #2
 8000784:	60da      	str	r2, [r3, #12]
	Output_2_in.Pin=Output_2_Pin;
 8000786:	4b8a      	ldr	r3, [pc, #552]	; (80009b0 <main+0x284>)
 8000788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078c:	601a      	str	r2, [r3, #0]
	Output_2_in.Mode=GPIO_MODE_INPUT;
 800078e:	4b88      	ldr	r3, [pc, #544]	; (80009b0 <main+0x284>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
	Output_2_in.Pull=GPIO_NOPULL;
 8000794:	4b86      	ldr	r3, [pc, #536]	; (80009b0 <main+0x284>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
	Output_2_in.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	4b85      	ldr	r3, [pc, #532]	; (80009b0 <main+0x284>)
 800079c:	2202      	movs	r2, #2
 800079e:	60da      	str	r2, [r3, #12]
	Output_2_out.Pin=Output_2_Pin;
 80007a0:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <main+0x288>)
 80007a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a6:	601a      	str	r2, [r3, #0]
	Output_2_out.Mode=GPIO_MODE_OUTPUT_PP;
 80007a8:	4b82      	ldr	r3, [pc, #520]	; (80009b4 <main+0x288>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	605a      	str	r2, [r3, #4]
	Output_2_out.Pull=GPIO_NOPULL;
 80007ae:	4b81      	ldr	r3, [pc, #516]	; (80009b4 <main+0x288>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
	Output_2_out.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <main+0x288>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	60da      	str	r2, [r3, #12]
	Output_3_in.Pin=Output_3_Pin;
 80007ba:	4b7f      	ldr	r3, [pc, #508]	; (80009b8 <main+0x28c>)
 80007bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c0:	601a      	str	r2, [r3, #0]
	Output_3_in.Mode=GPIO_MODE_INPUT;
 80007c2:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <main+0x28c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
	Output_3_in.Pull=GPIO_NOPULL;
 80007c8:	4b7b      	ldr	r3, [pc, #492]	; (80009b8 <main+0x28c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
	Output_3_in.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	4b7a      	ldr	r3, [pc, #488]	; (80009b8 <main+0x28c>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	60da      	str	r2, [r3, #12]
	Output_3_out.Pin=Output_3_Pin;
 80007d4:	4b79      	ldr	r3, [pc, #484]	; (80009bc <main+0x290>)
 80007d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007da:	601a      	str	r2, [r3, #0]
	Output_3_out.Mode=GPIO_MODE_OUTPUT_PP;
 80007dc:	4b77      	ldr	r3, [pc, #476]	; (80009bc <main+0x290>)
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
	Output_3_out.Pull=GPIO_NOPULL;
 80007e2:	4b76      	ldr	r3, [pc, #472]	; (80009bc <main+0x290>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
	Output_3_out.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	4b74      	ldr	r3, [pc, #464]	; (80009bc <main+0x290>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	60da      	str	r2, [r3, #12]
	Output_4_in.Pin=Output_4_Pin;
 80007ee:	4b74      	ldr	r3, [pc, #464]	; (80009c0 <main+0x294>)
 80007f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007f4:	601a      	str	r2, [r3, #0]
	Output_4_in.Mode=GPIO_MODE_INPUT;
 80007f6:	4b72      	ldr	r3, [pc, #456]	; (80009c0 <main+0x294>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
	Output_4_in.Pull=GPIO_NOPULL;
 80007fc:	4b70      	ldr	r3, [pc, #448]	; (80009c0 <main+0x294>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
	Output_4_in.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	4b6f      	ldr	r3, [pc, #444]	; (80009c0 <main+0x294>)
 8000804:	2202      	movs	r2, #2
 8000806:	60da      	str	r2, [r3, #12]
	Output_4_out.Pin=Output_4_Pin;
 8000808:	4b6e      	ldr	r3, [pc, #440]	; (80009c4 <main+0x298>)
 800080a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800080e:	601a      	str	r2, [r3, #0]
	Output_4_out.Mode=GPIO_MODE_OUTPUT_PP;
 8000810:	4b6c      	ldr	r3, [pc, #432]	; (80009c4 <main+0x298>)
 8000812:	2201      	movs	r2, #1
 8000814:	605a      	str	r2, [r3, #4]
	Output_4_out.Pull=GPIO_NOPULL;
 8000816:	4b6b      	ldr	r3, [pc, #428]	; (80009c4 <main+0x298>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
	Output_4_out.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	4b69      	ldr	r3, [pc, #420]	; (80009c4 <main+0x298>)
 800081e:	2202      	movs	r2, #2
 8000820:	60da      	str	r2, [r3, #12]


	MX_USB_DEVICE_Init();
 8000822:	f007 f85d 	bl	80078e0 <MX_USB_DEVICE_Init>
	HAL_GPIO_Init(GPIOB, &Output_1_out);
 8000826:	4961      	ldr	r1, [pc, #388]	; (80009ac <main+0x280>)
 8000828:	4867      	ldr	r0, [pc, #412]	; (80009c8 <main+0x29c>)
 800082a:	f001 fb8b 	bl	8001f44 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &Output_2_out);
 800082e:	4961      	ldr	r1, [pc, #388]	; (80009b4 <main+0x288>)
 8000830:	4865      	ldr	r0, [pc, #404]	; (80009c8 <main+0x29c>)
 8000832:	f001 fb87 	bl	8001f44 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &Output_3_out);
 8000836:	4961      	ldr	r1, [pc, #388]	; (80009bc <main+0x290>)
 8000838:	4863      	ldr	r0, [pc, #396]	; (80009c8 <main+0x29c>)
 800083a:	f001 fb83 	bl	8001f44 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &Output_4_out);
 800083e:	4961      	ldr	r1, [pc, #388]	; (80009c4 <main+0x298>)
 8000840:	4861      	ldr	r0, [pc, #388]	; (80009c8 <main+0x29c>)
 8000842:	f001 fb7f 	bl	8001f44 <HAL_GPIO_Init>
	HAL_ADC_Start_DMA(&hadc1, &adc_results_1, 10);
 8000846:	220a      	movs	r2, #10
 8000848:	4960      	ldr	r1, [pc, #384]	; (80009cc <main+0x2a0>)
 800084a:	4861      	ldr	r0, [pc, #388]	; (80009d0 <main+0x2a4>)
 800084c:	f000 fc3a 	bl	80010c4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8000850:	4860      	ldr	r0, [pc, #384]	; (80009d4 <main+0x2a8>)
 8000852:	f003 fecf 	bl	80045f4 <HAL_TIM_Base_Start_IT>





		for (int i = 0; i < 10; ++i) {
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	e065      	b.n	8000928 <main+0x1fc>
			sensors_states[i]=0;
 800085c:	4a5e      	ldr	r2, [pc, #376]	; (80009d8 <main+0x2ac>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4413      	add	r3, r2
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 4; ++j) {
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	e04f      	b.n	800090c <main+0x1e0>
				switch (j) {
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d846      	bhi.n	8000900 <main+0x1d4>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <main+0x14c>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	08000889 	.word	0x08000889
 800087c:	080008a7 	.word	0x080008a7
 8000880:	080008c5 	.word	0x080008c5
 8000884:	080008e3 	.word	0x080008e3
				case 0:
					sprintf(msg, "%hu ", adc_results_1[i]);
 8000888:	4a50      	ldr	r2, [pc, #320]	; (80009cc <main+0x2a0>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000890:	461a      	mov	r2, r3
 8000892:	4952      	ldr	r1, [pc, #328]	; (80009dc <main+0x2b0>)
 8000894:	4852      	ldr	r0, [pc, #328]	; (80009e0 <main+0x2b4>)
 8000896:	f00a f883 	bl	800a9a0 <siprintf>
					CDC_Transmit(0,msg, sizeof(msg));
 800089a:	220a      	movs	r2, #10
 800089c:	4950      	ldr	r1, [pc, #320]	; (80009e0 <main+0x2b4>)
 800089e:	2000      	movs	r0, #0
 80008a0:	f007 f974 	bl	8007b8c <CDC_Transmit>
					break;
 80008a4:	e02c      	b.n	8000900 <main+0x1d4>
				case 1:
					sprintf(msg, "%hu ", adc_results_2[i]);
 80008a6:	4a4f      	ldr	r2, [pc, #316]	; (80009e4 <main+0x2b8>)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ae:	461a      	mov	r2, r3
 80008b0:	494a      	ldr	r1, [pc, #296]	; (80009dc <main+0x2b0>)
 80008b2:	484b      	ldr	r0, [pc, #300]	; (80009e0 <main+0x2b4>)
 80008b4:	f00a f874 	bl	800a9a0 <siprintf>
					CDC_Transmit(0,msg, sizeof(msg));
 80008b8:	220a      	movs	r2, #10
 80008ba:	4949      	ldr	r1, [pc, #292]	; (80009e0 <main+0x2b4>)
 80008bc:	2000      	movs	r0, #0
 80008be:	f007 f965 	bl	8007b8c <CDC_Transmit>
					break;
 80008c2:	e01d      	b.n	8000900 <main+0x1d4>
				case 2:
					sprintf(msg, "%hu ", adc_results_3[i]);
 80008c4:	4a48      	ldr	r2, [pc, #288]	; (80009e8 <main+0x2bc>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4943      	ldr	r1, [pc, #268]	; (80009dc <main+0x2b0>)
 80008d0:	4843      	ldr	r0, [pc, #268]	; (80009e0 <main+0x2b4>)
 80008d2:	f00a f865 	bl	800a9a0 <siprintf>
					CDC_Transmit(0,msg, sizeof(msg));
 80008d6:	220a      	movs	r2, #10
 80008d8:	4941      	ldr	r1, [pc, #260]	; (80009e0 <main+0x2b4>)
 80008da:	2000      	movs	r0, #0
 80008dc:	f007 f956 	bl	8007b8c <CDC_Transmit>
					break;
 80008e0:	e00e      	b.n	8000900 <main+0x1d4>
				case 3:
					sprintf(msg, "%hu ", adc_results_4[i]);
 80008e2:	4a42      	ldr	r2, [pc, #264]	; (80009ec <main+0x2c0>)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ea:	461a      	mov	r2, r3
 80008ec:	493b      	ldr	r1, [pc, #236]	; (80009dc <main+0x2b0>)
 80008ee:	483c      	ldr	r0, [pc, #240]	; (80009e0 <main+0x2b4>)
 80008f0:	f00a f856 	bl	800a9a0 <siprintf>
					CDC_Transmit(0,msg, sizeof(msg));
 80008f4:	220a      	movs	r2, #10
 80008f6:	493a      	ldr	r1, [pc, #232]	; (80009e0 <main+0x2b4>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f007 f947 	bl	8007b8c <CDC_Transmit>
					break;
 80008fe:	bf00      	nop
				}
				HAL_Delay(1);
 8000900:	2001      	movs	r0, #1
 8000902:	f000 fae3 	bl	8000ecc <HAL_Delay>
			for (int j = 0; j < 4; ++j) {
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	3301      	adds	r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	2b03      	cmp	r3, #3
 8000910:	ddac      	ble.n	800086c <main+0x140>
			}

			CDC_Transmit(0,"|\n\r", sizeof("|\n\r"));
 8000912:	2204      	movs	r2, #4
 8000914:	4936      	ldr	r1, [pc, #216]	; (80009f0 <main+0x2c4>)
 8000916:	2000      	movs	r0, #0
 8000918:	f007 f938 	bl	8007b8c <CDC_Transmit>
			HAL_Delay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f000 fad5 	bl	8000ecc <HAL_Delay>
		for (int i = 0; i < 10; ++i) {
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3301      	adds	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b09      	cmp	r3, #9
 800092c:	dd96      	ble.n	800085c <main+0x130>
		}

		CDC_Transmit(0,"===\n\r", sizeof("===\n\r"));
 800092e:	2206      	movs	r2, #6
 8000930:	4930      	ldr	r1, [pc, #192]	; (80009f4 <main+0x2c8>)
 8000932:	2000      	movs	r0, #0
 8000934:	f007 f92a 	bl	8007b8c <CDC_Transmit>
		HAL_Delay(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f000 fac7 	bl	8000ecc <HAL_Delay>
		sprintf(msg, "%hu ", debug_var);
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <main+0x2cc>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	b29b      	uxth	r3, r3
 8000944:	461a      	mov	r2, r3
 8000946:	4925      	ldr	r1, [pc, #148]	; (80009dc <main+0x2b0>)
 8000948:	4825      	ldr	r0, [pc, #148]	; (80009e0 <main+0x2b4>)
 800094a:	f00a f829 	bl	800a9a0 <siprintf>
		CDC_Transmit(0,msg, sizeof(msg));
 800094e:	220a      	movs	r2, #10
 8000950:	4923      	ldr	r1, [pc, #140]	; (80009e0 <main+0x2b4>)
 8000952:	2000      	movs	r0, #0
 8000954:	f007 f91a 	bl	8007b8c <CDC_Transmit>
		debug_var=0;
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <main+0x2cc>)
 800095a:	2200      	movs	r2, #0
 800095c:	801a      	strh	r2, [r3, #0]
		HAL_Delay(1);
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fab4 	bl	8000ecc <HAL_Delay>
		CDC_Transmit(0,"\n\r===\n\r", sizeof("\n\r===\n\r"));
 8000964:	2208      	movs	r2, #8
 8000966:	4925      	ldr	r1, [pc, #148]	; (80009fc <main+0x2d0>)
 8000968:	2000      	movs	r0, #0
 800096a:	f007 f90f 	bl	8007b8c <CDC_Transmit>
		HAL_Delay(1);
 800096e:	2001      	movs	r0, #1
 8000970:	f000 faac 	bl	8000ecc <HAL_Delay>
		sprintf(msg, "%d ====", sensors_states[1]);
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <main+0x2ac>)
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	461a      	mov	r2, r3
 800097a:	4921      	ldr	r1, [pc, #132]	; (8000a00 <main+0x2d4>)
 800097c:	4818      	ldr	r0, [pc, #96]	; (80009e0 <main+0x2b4>)
 800097e:	f00a f80f 	bl	800a9a0 <siprintf>
		CDC_Transmit(0,msg, sizeof(msg));
 8000982:	220a      	movs	r2, #10
 8000984:	4916      	ldr	r1, [pc, #88]	; (80009e0 <main+0x2b4>)
 8000986:	2000      	movs	r0, #0
 8000988:	f007 f900 	bl	8007b8c <CDC_Transmit>
		HAL_Delay(1);
 800098c:	2001      	movs	r0, #1
 800098e:	f000 fa9d 	bl	8000ecc <HAL_Delay>
		CDC_Transmit(0,"\n\r===\n\r", sizeof("\n\r===\n\r"));
 8000992:	2208      	movs	r2, #8
 8000994:	4919      	ldr	r1, [pc, #100]	; (80009fc <main+0x2d0>)
 8000996:	2000      	movs	r0, #0
 8000998:	f007 f8f8 	bl	8007b8c <CDC_Transmit>
		HAL_Delay(500);
 800099c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a0:	f000 fa94 	bl	8000ecc <HAL_Delay>
	{
 80009a4:	e757      	b.n	8000856 <main+0x12a>
 80009a6:	bf00      	nop
 80009a8:	200004ac 	.word	0x200004ac
 80009ac:	200004bc 	.word	0x200004bc
 80009b0:	200004cc 	.word	0x200004cc
 80009b4:	200004dc 	.word	0x200004dc
 80009b8:	200004ec 	.word	0x200004ec
 80009bc:	200004fc 	.word	0x200004fc
 80009c0:	2000050c 	.word	0x2000050c
 80009c4:	2000051c 	.word	0x2000051c
 80009c8:	40010c00 	.word	0x40010c00
 80009cc:	20000444 	.word	0x20000444
 80009d0:	200003c8 	.word	0x200003c8
 80009d4:	20000530 	.word	0x20000530
 80009d8:	200004a0 	.word	0x200004a0
 80009dc:	0800b290 	.word	0x0800b290
 80009e0:	20000494 	.word	0x20000494
 80009e4:	20000458 	.word	0x20000458
 80009e8:	2000046c 	.word	0x2000046c
 80009ec:	20000480 	.word	0x20000480
 80009f0:	0800b298 	.word	0x0800b298
 80009f4:	0800b29c 	.word	0x0800b29c
 80009f8:	2000049e 	.word	0x2000049e
 80009fc:	0800b2a4 	.word	0x0800b2a4
 8000a00:	0800b2ac 	.word	0x0800b2ac

08000a04 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0e:	2228      	movs	r2, #40	; 0x28
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f009 ff88 	bl	800a928 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a42:	2301      	movs	r3, #1
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a54:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 f8dc 	bl	8003c18 <HAL_RCC_OscConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000a66:	f000 f82b 	bl	8000ac0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2101      	movs	r1, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fb48 	bl	800411c <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000a92:	f000 f815 	bl	8000ac0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000a96:	2312      	movs	r3, #18
 8000a98:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a9e:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000aa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa4:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 fc9d 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xb4>
	{
		Error_Handler();
 8000ab4:	f000 f804 	bl	8000ac0 <Error_Handler>
	}
}
 8000ab8:	bf00      	nop
 8000aba:	3750      	adds	r7, #80	; 0x50
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <Error_Handler+0x8>
	...

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_MspInit+0x40>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_MspInit+0x40>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_MspInit+0x40>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_MspInit+0x40>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_MspInit+0x40>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_MspInit+0x40>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b56:	f000 f99d 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <DMA1_Channel1_IRQHandler+0x10>)
 8000b66:	f001 f8b9 	bl	8001cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200003f8 	.word	0x200003f8

08000b74 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <ADC1_2_IRQHandler+0x10>)
 8000b7a:	f000 fbcc 	bl	8001316 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200003c8 	.word	0x200003c8

08000b88 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000b8e:	f001 fca6 	bl	80024de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000578 	.word	0x20000578

08000b9c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ba2:	f001 fc9c 	bl	80024de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000578 	.word	0x20000578

08000bb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <TIM2_IRQHandler+0x10>)
 8000bb6:	f003 fd6f 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000530 	.word	0x20000530

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f009 fe60 	bl	800a8b8 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20005000 	.word	0x20005000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	2000052c 	.word	0x2000052c
 8000c2c:	20001178 	.word	0x20001178

08000c30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c62:	f240 321f 	movw	r2, #799	; 0x31f
 8000c66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c70:	2263      	movs	r2, #99	; 0x63
 8000c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c82:	f003 fc67 	bl	8004554 <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c8c:	f7ff ff18 	bl	8000ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000c9e:	f003 fe03 	bl	80048a8 <HAL_TIM_ConfigClockSource>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ca8:	f7ff ff0a 	bl	8000ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_TIM2_Init+0x94>)
 8000cba:	f003 ffd5 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f7ff fefc 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000530 	.word	0x20000530

08000cd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce4:	d113      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_TIM_Base_MspInit+0x44>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <HAL_TIM_Base_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_TIM_Base_MspInit+0x44>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	201c      	movs	r0, #28
 8000d04:	f000 febf 	bl	8001a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d08:	201c      	movs	r0, #28
 8000d0a:	f000 fed8 	bl	8001abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_USB_PCD_Init+0x3c>)
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <MX_USB_PCD_Init+0x40>)
 8000d24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USB_PCD_Init+0x3c>)
 8000d28:	2208      	movs	r2, #8
 8000d2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_USB_PCD_Init+0x3c>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USB_PCD_Init+0x3c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_USB_PCD_Init+0x3c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USB_PCD_Init+0x3c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_USB_PCD_Init+0x3c>)
 8000d46:	f001 fa99 	bl	800227c <HAL_PCD_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000d50:	f7ff feb6 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000578 	.word	0x20000578
 8000d5c:	40005c00 	.word	0x40005c00

08000d60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <HAL_PCD_MspInit+0x54>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d11b      	bne.n	8000daa <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_PCD_MspInit+0x58>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_PCD_MspInit+0x58>)
 8000d78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_PCD_MspInit+0x58>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2013      	movs	r0, #19
 8000d90:	f000 fe79 	bl	8001a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000d94:	2013      	movs	r0, #19
 8000d96:	f000 fe92 	bl	8001abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2014      	movs	r0, #20
 8000da0:	f000 fe71 	bl	8001a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000da4:	2014      	movs	r0, #20
 8000da6:	f000 fe8a 	bl	8001abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40005c00 	.word	0x40005c00
 8000db8:	40021000 	.word	0x40021000

08000dbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000de2:	f7ff ff25 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f009 fd6d 	bl	800a8c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dea:	f7ff fc9f 	bl	800072c <main>
  bx lr
 8000dee:	4770      	bx	lr
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	200003ac 	.word	0x200003ac
  ldr r2, =_sidata
 8000df8:	0800b384 	.word	0x0800b384
  ldr r2, =_sbss
 8000dfc:	200003ac 	.word	0x200003ac
  ldr r4, =_ebss
 8000e00:	20001174 	.word	0x20001174

08000e04 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <CAN1_RX1_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_Init+0x28>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_Init+0x28>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 fe29 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1e:	200f      	movs	r0, #15
 8000e20:	f000 f808 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e24:	f7ff fe52 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40022000 	.word	0x40022000

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x54>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x58>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fe41 	bl	8001ada <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d80a      	bhi.n	8000e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e70:	f000 fe09 	bl	8001a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_InitTick+0x5c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000054 	.word	0x20000054
 8000e8c:	2000005c 	.word	0x2000005c
 8000e90:	20000058 	.word	0x20000058

08000e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x1c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_IncTick+0x20>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <HAL_IncTick+0x20>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	2000005c 	.word	0x2000005c
 8000eb4:	20000864 	.word	0x20000864

08000eb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <HAL_GetTick+0x10>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	20000864 	.word	0x20000864

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff fff0 	bl	8000eb8 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffe0 	bl	8000eb8 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000005c 	.word	0x2000005c

08000f14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e0be      	b.n	80010b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d109      	bne.n	8000f58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff f9b8 	bl	80002c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fc0d 	bl	8001778 <ADC_ConversionStop_Disable>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 8099 	bne.w	80010a2 <HAL_ADC_Init+0x18e>
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f040 8095 	bne.w	80010a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f80:	f023 0302 	bic.w	r3, r3, #2
 8000f84:	f043 0202 	orr.w	r2, r3, #2
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7b1b      	ldrb	r3, [r3, #12]
 8000f9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fac:	d003      	beq.n	8000fb6 <HAL_ADC_Init+0xa2>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d102      	bne.n	8000fbc <HAL_ADC_Init+0xa8>
 8000fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fba:	e000      	b.n	8000fbe <HAL_ADC_Init+0xaa>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7d1b      	ldrb	r3, [r3, #20]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d119      	bne.n	8001000 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7b1b      	ldrb	r3, [r3, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	035a      	lsls	r2, r3, #13
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	e00b      	b.n	8001000 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	f043 0220 	orr.w	r2, r3, #32
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	f043 0201 	orr.w	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	430a      	orrs	r2, r1
 8001012:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_ADC_Init+0x1a8>)
 800101c:	4013      	ands	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	430b      	orrs	r3, r1
 8001026:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001030:	d003      	beq.n	800103a <HAL_ADC_Init+0x126>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d104      	bne.n	8001044 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	3b01      	subs	r3, #1
 8001040:	051b      	lsls	r3, r3, #20
 8001042:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	430a      	orrs	r2, r1
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_ADC_Init+0x1ac>)
 8001060:	4013      	ands	r3, r2
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	429a      	cmp	r2, r3
 8001066:	d10b      	bne.n	8001080 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800107e:	e018      	b.n	80010b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	f023 0312 	bic.w	r3, r3, #18
 8001088:	f043 0210 	orr.w	r2, r3, #16
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	f043 0201 	orr.w	r2, r3, #1
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010a0:	e007      	b.n	80010b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a6:	f043 0210 	orr.w	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	ffe1f7fd 	.word	0xffe1f7fd
 80010c0:	ff1f0efe 	.word	0xff1f0efe

080010c4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a64      	ldr	r2, [pc, #400]	; (800126c <HAL_ADC_Start_DMA+0x1a8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d004      	beq.n	80010e8 <HAL_ADC_Start_DMA+0x24>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a63      	ldr	r2, [pc, #396]	; (8001270 <HAL_ADC_Start_DMA+0x1ac>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d106      	bne.n	80010f6 <HAL_ADC_Start_DMA+0x32>
 80010e8:	4b60      	ldr	r3, [pc, #384]	; (800126c <HAL_ADC_Start_DMA+0x1a8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f040 80b3 	bne.w	800125c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_ADC_Start_DMA+0x40>
 8001100:	2302      	movs	r3, #2
 8001102:	e0ae      	b.n	8001262 <HAL_ADC_Start_DMA+0x19e>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f000 fad9 	bl	80016c4 <ADC_Enable>
 8001112:	4603      	mov	r3, r0
 8001114:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 809a 	bne.w	8001252 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <HAL_ADC_Start_DMA+0x1ac>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d105      	bne.n	8001148 <HAL_ADC_Start_DMA+0x84>
 800113c:	4b4b      	ldr	r3, [pc, #300]	; (800126c <HAL_ADC_Start_DMA+0x1a8>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d115      	bne.n	8001174 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115e:	2b00      	cmp	r3, #0
 8001160:	d026      	beq.n	80011b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800116a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001172:	e01d      	b.n	80011b0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a39      	ldr	r2, [pc, #228]	; (800126c <HAL_ADC_Start_DMA+0x1a8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d004      	beq.n	8001194 <HAL_ADC_Start_DMA+0xd0>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a38      	ldr	r2, [pc, #224]	; (8001270 <HAL_ADC_Start_DMA+0x1ac>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d10d      	bne.n	80011b0 <HAL_ADC_Start_DMA+0xec>
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <HAL_ADC_Start_DMA+0x1a8>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c0:	f023 0206 	bic.w	r2, r3, #6
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4a25      	ldr	r2, [pc, #148]	; (8001274 <HAL_ADC_Start_DMA+0x1b0>)
 80011de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a24      	ldr	r2, [pc, #144]	; (8001278 <HAL_ADC_Start_DMA+0x1b4>)
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <HAL_ADC_Start_DMA+0x1b8>)
 80011ee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f06f 0202 	mvn.w	r2, #2
 80011f8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001208:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a18      	ldr	r0, [r3, #32]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	334c      	adds	r3, #76	; 0x4c
 8001214:	4619      	mov	r1, r3
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f000 fcc5 	bl	8001ba8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001228:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800122c:	d108      	bne.n	8001240 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800123c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800123e:	e00f      	b.n	8001260 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800124e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001250:	e006      	b.n	8001260 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800125a:	e001      	b.n	8001260 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001260:	7dfb      	ldrb	r3, [r7, #23]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40012400 	.word	0x40012400
 8001270:	40012800 	.word	0x40012800
 8001274:	080017fb 	.word	0x080017fb
 8001278:	08001877 	.word	0x08001877
 800127c:	08001893 	.word	0x08001893

08001280 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_ADC_Stop_DMA+0x1a>
 8001296:	2302      	movs	r3, #2
 8001298:	e039      	b.n	800130e <HAL_ADC_Stop_DMA+0x8e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fa68 	bl	8001778 <ADC_ConversionStop_Disable>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d128      	bne.n	8001304 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c0:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d11a      	bne.n	8001304 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fcc7 	bl	8001c66 <HAL_DMA_Abort>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10a      	bne.n	80012f8 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
 80012f6:	e005      	b.n	8001304 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b20      	cmp	r3, #32
 800132a:	d140      	bne.n	80013ae <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d139      	bne.n	80013ae <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d105      	bne.n	8001352 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800135c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001360:	d11d      	bne.n	800139e <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001366:	2b00      	cmp	r3, #0
 8001368:	d119      	bne.n	800139e <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0220 	bic.w	r2, r2, #32
 8001378:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d105      	bne.n	800139e <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	f043 0201 	orr.w	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff f884 	bl	80004ac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f06f 0212 	mvn.w	r2, #18
 80013ac:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b8:	2b80      	cmp	r3, #128	; 0x80
 80013ba:	d14f      	bne.n	800145c <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d148      	bne.n	800145c <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d105      	bne.n	80013e2 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80013ec:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80013f0:	d012      	beq.n	8001418 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d125      	bne.n	800144c <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800140a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800140e:	d11d      	bne.n	800144c <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001414:	2b00      	cmp	r3, #0
 8001416:	d119      	bne.n	800144c <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001426:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	f043 0201 	orr.w	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fa3a 	bl	80018c6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f06f 020c 	mvn.w	r2, #12
 800145a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001466:	2b40      	cmp	r3, #64	; 0x40
 8001468:	d114      	bne.n	8001494 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10d      	bne.n	8001494 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f812 	bl	80014ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f06f 0201 	mvn.w	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x20>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e0dc      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1da>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b06      	cmp	r3, #6
 8001502:	d81c      	bhi.n	800153e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3b05      	subs	r3, #5
 8001516:	221f      	movs	r2, #31
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	4019      	ands	r1, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	3b05      	subs	r3, #5
 8001530:	fa00 f203 	lsl.w	r2, r0, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	635a      	str	r2, [r3, #52]	; 0x34
 800153c:	e03c      	b.n	80015b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d81c      	bhi.n	8001580 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	3b23      	subs	r3, #35	; 0x23
 8001558:	221f      	movs	r2, #31
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	4019      	ands	r1, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	3b23      	subs	r3, #35	; 0x23
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
 800157e:	e01b      	b.n	80015b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b41      	subs	r3, #65	; 0x41
 8001592:	221f      	movs	r2, #31
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	4019      	ands	r1, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	3b41      	subs	r3, #65	; 0x41
 80015ac:	fa00 f203 	lsl.w	r2, r0, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d91c      	bls.n	80015fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68d9      	ldr	r1, [r3, #12]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	3b1e      	subs	r3, #30
 80015d2:	2207      	movs	r2, #7
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	4019      	ands	r1, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6898      	ldr	r0, [r3, #8]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	3b1e      	subs	r3, #30
 80015ec:	fa00 f203 	lsl.w	r2, r0, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	e019      	b.n	800162e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6919      	ldr	r1, [r3, #16]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	2207      	movs	r2, #7
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6898      	ldr	r0, [r3, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	fa00 f203 	lsl.w	r2, r0, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b10      	cmp	r3, #16
 8001634:	d003      	beq.n	800163e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800163a:	2b11      	cmp	r3, #17
 800163c:	d132      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d125      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d126      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001664:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d11a      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_ADC_ConfigChannel+0x1e8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	0c9a      	lsrs	r2, r3, #18
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001684:	e002      	b.n	800168c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3b01      	subs	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f9      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x1b2>
 8001692:	e007      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f043 0220 	orr.w	r2, r3, #32
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40012400 	.word	0x40012400
 80016bc:	20000054 	.word	0x20000054
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d040      	beq.n	8001764 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0201 	orr.w	r2, r2, #1
 80016f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <ADC_Enable+0xac>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <ADC_Enable+0xb0>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	0c9b      	lsrs	r3, r3, #18
 80016fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001700:	e002      	b.n	8001708 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3b01      	subs	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800170e:	f7ff fbd3 	bl	8000eb8 <HAL_GetTick>
 8001712:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001714:	e01f      	b.n	8001756 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001716:	f7ff fbcf 	bl	8000eb8 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d918      	bls.n	8001756 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d011      	beq.n	8001756 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	f043 0210 	orr.w	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e007      	b.n	8001766 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d1d8      	bne.n	8001716 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000054 	.word	0x20000054
 8001774:	431bde83 	.word	0x431bde83

08001778 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b01      	cmp	r3, #1
 8001790:	d12e      	bne.n	80017f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017a2:	f7ff fb89 	bl	8000eb8 <HAL_GetTick>
 80017a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017a8:	e01b      	b.n	80017e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017aa:	f7ff fb85 	bl	8000eb8 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d914      	bls.n	80017e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10d      	bne.n	80017e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	f043 0210 	orr.w	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e007      	b.n	80017f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d0dc      	beq.n	80017aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001810:	2b00      	cmp	r3, #0
 8001812:	d127      	bne.n	8001864 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800182a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800182e:	d115      	bne.n	800185c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7fe fe25 	bl	80004ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001862:	e004      	b.n	800186e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff fe09 	bl	800149c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f043 0204 	orr.w	r2, r3, #4
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f7ff fe01 	bl	80014c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4906      	ldr	r1, [pc, #24]	; (8001970 <__NVIC_EnableIRQ+0x34>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a3c:	d301      	bcc.n	8001a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <SysTick_Config+0x40>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a50:	f7ff ff90 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <SysTick_Config+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SysTick_Config+0x40>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff2d 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a98:	f7ff ff42 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	6978      	ldr	r0, [r7, #20]
 8001aa4:	f7ff ff90 	bl	80019c8 <NVIC_EncodePriority>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5f 	bl	8001974 <__NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff35 	bl	800193c <__NVIC_EnableIRQ>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffa2 	bl	8001a2c <SysTick_Config>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e043      	b.n	8001b92 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_DMA_Init+0xa8>)
 8001b12:	4413      	add	r3, r2
 8001b14:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <HAL_DMA_Init+0xac>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	009a      	lsls	r2, r3, #2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_DMA_Init+0xb0>)
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	bffdfff8 	.word	0xbffdfff8
 8001ba0:	cccccccd 	.word	0xcccccccd
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Start_IT+0x20>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e04a      	b.n	8001c5e <HAL_DMA_Start_IT+0xb6>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d13a      	bne.n	8001c50 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f972 	bl	8001ee8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 020e 	orr.w	r2, r2, #14
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e00f      	b.n	8001c3e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0204 	bic.w	r2, r2, #4
 8001c2c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 020a 	orr.w	r2, r2, #10
 8001c3c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e005      	b.n	8001c5c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d008      	beq.n	8001c8e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e020      	b.n	8001cd0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 020e 	bic.w	r2, r2, #14
 8001c9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d04f      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xc8>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d04a      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a66      	ldr	r2, [pc, #408]	; (8001ecc <HAL_DMA_IRQHandler+0x1f0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d029      	beq.n	8001d8a <HAL_DMA_IRQHandler+0xae>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a65      	ldr	r2, [pc, #404]	; (8001ed0 <HAL_DMA_IRQHandler+0x1f4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xaa>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a63      	ldr	r2, [pc, #396]	; (8001ed4 <HAL_DMA_IRQHandler+0x1f8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d01a      	beq.n	8001d80 <HAL_DMA_IRQHandler+0xa4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a62      	ldr	r2, [pc, #392]	; (8001ed8 <HAL_DMA_IRQHandler+0x1fc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d012      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x9e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a60      	ldr	r2, [pc, #384]	; (8001edc <HAL_DMA_IRQHandler+0x200>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00a      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x98>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5f      	ldr	r2, [pc, #380]	; (8001ee0 <HAL_DMA_IRQHandler+0x204>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d102      	bne.n	8001d6e <HAL_DMA_IRQHandler+0x92>
 8001d68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6c:	e00e      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d72:	e00b      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d78:	e008      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d7e:	e005      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d84:	e002      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d86:	2340      	movs	r3, #64	; 0x40
 8001d88:	e000      	b.n	8001d8c <HAL_DMA_IRQHandler+0xb0>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	4a55      	ldr	r2, [pc, #340]	; (8001ee4 <HAL_DMA_IRQHandler+0x208>)
 8001d8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 8094 	beq.w	8001ec2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001da2:	e08e      	b.n	8001ec2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2202      	movs	r2, #2
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d056      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x186>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d051      	beq.n	8001e62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 020a 	bic.w	r2, r2, #10
 8001dda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a38      	ldr	r2, [pc, #224]	; (8001ecc <HAL_DMA_IRQHandler+0x1f0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d029      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x166>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a37      	ldr	r2, [pc, #220]	; (8001ed0 <HAL_DMA_IRQHandler+0x1f4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x162>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a35      	ldr	r2, [pc, #212]	; (8001ed4 <HAL_DMA_IRQHandler+0x1f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x15c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a34      	ldr	r2, [pc, #208]	; (8001ed8 <HAL_DMA_IRQHandler+0x1fc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d012      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x156>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a32      	ldr	r2, [pc, #200]	; (8001edc <HAL_DMA_IRQHandler+0x200>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00a      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x150>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a31      	ldr	r2, [pc, #196]	; (8001ee0 <HAL_DMA_IRQHandler+0x204>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d102      	bne.n	8001e26 <HAL_DMA_IRQHandler+0x14a>
 8001e20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e24:	e00e      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e2a:	e00b      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e30:	e008      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e36:	e005      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3c:	e002      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e000      	b.n	8001e44 <HAL_DMA_IRQHandler+0x168>
 8001e42:	2302      	movs	r3, #2
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_DMA_IRQHandler+0x208>)
 8001e46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d034      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e60:	e02f      	b.n	8001ec2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2208      	movs	r2, #8
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d028      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x1e8>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d023      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 020e 	bic.w	r2, r2, #14
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	4798      	blx	r3
    }
  }
  return;
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
}
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40020008 	.word	0x40020008
 8001ed0:	4002001c 	.word	0x4002001c
 8001ed4:	40020030 	.word	0x40020030
 8001ed8:	40020044 	.word	0x40020044
 8001edc:	40020058 	.word	0x40020058
 8001ee0:	4002006c 	.word	0x4002006c
 8001ee4:	40020000 	.word	0x40020000

08001ee8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d108      	bne.n	8001f28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f26:	e007      	b.n	8001f38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	e169      	b.n	800222c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8158 	bne.w	8002226 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a9a      	ldr	r2, [pc, #616]	; (80021e4 <HAL_GPIO_Init+0x2a0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d05e      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f80:	4a98      	ldr	r2, [pc, #608]	; (80021e4 <HAL_GPIO_Init+0x2a0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d875      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f86:	4a98      	ldr	r2, [pc, #608]	; (80021e8 <HAL_GPIO_Init+0x2a4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d058      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f8c:	4a96      	ldr	r2, [pc, #600]	; (80021e8 <HAL_GPIO_Init+0x2a4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d86f      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f92:	4a96      	ldr	r2, [pc, #600]	; (80021ec <HAL_GPIO_Init+0x2a8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d052      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f98:	4a94      	ldr	r2, [pc, #592]	; (80021ec <HAL_GPIO_Init+0x2a8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d869      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f9e:	4a94      	ldr	r2, [pc, #592]	; (80021f0 <HAL_GPIO_Init+0x2ac>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d04c      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fa4:	4a92      	ldr	r2, [pc, #584]	; (80021f0 <HAL_GPIO_Init+0x2ac>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d863      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001faa:	4a92      	ldr	r2, [pc, #584]	; (80021f4 <HAL_GPIO_Init+0x2b0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d046      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fb0:	4a90      	ldr	r2, [pc, #576]	; (80021f4 <HAL_GPIO_Init+0x2b0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d85d      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d82a      	bhi.n	8002010 <HAL_GPIO_Init+0xcc>
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d859      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <HAL_GPIO_Init+0x80>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	0800203f 	.word	0x0800203f
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	0800202b 	.word	0x0800202b
 8001fd0:	0800206d 	.word	0x0800206d
 8001fd4:	08002073 	.word	0x08002073
 8001fd8:	08002073 	.word	0x08002073
 8001fdc:	08002073 	.word	0x08002073
 8001fe0:	08002073 	.word	0x08002073
 8001fe4:	08002073 	.word	0x08002073
 8001fe8:	08002073 	.word	0x08002073
 8001fec:	08002073 	.word	0x08002073
 8001ff0:	08002073 	.word	0x08002073
 8001ff4:	08002073 	.word	0x08002073
 8001ff8:	08002073 	.word	0x08002073
 8001ffc:	08002073 	.word	0x08002073
 8002000:	08002073 	.word	0x08002073
 8002004:	08002073 	.word	0x08002073
 8002008:	08002021 	.word	0x08002021
 800200c:	08002035 	.word	0x08002035
 8002010:	4a79      	ldr	r2, [pc, #484]	; (80021f8 <HAL_GPIO_Init+0x2b4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002016:	e02c      	b.n	8002072 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	623b      	str	r3, [r7, #32]
          break;
 800201e:	e029      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	3304      	adds	r3, #4
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	e024      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	3308      	adds	r3, #8
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e01f      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	330c      	adds	r3, #12
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e01a      	b.n	8002074 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002046:	2304      	movs	r3, #4
 8002048:	623b      	str	r3, [r7, #32]
          break;
 800204a:	e013      	b.n	8002074 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002054:	2308      	movs	r3, #8
 8002056:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	611a      	str	r2, [r3, #16]
          break;
 800205e:	e009      	b.n	8002074 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	615a      	str	r2, [r3, #20]
          break;
 800206a:	e003      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x130>
          break;
 8002072:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2bff      	cmp	r3, #255	; 0xff
 8002078:	d801      	bhi.n	800207e <HAL_GPIO_Init+0x13a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	e001      	b.n	8002082 <HAL_GPIO_Init+0x13e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d802      	bhi.n	8002090 <HAL_GPIO_Init+0x14c>
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x152>
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	3b08      	subs	r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	210f      	movs	r1, #15
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80b1 	beq.w	8002226 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c4:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <HAL_GPIO_Init+0x2b8>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_GPIO_Init+0x2b8>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_GPIO_Init+0x2b8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020dc:	4a48      	ldr	r2, [pc, #288]	; (8002200 <HAL_GPIO_Init+0x2bc>)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a40      	ldr	r2, [pc, #256]	; (8002204 <HAL_GPIO_Init+0x2c0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_GPIO_Init+0x1ec>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3f      	ldr	r2, [pc, #252]	; (8002208 <HAL_GPIO_Init+0x2c4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00d      	beq.n	800212c <HAL_GPIO_Init+0x1e8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3e      	ldr	r2, [pc, #248]	; (800220c <HAL_GPIO_Init+0x2c8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <HAL_GPIO_Init+0x1e4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3d      	ldr	r2, [pc, #244]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_GPIO_Init+0x1e0>
 8002120:	2303      	movs	r3, #3
 8002122:	e006      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 8002124:	2304      	movs	r3, #4
 8002126:	e004      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 8002128:	2302      	movs	r3, #2
 800212a:	e002      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 8002130:	2300      	movs	r3, #0
 8002132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002134:	f002 0203 	and.w	r2, r2, #3
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	4093      	lsls	r3, r2
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002142:	492f      	ldr	r1, [pc, #188]	; (8002200 <HAL_GPIO_Init+0x2bc>)
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	492c      	ldr	r1, [pc, #176]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	4928      	ldr	r1, [pc, #160]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002174:	4013      	ands	r3, r2
 8002176:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002184:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4922      	ldr	r1, [pc, #136]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	43db      	mvns	r3, r3
 800219a:	491e      	ldr	r1, [pc, #120]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 800219c:	4013      	ands	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	4918      	ldr	r1, [pc, #96]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	4914      	ldr	r1, [pc, #80]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d021      	beq.n	8002218 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	490e      	ldr	r1, [pc, #56]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60cb      	str	r3, [r1, #12]
 80021e0:	e021      	b.n	8002226 <HAL_GPIO_Init+0x2e2>
 80021e2:	bf00      	nop
 80021e4:	10320000 	.word	0x10320000
 80021e8:	10310000 	.word	0x10310000
 80021ec:	10220000 	.word	0x10220000
 80021f0:	10210000 	.word	0x10210000
 80021f4:	10120000 	.word	0x10120000
 80021f8:	10110000 	.word	0x10110000
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010000 	.word	0x40010000
 8002204:	40010800 	.word	0x40010800
 8002208:	40010c00 	.word	0x40010c00
 800220c:	40011000 	.word	0x40011000
 8002210:	40011400 	.word	0x40011400
 8002214:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_GPIO_Init+0x304>)
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	43db      	mvns	r3, r3
 8002220:	4909      	ldr	r1, [pc, #36]	; (8002248 <HAL_GPIO_Init+0x304>)
 8002222:	4013      	ands	r3, r2
 8002224:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	3301      	adds	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	fa22 f303 	lsr.w	r3, r2, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	f47f ae8e 	bne.w	8001f58 <HAL_GPIO_Init+0x14>
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	372c      	adds	r7, #44	; 0x2c
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	40010400 	.word	0x40010400

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002268:	e003      	b.n	8002272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	041a      	lsls	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227e:	b08b      	sub	sp, #44	; 0x2c
 8002280:	af06      	add	r7, sp, #24
 8002282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0fd      	b.n	800248a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fd5c 	bl	8000d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2203      	movs	r2, #3
 80022ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fd6d 	bl	8004d94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	687e      	ldr	r6, [r7, #4]
 80022c2:	466d      	mov	r5, sp
 80022c4:	f106 0410 	add.w	r4, r6, #16
 80022c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	602b      	str	r3, [r5, #0]
 80022d0:	1d33      	adds	r3, r6, #4
 80022d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f002 fd37 	bl	8004d48 <USB_CoreInit>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0ce      	b.n	800248a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fd68 	bl	8004dc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e04c      	b.n	8002398 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	440b      	add	r3, r1
 800230e:	3301      	adds	r3, #1
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	b298      	uxth	r0, r3
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	3336      	adds	r3, #54	; 0x36
 800233c:	4602      	mov	r2, r0
 800233e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	3303      	adds	r3, #3
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	3338      	adds	r3, #56	; 0x38
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	333c      	adds	r3, #60	; 0x3c
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	3340      	adds	r3, #64	; 0x40
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	3301      	adds	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3ad      	bcc.n	80022fe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e044      	b.n	8002432 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	3301      	adds	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d3b5      	bcc.n	80023a8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	687e      	ldr	r6, [r7, #4]
 8002444:	466d      	mov	r5, sp
 8002446:	f106 0410 	add.w	r4, r6, #16
 800244a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	602b      	str	r3, [r5, #0]
 8002452:	1d33      	adds	r3, r6, #4
 8002454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	f002 fcc2 	bl	8004de0 <USB_DevInit>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00d      	b.n	800248a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f005 f974 	bl	8007770 <USB_DevDisconnect>

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002492 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_PCD_Start+0x16>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e016      	b.n	80024d6 <HAL_PCD_Start+0x44>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fc57 	bl	8004d68 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80024ba:	2101      	movs	r1, #1
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f001 fba0 	bl	8003c02 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f005 f948 	bl	800775c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b088      	sub	sp, #32
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f005 f94a 	bl	8007784 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024fa:	d102      	bne.n	8002502 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fb5f 	bl	8002bc0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f005 f93c 	bl	8007784 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002516:	d112      	bne.n	800253e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252a:	b292      	uxth	r2, r2
 800252c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f007 ff9c 	bl	800a46e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002536:	2100      	movs	r1, #0
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f923 	bl	8002784 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f005 f91e 	bl	8007784 <USB_ReadInterrupts>
 8002548:	4603      	mov	r3, r0
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002552:	d10b      	bne.n	800256c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002566:	b292      	uxth	r2, r2
 8002568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f005 f907 	bl	8007784 <USB_ReadInterrupts>
 8002576:	4603      	mov	r3, r0
 8002578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002580:	d10b      	bne.n	800259a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002594:	b292      	uxth	r2, r2
 8002596:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f005 f8f0 	bl	8007784 <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d126      	bne.n	80025fe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0204 	bic.w	r2, r2, #4
 80025c2:	b292      	uxth	r2, r2
 80025c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0208 	bic.w	r2, r2, #8
 80025da:	b292      	uxth	r2, r2
 80025dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f007 ff73 	bl	800a4cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025f8:	b292      	uxth	r2, r2
 80025fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f005 f8be 	bl	8007784 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002612:	f040 8082 	bne.w	800271a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002616:	2300      	movs	r3, #0
 8002618:	77fb      	strb	r3, [r7, #31]
 800261a:	e010      	b.n	800263e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	7ffb      	ldrb	r3, [r7, #31]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	441a      	add	r2, r3
 8002628:	7ffb      	ldrb	r3, [r7, #31]
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	b292      	uxth	r2, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	3320      	adds	r3, #32
 8002632:	443b      	add	r3, r7
 8002634:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002638:	7ffb      	ldrb	r3, [r7, #31]
 800263a:	3301      	adds	r3, #1
 800263c:	77fb      	strb	r3, [r7, #31]
 800263e:	7ffb      	ldrb	r3, [r7, #31]
 8002640:	2b07      	cmp	r3, #7
 8002642:	d9eb      	bls.n	800261c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	b292      	uxth	r2, r2
 8002658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	b292      	uxth	r2, r2
 8002670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002674:	bf00      	nop
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800267e:	b29b      	uxth	r3, r3
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f6      	beq.n	8002676 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269a:	b292      	uxth	r2, r2
 800269c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	77fb      	strb	r3, [r7, #31]
 80026a4:	e00f      	b.n	80026c6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	4611      	mov	r1, r2
 80026ae:	7ffa      	ldrb	r2, [r7, #31]
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	440a      	add	r2, r1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	3320      	adds	r3, #32
 80026b8:	443b      	add	r3, r7
 80026ba:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80026be:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80026c0:	7ffb      	ldrb	r3, [r7, #31]
 80026c2:	3301      	adds	r3, #1
 80026c4:	77fb      	strb	r3, [r7, #31]
 80026c6:	7ffb      	ldrb	r3, [r7, #31]
 80026c8:	2b07      	cmp	r3, #7
 80026ca:	d9ec      	bls.n	80026a6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0208 	orr.w	r2, r2, #8
 80026de:	b292      	uxth	r2, r2
 80026e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f6:	b292      	uxth	r2, r2
 80026f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002704:	b29a      	uxth	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0204 	orr.w	r2, r2, #4
 800270e:	b292      	uxth	r2, r2
 8002710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f007 fecb 	bl	800a4b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f005 f830 	bl	8007784 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800272e:	d10e      	bne.n	800274e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002742:	b292      	uxth	r2, r2
 8002744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f007 fe82 	bl	800a452 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f005 f816 	bl	8007784 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002762:	d10b      	bne.n	800277c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002776:	b292      	uxth	r2, r2
 8002778:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800277c:	bf00      	nop
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_PCD_SetAddress+0x1a>
 800279a:	2302      	movs	r3, #2
 800279c:	e013      	b.n	80027c6 <HAL_PCD_SetAddress+0x42>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 ffbd 	bl	8007736 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	4608      	mov	r0, r1
 80027d8:	4611      	mov	r1, r2
 80027da:	461a      	mov	r2, r3
 80027dc:	4603      	mov	r3, r0
 80027de:	70fb      	strb	r3, [r7, #3]
 80027e0:	460b      	mov	r3, r1
 80027e2:	803b      	strh	r3, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da0e      	bge.n	8002812 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	705a      	strb	r2, [r3, #1]
 8002810:	e00e      	b.n	8002830 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	f003 0207 	and.w	r2, r3, #7
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800283c:	883a      	ldrh	r2, [r7, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	78ba      	ldrb	r2, [r7, #2]
 8002846:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	785b      	ldrb	r3, [r3, #1]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800285a:	78bb      	ldrb	r3, [r7, #2]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d102      	bne.n	8002866 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_PCD_EP_Open+0xa6>
 8002870:	2302      	movs	r3, #2
 8002872:	e00e      	b.n	8002892 <HAL_PCD_EP_Open+0xc4>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	4618      	mov	r0, r3
 8002884:	f002 facc 	bl	8004e20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002890:	7afb      	ldrb	r3, [r7, #11]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	da0e      	bge.n	80028cc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	705a      	strb	r2, [r3, #1]
 80028ca:	e00e      	b.n	80028ea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	f003 0207 	and.w	r2, r3, #7
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_PCD_EP_Close+0x6a>
 8002900:	2302      	movs	r3, #2
 8002902:	e00e      	b.n	8002922 <HAL_PCD_EP_Close+0x88>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68f9      	ldr	r1, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fdee 	bl	80054f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	460b      	mov	r3, r1
 8002938:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	f003 0207 	and.w	r2, r3, #7
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2200      	movs	r2, #0
 8002968:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	b2da      	uxtb	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6979      	ldr	r1, [r7, #20]
 8002986:	4618      	mov	r0, r3
 8002988:	f002 ffa0 	bl	80058cc <USB_EPStartXfer>
 800298c:	e005      	b.n	800299a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6979      	ldr	r1, [r7, #20]
 8002994:	4618      	mov	r0, r3
 8002996:	f002 ff99 	bl	80058cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 0207 	and.w	r2, r3, #7
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	460b      	mov	r3, r1
 80029e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e2:	7afb      	ldrb	r3, [r7, #11]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 ff46 	bl	80058cc <USB_EPStartXfer>
 8002a40:	e005      	b.n	8002a4e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6979      	ldr	r1, [r7, #20]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 ff3f 	bl	80058cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 0207 	and.w	r2, r3, #7
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d901      	bls.n	8002a76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e04c      	b.n	8002b10 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0e      	bge.n	8002a9c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	705a      	strb	r2, [r3, #1]
 8002a9a:	e00c      	b.n	8002ab6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_PCD_EP_SetStall+0x7e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e01c      	b.n	8002b10 <HAL_PCD_EP_SetStall+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68f9      	ldr	r1, [r7, #12]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 fd29 	bl	800753c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d108      	bne.n	8002b06 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f004 fe4e 	bl	80077a2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	f003 020f 	and.w	r2, r3, #15
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d901      	bls.n	8002b36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e040      	b.n	8002bb8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da0e      	bge.n	8002b5c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	705a      	strb	r2, [r3, #1]
 8002b5a:	e00e      	b.n	8002b7a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 0207 	and.w	r2, r3, #7
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_PCD_EP_ClrStall+0x82>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e00e      	b.n	8002bb8 <HAL_PCD_EP_ClrStall+0xa0>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68f9      	ldr	r1, [r7, #12]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 fd17 	bl	80075dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08e      	sub	sp, #56	; 0x38
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bc8:	e2ec      	b.n	80031a4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002bd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002be0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f040 8161 	bne.w	8002eac <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d152      	bne.n	8002c9a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c04:	81fb      	strh	r3, [r7, #14]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	89fb      	ldrh	r3, [r7, #14]
 8002c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3328      	adds	r3, #40	; 0x28
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	3302      	adds	r3, #2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	441a      	add	r2, r3
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c58:	2100      	movs	r1, #0
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f007 fbdf 	bl	800a41e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 829b 	beq.w	80031a4 <PCD_EP_ISR_Handler+0x5e4>
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 8296 	bne.w	80031a4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b292      	uxth	r2, r2
 8002c8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c98:	e284      	b.n	80031a4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002caa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d034      	beq.n	8002d1e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3306      	adds	r3, #6
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f004 fda5 	bl	8007842 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d04:	4013      	ands	r3, r2
 8002d06:	823b      	strh	r3, [r7, #16]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	8a3a      	ldrh	r2, [r7, #16]
 8002d0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d12:	b292      	uxth	r2, r2
 8002d14:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f007 fb54 	bl	800a3c4 <HAL_PCD_SetupStageCallback>
 8002d1c:	e242      	b.n	80031a4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d1e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f280 823e 	bge.w	80031a4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d34:	4013      	ands	r3, r2
 8002d36:	83bb      	strh	r3, [r7, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	8bba      	ldrh	r2, [r7, #28]
 8002d3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d42:	b292      	uxth	r2, r2
 8002d44:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3306      	adds	r3, #6
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d019      	beq.n	8002dae <PCD_EP_ISR_Handler+0x1ee>
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	6959      	ldr	r1, [r3, #20]
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f004 fd55 	bl	8007842 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	441a      	add	r2, r3
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002da6:	2100      	movs	r1, #0
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f007 fb1d 	bl	800a3e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 81f2 	bne.w	80031a4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d112      	bne.n	8002e0e <PCD_EP_ISR_Handler+0x24e>
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	801a      	strh	r2, [r3, #0]
 8002e0c:	e02f      	b.n	8002e6e <PCD_EP_ISR_Handler+0x2ae>
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b3e      	cmp	r3, #62	; 0x3e
 8002e14:	d813      	bhi.n	8002e3e <PCD_EP_ISR_Handler+0x27e>
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	085b      	lsrs	r3, r3, #1
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <PCD_EP_ISR_Handler+0x270>
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	801a      	strh	r2, [r3, #0]
 8002e3c:	e017      	b.n	8002e6e <PCD_EP_ISR_Handler+0x2ae>
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <PCD_EP_ISR_Handler+0x298>
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	3b01      	subs	r3, #1
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	029b      	lsls	r3, r3, #10
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7e:	827b      	strh	r3, [r7, #18]
 8002e80:	8a7b      	ldrh	r3, [r7, #18]
 8002e82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e86:	827b      	strh	r3, [r7, #18]
 8002e88:	8a7b      	ldrh	r3, [r7, #18]
 8002e8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e8e:	827b      	strh	r3, [r7, #18]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	8a7b      	ldrh	r3, [r7, #18]
 8002e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8013      	strh	r3, [r2, #0]
 8002eaa:	e17b      	b.n	80031a4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ebe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f280 80ea 	bge.w	800309c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ede:	4013      	ands	r3, r2
 8002ee0:	853b      	strh	r3, [r7, #40]	; 0x28
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ef2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002efa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	7b1b      	ldrb	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d122      	bne.n	8002f5e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3306      	adds	r3, #6
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f40:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002f42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8087 	beq.w	8003058 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	6959      	ldr	r1, [r3, #20]
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	88da      	ldrh	r2, [r3, #6]
 8002f56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002f58:	f004 fc73 	bl	8007842 <USB_ReadPMA>
 8002f5c:	e07c      	b.n	8003058 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	78db      	ldrb	r3, [r3, #3]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d108      	bne.n	8002f78 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f927 	bl	80031c0 <HAL_PCD_EP_DB_Receive>
 8002f72:	4603      	mov	r3, r0
 8002f74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002f76:	e06f      	b.n	8003058 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	441a      	add	r2, r3
 8002fa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d021      	beq.n	8003016 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002ffc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d02a      	beq.n	8003058 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	6959      	ldr	r1, [r3, #20]
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	891a      	ldrh	r2, [r3, #8]
 800300e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003010:	f004 fc17 	bl	8007842 <USB_ReadPMA>
 8003014:	e020      	b.n	8003058 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301e:	b29b      	uxth	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	3306      	adds	r3, #6
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800303e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003040:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	6959      	ldr	r1, [r3, #20]
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	895a      	ldrh	r2, [r3, #10]
 8003052:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003054:	f004 fbf5 	bl	8007842 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800305e:	441a      	add	r2, r3
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800306a:	441a      	add	r2, r3
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <PCD_EP_ISR_Handler+0x4c2>
 8003078:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	d206      	bcs.n	8003090 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f007 f9ad 	bl	800a3e8 <HAL_PCD_DataOutStageCallback>
 800308e:	e005      	b.n	800309c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003096:	4618      	mov	r0, r3
 8003098:	f002 fc18 	bl	80058cc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800309c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d07e      	beq.n	80031a4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80030a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d4:	843b      	strh	r3, [r7, #32]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	441a      	add	r2, r3
 80030e4:	8c3b      	ldrh	r3, [r7, #32]
 80030e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	78db      	ldrb	r3, [r3, #3]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d00c      	beq.n	8003114 <PCD_EP_ISR_Handler+0x554>
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	78db      	ldrb	r3, [r3, #3]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003106:	2b02      	cmp	r3, #2
 8003108:	d146      	bne.n	8003198 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800310a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d141      	bne.n	8003198 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311c:	b29b      	uxth	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	3302      	adds	r3, #2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800313c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	8bfb      	ldrh	r3, [r7, #30]
 8003144:	429a      	cmp	r2, r3
 8003146:	d906      	bls.n	8003156 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	8bfb      	ldrh	r3, [r7, #30]
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	619a      	str	r2, [r3, #24]
 8003154:	e002      	b.n	800315c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f007 f957 	bl	800a41e <HAL_PCD_DataInStageCallback>
 8003170:	e018      	b.n	80031a4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	8bfb      	ldrh	r3, [r7, #30]
 8003178:	441a      	add	r2, r3
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	8bfb      	ldrh	r3, [r7, #30]
 8003184:	441a      	add	r2, r3
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003190:	4618      	mov	r0, r3
 8003192:	f002 fb9b 	bl	80058cc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003196:	e005      	b.n	80031a4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003198:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800319a:	461a      	mov	r2, r3
 800319c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f91b 	bl	80033da <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f6ff ad0a 	blt.w	8002bca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3738      	adds	r7, #56	; 0x38
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d07e      	beq.n	80032d6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	3302      	adds	r3, #2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003200:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	8b7b      	ldrh	r3, [r7, #26]
 8003208:	429a      	cmp	r2, r3
 800320a:	d306      	bcc.n	800321a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	699a      	ldr	r2, [r3, #24]
 8003210:	8b7b      	ldrh	r3, [r7, #26]
 8003212:	1ad2      	subs	r2, r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	619a      	str	r2, [r3, #24]
 8003218:	e002      	b.n	8003220 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d123      	bne.n	8003270 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	833b      	strh	r3, [r7, #24]
 8003244:	8b3b      	ldrh	r3, [r7, #24]
 8003246:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800324a:	833b      	strh	r3, [r7, #24]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	8b3b      	ldrh	r3, [r7, #24]
 800325c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	b29b      	uxth	r3, r3
 800326e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01f      	beq.n	80032ba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003294:	82fb      	strh	r3, [r7, #22]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	441a      	add	r2, r3
 80032a4:	8afb      	ldrh	r3, [r7, #22]
 80032a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032ba:	8b7b      	ldrh	r3, [r7, #26]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8087 	beq.w	80033d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6959      	ldr	r1, [r3, #20]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	891a      	ldrh	r2, [r3, #8]
 80032ce:	8b7b      	ldrh	r3, [r7, #26]
 80032d0:	f004 fab7 	bl	8007842 <USB_ReadPMA>
 80032d4:	e07c      	b.n	80033d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032de:	b29b      	uxth	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	3306      	adds	r3, #6
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	8b7b      	ldrh	r3, [r7, #26]
 8003306:	429a      	cmp	r2, r3
 8003308:	d306      	bcc.n	8003318 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	8b7b      	ldrh	r3, [r7, #26]
 8003310:	1ad2      	subs	r2, r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	619a      	str	r2, [r3, #24]
 8003316:	e002      	b.n	800331e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2200      	movs	r2, #0
 800331c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d123      	bne.n	800336e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800333c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003340:	83fb      	strh	r3, [r7, #30]
 8003342:	8bfb      	ldrh	r3, [r7, #30]
 8003344:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003348:	83fb      	strh	r3, [r7, #30]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	441a      	add	r2, r3
 8003358:	8bfb      	ldrh	r3, [r7, #30]
 800335a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800335e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336a:	b29b      	uxth	r3, r3
 800336c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d11f      	bne.n	80033b8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003392:	83bb      	strh	r3, [r7, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	8bbb      	ldrh	r3, [r7, #28]
 80033a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033b8:	8b7b      	ldrh	r3, [r7, #26]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6959      	ldr	r1, [r3, #20]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	895a      	ldrh	r2, [r3, #10]
 80033ca:	8b7b      	ldrh	r3, [r7, #26]
 80033cc:	f004 fa39 	bl	8007842 <USB_ReadPMA>
    }
  }

  return count;
 80033d0:	8b7b      	ldrh	r3, [r7, #26]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b0a2      	sub	sp, #136	; 0x88
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	4613      	mov	r3, r2
 80033e6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 81c7 	beq.w	8003782 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	3302      	adds	r3, #2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003428:	429a      	cmp	r2, r3
 800342a:	d907      	bls.n	800343c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003434:	1ad2      	subs	r2, r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	619a      	str	r2, [r3, #24]
 800343a:	e002      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2200      	movs	r2, #0
 8003440:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 80b9 	bne.w	80035be <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d126      	bne.n	80034a2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003462:	b29b      	uxth	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	4413      	add	r3, r2
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	011a      	lsls	r2, r3, #4
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	4413      	add	r3, r2
 8003476:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29b      	uxth	r3, r3
 8003482:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003486:	b29a      	uxth	r2, r3
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800349a:	b29a      	uxth	r2, r3
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	801a      	strh	r2, [r3, #0]
 80034a0:	e01a      	b.n	80034d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	785b      	ldrb	r3, [r3, #1]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d116      	bne.n	80034d8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	4413      	add	r3, r2
 80034c0:	633b      	str	r3, [r7, #48]	; 0x30
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	011a      	lsls	r2, r3, #4
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	4413      	add	r3, r2
 80034cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	2200      	movs	r2, #0
 80034d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	623b      	str	r3, [r7, #32]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d126      	bne.n	8003534 <HAL_PCD_EP_DB_Transmit+0x15a>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	4413      	add	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	011a      	lsls	r2, r3, #4
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003518:	b29a      	uxth	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800352c:	b29a      	uxth	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	e017      	b.n	8003564 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d113      	bne.n	8003564 <HAL_PCD_EP_DB_Transmit+0x18a>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003544:	b29b      	uxth	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	4413      	add	r3, r2
 800354c:	623b      	str	r3, [r7, #32]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	011a      	lsls	r2, r3, #4
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	4413      	add	r3, r2
 8003558:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2200      	movs	r2, #0
 8003562:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f006 ff57 	bl	800a41e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 82d4 	beq.w	8003b24 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	827b      	strh	r3, [r7, #18]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	441a      	add	r2, r3
 80035a6:	8a7b      	ldrh	r3, [r7, #18]
 80035a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8013      	strh	r3, [r2, #0]
 80035bc:	e2b2      	b.n	8003b24 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d021      	beq.n	800360c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	441a      	add	r2, r3
 80035f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003608:	b29b      	uxth	r3, r3
 800360a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 8286 	bne.w	8003b24 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003620:	441a      	add	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800362e:	441a      	add	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	429a      	cmp	r2, r3
 800363e:	d309      	bcc.n	8003654 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364c:	1ad2      	subs	r2, r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	621a      	str	r2, [r3, #32]
 8003652:	e015      	b.n	8003680 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800365c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003660:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800366a:	e009      	b.n	8003680 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	785b      	ldrb	r3, [r3, #1]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d155      	bne.n	8003734 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	63bb      	str	r3, [r7, #56]	; 0x38
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003696:	b29b      	uxth	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	4413      	add	r3, r2
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	011a      	lsls	r2, r3, #4
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	4413      	add	r3, r2
 80036aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
 80036b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d112      	bne.n	80036dc <HAL_PCD_EP_DB_Transmit+0x302>
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d8:	801a      	strh	r2, [r3, #0]
 80036da:	e047      	b.n	800376c <HAL_PCD_EP_DB_Transmit+0x392>
 80036dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036de:	2b3e      	cmp	r3, #62	; 0x3e
 80036e0:	d811      	bhi.n	8003706 <HAL_PCD_EP_DB_Transmit+0x32c>
 80036e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80036f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f4:	3301      	adds	r3, #1
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	029b      	lsls	r3, r3, #10
 80036fe:	b29a      	uxth	r2, r3
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	e032      	b.n	800376c <HAL_PCD_EP_DB_Transmit+0x392>
 8003706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
 800370c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <HAL_PCD_EP_DB_Transmit+0x342>
 8003716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003718:	3b01      	subs	r3, #1
 800371a:	64bb      	str	r3, [r7, #72]	; 0x48
 800371c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371e:	b29b      	uxth	r3, r3
 8003720:	029b      	lsls	r3, r3, #10
 8003722:	b29b      	uxth	r3, r3
 8003724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800372c:	b29a      	uxth	r2, r3
 800372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	e01b      	b.n	800376c <HAL_PCD_EP_DB_Transmit+0x392>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d117      	bne.n	800376c <HAL_PCD_EP_DB_Transmit+0x392>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	643b      	str	r3, [r7, #64]	; 0x40
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374a:	b29b      	uxth	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003750:	4413      	add	r3, r2
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	011a      	lsls	r2, r3, #4
 800375a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800375c:	4413      	add	r3, r2
 800375e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003766:	b29a      	uxth	r2, r3
 8003768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6959      	ldr	r1, [r3, #20]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	891a      	ldrh	r2, [r3, #8]
 8003778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377a:	b29b      	uxth	r3, r3
 800377c:	f004 f81c 	bl	80077b8 <USB_WritePMA>
 8003780:	e1d0      	b.n	8003b24 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	3306      	adds	r3, #6
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d307      	bcc.n	80037ca <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037c2:	1ad2      	subs	r2, r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	619a      	str	r2, [r3, #24]
 80037c8:	e002      	b.n	80037d0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2200      	movs	r2, #0
 80037ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f040 80c4 	bne.w	8003962 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	785b      	ldrb	r3, [r3, #1]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d126      	bne.n	8003830 <HAL_PCD_EP_DB_Transmit+0x456>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f6:	4413      	add	r3, r2
 80037f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	011a      	lsls	r2, r3, #4
 8003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003802:	4413      	add	r3, r2
 8003804:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003808:	66bb      	str	r3, [r7, #104]	; 0x68
 800380a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003814:	b29a      	uxth	r2, r3
 8003816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	b29b      	uxth	r3, r3
 8003820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003828:	b29a      	uxth	r2, r3
 800382a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	e01a      	b.n	8003866 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d116      	bne.n	8003866 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	677b      	str	r3, [r7, #116]	; 0x74
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003846:	b29b      	uxth	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800384c:	4413      	add	r3, r2
 800384e:	677b      	str	r3, [r7, #116]	; 0x74
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	011a      	lsls	r2, r3, #4
 8003856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003858:	4413      	add	r3, r2
 800385a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800385e:	673b      	str	r3, [r7, #112]	; 0x70
 8003860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003862:	2200      	movs	r2, #0
 8003864:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	67bb      	str	r3, [r7, #120]	; 0x78
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	785b      	ldrb	r3, [r3, #1]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d12f      	bne.n	80038d4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003884:	b29b      	uxth	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800388c:	4413      	add	r3, r2
 800388e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	011a      	lsls	r2, r3, #4
 8003898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800389c:	4413      	add	r3, r2
 800389e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038d0:	801a      	strh	r2, [r3, #0]
 80038d2:	e017      	b.n	8003904 <HAL_PCD_EP_DB_Transmit+0x52a>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	785b      	ldrb	r3, [r3, #1]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d113      	bne.n	8003904 <HAL_PCD_EP_DB_Transmit+0x52a>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ea:	4413      	add	r3, r2
 80038ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	011a      	lsls	r2, r3, #4
 80038f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038f6:	4413      	add	r3, r2
 80038f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003900:	2200      	movs	r2, #0
 8003902:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	4619      	mov	r1, r3
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f006 fd87 	bl	800a41e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 8104 	bne.w	8003b24 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	441a      	add	r2, r3
 8003948:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800394c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395c:	b29b      	uxth	r3, r3
 800395e:	8013      	strh	r3, [r2, #0]
 8003960:	e0e0      	b.n	8003b24 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d121      	bne.n	80039b0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	441a      	add	r2, r3
 8003998:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800399c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	f040 80b4 	bne.w	8003b24 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	695a      	ldr	r2, [r3, #20]
 80039c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039c4:	441a      	add	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039d2:	441a      	add	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d309      	bcc.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	621a      	str	r2, [r3, #32]
 80039f6:	e015      	b.n	8003a24 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003a00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a0e:	e009      	b.n	8003a24 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	667b      	str	r3, [r7, #100]	; 0x64
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	785b      	ldrb	r3, [r3, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d155      	bne.n	8003ade <HAL_PCD_EP_DB_Transmit+0x704>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a46:	4413      	add	r3, r2
 8003a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	011a      	lsls	r2, r3, #4
 8003a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a52:	4413      	add	r3, r2
 8003a54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a58:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d112      	bne.n	8003a86 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a6e:	801a      	strh	r2, [r3, #0]
 8003a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	e044      	b.n	8003b10 <HAL_PCD_EP_DB_Transmit+0x736>
 8003a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a88:	2b3e      	cmp	r3, #62	; 0x3e
 8003a8a:	d811      	bhi.n	8003ab0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	657b      	str	r3, [r7, #84]	; 0x54
 8003a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	029b      	lsls	r3, r3, #10
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e02f      	b.n	8003b10 <HAL_PCD_EP_DB_Transmit+0x736>
 8003ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	657b      	str	r3, [r7, #84]	; 0x54
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	029b      	lsls	r3, r3, #10
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	e018      	b.n	8003b10 <HAL_PCD_EP_DB_Transmit+0x736>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	785b      	ldrb	r3, [r3, #1]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d114      	bne.n	8003b10 <HAL_PCD_EP_DB_Transmit+0x736>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003af4:	4413      	add	r3, r2
 8003af6:	667b      	str	r3, [r7, #100]	; 0x64
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	011a      	lsls	r2, r3, #4
 8003afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b00:	4413      	add	r3, r2
 8003b02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b06:	663b      	str	r3, [r7, #96]	; 0x60
 8003b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b0e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6959      	ldr	r1, [r3, #20]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	895a      	ldrh	r2, [r3, #10]
 8003b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f003 fe4a 	bl	80077b8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b3e:	823b      	strh	r3, [r7, #16]
 8003b40:	8a3b      	ldrh	r3, [r7, #16]
 8003b42:	f083 0310 	eor.w	r3, r3, #16
 8003b46:	823b      	strh	r3, [r7, #16]
 8003b48:	8a3b      	ldrh	r3, [r7, #16]
 8003b4a:	f083 0320 	eor.w	r3, r3, #32
 8003b4e:	823b      	strh	r3, [r7, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	441a      	add	r2, r3
 8003b5e:	8a3b      	ldrh	r3, [r7, #16]
 8003b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3788      	adds	r7, #136	; 0x88
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	817b      	strh	r3, [r7, #10]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b90:	897b      	ldrh	r3, [r7, #10]
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9c:	897b      	ldrh	r3, [r7, #10]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e009      	b.n	8003bc8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bb4:	897a      	ldrh	r2, [r7, #10]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003bc8:	893b      	ldrh	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d107      	bne.n	8003bde <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	80da      	strh	r2, [r3, #6]
 8003bdc:	e00b      	b.n	8003bf6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2201      	movs	r2, #1
 8003be2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd PCD handle
  * @param  state connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e272      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8087 	beq.w	8003d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c38:	4b92      	ldr	r3, [pc, #584]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d00c      	beq.n	8003c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c44:	4b8f      	ldr	r3, [pc, #572]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d112      	bne.n	8003c76 <HAL_RCC_OscConfig+0x5e>
 8003c50:	4b8c      	ldr	r3, [pc, #560]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5e:	4b89      	ldr	r3, [pc, #548]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d06c      	beq.n	8003d44 <HAL_RCC_OscConfig+0x12c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d168      	bne.n	8003d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e24c      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x76>
 8003c80:	4b80      	ldr	r3, [pc, #512]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a7f      	ldr	r2, [pc, #508]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e02e      	b.n	8003cec <HAL_RCC_OscConfig+0xd4>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x98>
 8003c96:	4b7b      	ldr	r3, [pc, #492]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7a      	ldr	r2, [pc, #488]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a77      	ldr	r2, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e01d      	b.n	8003cec <HAL_RCC_OscConfig+0xd4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0xbc>
 8003cba:	4b72      	ldr	r3, [pc, #456]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a71      	ldr	r2, [pc, #452]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	4b6f      	ldr	r3, [pc, #444]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6e      	ldr	r2, [pc, #440]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e00b      	b.n	8003cec <HAL_RCC_OscConfig+0xd4>
 8003cd4:	4b6b      	ldr	r3, [pc, #428]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6a      	ldr	r2, [pc, #424]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b68      	ldr	r3, [pc, #416]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a67      	ldr	r2, [pc, #412]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d013      	beq.n	8003d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fd f8e0 	bl	8000eb8 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fd f8dc 	bl	8000eb8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e200      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0xe4>
 8003d1a:	e014      	b.n	8003d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fd f8cc 	bl	8000eb8 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fd f8c8 	bl	8000eb8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e1ec      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	4b53      	ldr	r3, [pc, #332]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x10c>
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d063      	beq.n	8003e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d52:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d5e:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d11c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x18c>
 8003d6a:	4b46      	ldr	r3, [pc, #280]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d116      	bne.n	8003da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_OscConfig+0x176>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d001      	beq.n	8003d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e1c0      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4939      	ldr	r1, [pc, #228]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da2:	e03a      	b.n	8003e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dac:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fd f881 	bl	8000eb8 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dba:	f7fd f87d 	bl	8000eb8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1a1      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4927      	ldr	r1, [pc, #156]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]
 8003dec:	e015      	b.n	8003e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dee:	4b26      	ldr	r3, [pc, #152]	; (8003e88 <HAL_RCC_OscConfig+0x270>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fd f860 	bl	8000eb8 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfc:	f7fd f85c 	bl	8000eb8 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e180      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03a      	beq.n	8003e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d019      	beq.n	8003e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e34:	f7fd f840 	bl	8000eb8 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3c:	f7fd f83c 	bl	8000eb8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e160      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f000 faa6 	bl	80043ac <RCC_Delay>
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e68:	f7fd f826 	bl	8000eb8 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6e:	e00f      	b.n	8003e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e70:	f7fd f822 	bl	8000eb8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d908      	bls.n	8003e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e146      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	42420000 	.word	0x42420000
 8003e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e90:	4b92      	ldr	r3, [pc, #584]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e9      	bne.n	8003e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80a6 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eae:	4b8b      	ldr	r3, [pc, #556]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	4b88      	ldr	r3, [pc, #544]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4a87      	ldr	r2, [pc, #540]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	61d3      	str	r3, [r2, #28]
 8003ec6:	4b85      	ldr	r3, [pc, #532]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed6:	4b82      	ldr	r3, [pc, #520]	; (80040e0 <HAL_RCC_OscConfig+0x4c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d118      	bne.n	8003f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee2:	4b7f      	ldr	r3, [pc, #508]	; (80040e0 <HAL_RCC_OscConfig+0x4c8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7e      	ldr	r2, [pc, #504]	; (80040e0 <HAL_RCC_OscConfig+0x4c8>)
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eee:	f7fc ffe3 	bl	8000eb8 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef6:	f7fc ffdf 	bl	8000eb8 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b64      	cmp	r3, #100	; 0x64
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e103      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	4b75      	ldr	r3, [pc, #468]	; (80040e0 <HAL_RCC_OscConfig+0x4c8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x312>
 8003f1c:	4b6f      	ldr	r3, [pc, #444]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4a6e      	ldr	r2, [pc, #440]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6213      	str	r3, [r2, #32]
 8003f28:	e02d      	b.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x334>
 8003f32:	4b6a      	ldr	r3, [pc, #424]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4a69      	ldr	r2, [pc, #420]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	6213      	str	r3, [r2, #32]
 8003f3e:	4b67      	ldr	r3, [pc, #412]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	4a66      	ldr	r2, [pc, #408]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	f023 0304 	bic.w	r3, r3, #4
 8003f48:	6213      	str	r3, [r2, #32]
 8003f4a:	e01c      	b.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d10c      	bne.n	8003f6e <HAL_RCC_OscConfig+0x356>
 8003f54:	4b61      	ldr	r3, [pc, #388]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	4a60      	ldr	r2, [pc, #384]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	6213      	str	r3, [r2, #32]
 8003f60:	4b5e      	ldr	r3, [pc, #376]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	4a5d      	ldr	r2, [pc, #372]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6213      	str	r3, [r2, #32]
 8003f6c:	e00b      	b.n	8003f86 <HAL_RCC_OscConfig+0x36e>
 8003f6e:	4b5b      	ldr	r3, [pc, #364]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	4a5a      	ldr	r2, [pc, #360]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	6213      	str	r3, [r2, #32]
 8003f7a:	4b58      	ldr	r3, [pc, #352]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4a57      	ldr	r2, [pc, #348]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	f023 0304 	bic.w	r3, r3, #4
 8003f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d015      	beq.n	8003fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8e:	f7fc ff93 	bl	8000eb8 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	e00a      	b.n	8003fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fc ff8f 	bl	8000eb8 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e0b1      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ee      	beq.n	8003f96 <HAL_RCC_OscConfig+0x37e>
 8003fb8:	e014      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fba:	f7fc ff7d 	bl	8000eb8 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fc ff79 	bl	8000eb8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e09b      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	4b40      	ldr	r3, [pc, #256]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ee      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fea:	4b3c      	ldr	r3, [pc, #240]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4a3b      	ldr	r2, [pc, #236]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8003ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8087 	beq.w	800410e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d061      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d146      	bne.n	80040a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004014:	4b33      	ldr	r3, [pc, #204]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7fc ff4d 	bl	8000eb8 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004022:	f7fc ff49 	bl	8000eb8 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e06d      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f0      	bne.n	8004022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d108      	bne.n	800405c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800404a:	4b24      	ldr	r3, [pc, #144]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	4921      	ldr	r1, [pc, #132]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405c:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a19      	ldr	r1, [r3, #32]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	430b      	orrs	r3, r1
 800406e:	491b      	ldr	r1, [pc, #108]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fc ff1d 	bl	8000eb8 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004082:	f7fc ff19 	bl	8000eb8 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03d      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x46a>
 80040a0:	e035      	b.n	800410e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a2:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_RCC_OscConfig+0x4cc>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fc ff06 	bl	8000eb8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fc ff02 	bl	8000eb8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e026      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_OscConfig+0x4c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x498>
 80040ce:	e01e      	b.n	800410e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e019      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40007000 	.word	0x40007000
 80040e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <HAL_RCC_OscConfig+0x500>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d106      	bne.n	800410a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000

0800411c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0d0      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d910      	bls.n	8004160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b67      	ldr	r3, [pc, #412]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 0207 	bic.w	r2, r3, #7
 8004146:	4965      	ldr	r1, [pc, #404]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b63      	ldr	r3, [pc, #396]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0b8      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d020      	beq.n	80041ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004178:	4b59      	ldr	r3, [pc, #356]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a58      	ldr	r2, [pc, #352]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004182:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004190:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a52      	ldr	r2, [pc, #328]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800419a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800419c:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	494d      	ldr	r1, [pc, #308]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d040      	beq.n	800423c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d115      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e07f      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e073      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ea:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e06b      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fa:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4936      	ldr	r1, [pc, #216]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800420c:	f7fc fe54 	bl	8000eb8 <HAL_GetTick>
 8004210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7fc fe50 	bl	8000eb8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e053      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 020c 	and.w	r2, r3, #12
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	429a      	cmp	r2, r3
 800423a:	d1eb      	bne.n	8004214 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d210      	bcs.n	800426c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 0207 	bic.w	r2, r3, #7
 8004252:	4922      	ldr	r1, [pc, #136]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e032      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4916      	ldr	r1, [pc, #88]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	490e      	ldr	r1, [pc, #56]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042aa:	f000 f821 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 80042ae:	4602      	mov	r2, r0
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	490a      	ldr	r1, [pc, #40]	; (80042e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	5ccb      	ldrb	r3, [r1, r3]
 80042be:	fa22 f303 	lsr.w	r3, r2, r3
 80042c2:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1cc>)
 80042c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1d0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc fdb2 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40022000 	.word	0x40022000
 80042e0:	40021000 	.word	0x40021000
 80042e4:	0800b338 	.word	0x0800b338
 80042e8:	20000054 	.word	0x20000054
 80042ec:	20000058 	.word	0x20000058

080042f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f0:	b490      	push	{r4, r7}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042f6:	4b29      	ldr	r3, [pc, #164]	; (800439c <HAL_RCC_GetSysClockFreq+0xac>)
 80042f8:	1d3c      	adds	r4, r7, #4
 80042fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004300:	f240 2301 	movw	r3, #513	; 0x201
 8004304:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	2300      	movs	r3, #0
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800431a:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b04      	cmp	r3, #4
 8004328:	d002      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x40>
 800432a:	2b08      	cmp	r3, #8
 800432c:	d003      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x46>
 800432e:	e02b      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004330:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004332:	623b      	str	r3, [r7, #32]
      break;
 8004334:	e02b      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	0c9b      	lsrs	r3, r3, #18
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3328      	adds	r3, #40	; 0x28
 8004340:	443b      	add	r3, r7
 8004342:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004346:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d012      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	0c5b      	lsrs	r3, r3, #17
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	3328      	adds	r3, #40	; 0x28
 800435e:	443b      	add	r3, r7
 8004360:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004364:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800436a:	fb03 f202 	mul.w	r2, r3, r2
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	e004      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	623b      	str	r3, [r7, #32]
      break;
 8004386:	e002      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800438a:	623b      	str	r3, [r7, #32]
      break;
 800438c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800438e:	6a3b      	ldr	r3, [r7, #32]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3728      	adds	r7, #40	; 0x28
 8004394:	46bd      	mov	sp, r7
 8004396:	bc90      	pop	{r4, r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	0800b2b4 	.word	0x0800b2b4
 80043a0:	40021000 	.word	0x40021000
 80043a4:	007a1200 	.word	0x007a1200
 80043a8:	003d0900 	.word	0x003d0900

080043ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <RCC_Delay+0x34>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <RCC_Delay+0x38>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	0a5b      	lsrs	r3, r3, #9
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80043c8:	bf00      	nop
  }
  while (Delay --);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1e5a      	subs	r2, r3, #1
 80043ce:	60fa      	str	r2, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f9      	bne.n	80043c8 <RCC_Delay+0x1c>
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr
 80043e0:	20000054 	.word	0x20000054
 80043e4:	10624dd3 	.word	0x10624dd3

080043e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d07d      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004404:	2300      	movs	r3, #0
 8004406:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004408:	4b4f      	ldr	r3, [pc, #316]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10d      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004414:	4b4c      	ldr	r3, [pc, #304]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	4a4b      	ldr	r2, [pc, #300]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441e:	61d3      	str	r3, [r2, #28]
 8004420:	4b49      	ldr	r3, [pc, #292]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442c:	2301      	movs	r3, #1
 800442e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004430:	4b46      	ldr	r3, [pc, #280]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d118      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443c:	4b43      	ldr	r3, [pc, #268]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a42      	ldr	r2, [pc, #264]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004446:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004448:	f7fc fd36 	bl	8000eb8 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	e008      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004450:	f7fc fd32 	bl	8000eb8 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e06d      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800446e:	4b36      	ldr	r3, [pc, #216]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d02e      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d027      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800448c:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800449c:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044a2:	4a29      	ldr	r2, [pc, #164]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d014      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7fc fd01 	bl	8000eb8 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b8:	e00a      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ba:	f7fc fcfd 	bl	8000eb8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e036      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ee      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4917      	ldr	r1, [pc, #92]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4a13      	ldr	r2, [pc, #76]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800450c:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	490b      	ldr	r1, [pc, #44]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4904      	ldr	r1, [pc, #16]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	40007000 	.word	0x40007000
 8004550:	42420440 	.word	0x42420440

08004554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e041      	b.n	80045ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc fbaa 	bl	8000cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f000 fa70 	bl	8004a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	d001      	beq.n	800460c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e03a      	b.n	8004682 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <HAL_TIM_Base_Start_IT+0x98>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00e      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x58>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d009      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x58>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a14      	ldr	r2, [pc, #80]	; (8004690 <HAL_TIM_Base_Start_IT+0x9c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x58>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a13      	ldr	r2, [pc, #76]	; (8004694 <HAL_TIM_Base_Start_IT+0xa0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d111      	bne.n	8004670 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b06      	cmp	r3, #6
 800465c:	d010      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466e:	e007      	b.n	8004680 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800

08004698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0202 	mvn.w	r2, #2
 80046c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f9b1 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f9a4 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f9b3 	bl	8004a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0204 	mvn.w	r2, #4
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f987 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f97a 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f989 	bl	8004a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b08      	cmp	r3, #8
 8004754:	d122      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0208 	mvn.w	r2, #8
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2204      	movs	r2, #4
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f95d 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f950 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f95f 	bl	8004a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d122      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d11b      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0210 	mvn.w	r2, #16
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2208      	movs	r2, #8
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f933 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f926 	bl	8004a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f935 	bl	8004a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10e      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0201 	mvn.w	r2, #1
 8004814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fb fed0 	bl	80005bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b80      	cmp	r3, #128	; 0x80
 8004828:	d10e      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b80      	cmp	r3, #128	; 0x80
 8004836:	d107      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fa77 	bl	8004d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d10e      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d107      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800486c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f8f9 	bl	8004a66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b20      	cmp	r3, #32
 8004880:	d10e      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d107      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0220 	mvn.w	r2, #32
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa42 	bl	8004d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_TIM_ConfigClockSource+0x18>
 80048bc:	2302      	movs	r3, #2
 80048be:	e0b3      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x180>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f8:	d03e      	beq.n	8004978 <HAL_TIM_ConfigClockSource+0xd0>
 80048fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fe:	f200 8087 	bhi.w	8004a10 <HAL_TIM_ConfigClockSource+0x168>
 8004902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004906:	f000 8085 	beq.w	8004a14 <HAL_TIM_ConfigClockSource+0x16c>
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490e:	d87f      	bhi.n	8004a10 <HAL_TIM_ConfigClockSource+0x168>
 8004910:	2b70      	cmp	r3, #112	; 0x70
 8004912:	d01a      	beq.n	800494a <HAL_TIM_ConfigClockSource+0xa2>
 8004914:	2b70      	cmp	r3, #112	; 0x70
 8004916:	d87b      	bhi.n	8004a10 <HAL_TIM_ConfigClockSource+0x168>
 8004918:	2b60      	cmp	r3, #96	; 0x60
 800491a:	d050      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x116>
 800491c:	2b60      	cmp	r3, #96	; 0x60
 800491e:	d877      	bhi.n	8004a10 <HAL_TIM_ConfigClockSource+0x168>
 8004920:	2b50      	cmp	r3, #80	; 0x50
 8004922:	d03c      	beq.n	800499e <HAL_TIM_ConfigClockSource+0xf6>
 8004924:	2b50      	cmp	r3, #80	; 0x50
 8004926:	d873      	bhi.n	8004a10 <HAL_TIM_ConfigClockSource+0x168>
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d058      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x136>
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d86f      	bhi.n	8004a10 <HAL_TIM_ConfigClockSource+0x168>
 8004930:	2b30      	cmp	r3, #48	; 0x30
 8004932:	d064      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x156>
 8004934:	2b30      	cmp	r3, #48	; 0x30
 8004936:	d86b      	bhi.n	8004a10 <HAL_TIM_ConfigClockSource+0x168>
 8004938:	2b20      	cmp	r3, #32
 800493a:	d060      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x156>
 800493c:	2b20      	cmp	r3, #32
 800493e:	d867      	bhi.n	8004a10 <HAL_TIM_ConfigClockSource+0x168>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d05c      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x156>
 8004944:	2b10      	cmp	r3, #16
 8004946:	d05a      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004948:	e062      	b.n	8004a10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6899      	ldr	r1, [r3, #8]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f000 f966 	bl	8004c2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800496c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	609a      	str	r2, [r3, #8]
      break;
 8004976:	e04e      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6899      	ldr	r1, [r3, #8]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f000 f94f 	bl	8004c2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800499a:	609a      	str	r2, [r3, #8]
      break;
 800499c:	e03b      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6859      	ldr	r1, [r3, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f000 f8c6 	bl	8004b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2150      	movs	r1, #80	; 0x50
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f91d 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80049bc:	e02b      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f000 f8e4 	bl	8004b98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2160      	movs	r1, #96	; 0x60
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f90d 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80049dc:	e01b      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f000 f8a6 	bl	8004b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2140      	movs	r1, #64	; 0x40
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f8fd 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80049fc:	e00b      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f000 f8f4 	bl	8004bf6 <TIM_ITRx_SetConfig>
        break;
 8004a0e:	e002      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a29      	ldr	r2, [pc, #164]	; (8004b30 <TIM_Base_SetConfig+0xb8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00b      	beq.n	8004aa8 <TIM_Base_SetConfig+0x30>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d007      	beq.n	8004aa8 <TIM_Base_SetConfig+0x30>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a26      	ldr	r2, [pc, #152]	; (8004b34 <TIM_Base_SetConfig+0xbc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <TIM_Base_SetConfig+0x30>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <TIM_Base_SetConfig+0xc0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d108      	bne.n	8004aba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1c      	ldr	r2, [pc, #112]	; (8004b30 <TIM_Base_SetConfig+0xb8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_Base_SetConfig+0x62>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d007      	beq.n	8004ada <TIM_Base_SetConfig+0x62>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <TIM_Base_SetConfig+0xbc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_Base_SetConfig+0x62>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <TIM_Base_SetConfig+0xc0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <TIM_Base_SetConfig+0xb8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d103      	bne.n	8004b20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	615a      	str	r2, [r3, #20]
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr
 8004b30:	40012c00 	.word	0x40012c00
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800

08004b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f023 0201 	bic.w	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 030a 	bic.w	r3, r3, #10
 8004b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f023 0210 	bic.w	r2, r3, #16
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	031b      	lsls	r3, r3, #12
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	621a      	str	r2, [r3, #32]
}
 8004bec:	bf00      	nop
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f043 0307 	orr.w	r3, r3, #7
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	609a      	str	r2, [r3, #8]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b087      	sub	sp, #28
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	021a      	lsls	r2, r3, #8
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	609a      	str	r2, [r3, #8]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e046      	b.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ccc:	d009      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a10      	ldr	r2, [pc, #64]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10c      	bne.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800

08004d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr

08004d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d48:	b084      	sub	sp, #16
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	f107 0014 	add.w	r0, r7, #20
 8004d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	b004      	add	sp, #16
 8004d66:	4770      	bx	lr

08004d68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d78:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004da0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	4013      	ands	r3, r2
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004de0:	b084      	sub	sp, #16
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	f107 0014 	add.w	r0, r7, #20
 8004dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	b004      	add	sp, #16
 8004e1e:	4770      	bx	lr

08004e20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b09b      	sub	sp, #108	; 0x6c
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e46:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	78db      	ldrb	r3, [r3, #3]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d81f      	bhi.n	8004e92 <USB_ActivateEndpoint+0x72>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <USB_ActivateEndpoint+0x38>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e69 	.word	0x08004e69
 8004e5c:	08004e85 	.word	0x08004e85
 8004e60:	08004e9b 	.word	0x08004e9b
 8004e64:	08004e77 	.word	0x08004e77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004e68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e70:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e74:	e012      	b.n	8004e9c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e7a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004e7e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e82:	e00b      	b.n	8004e9c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e90:	e004      	b.n	8004e9c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004e98:	e000      	b.n	8004e9c <USB_ActivateEndpoint+0x7c>
      break;
 8004e9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	7b1b      	ldrb	r3, [r3, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f040 8149 	bne.w	80051a0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8084 	beq.w	8005020 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	4413      	add	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	011a      	lsls	r2, r3, #4
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	88db      	ldrh	r3, [r3, #6]
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	81fb      	strh	r3, [r7, #14]
 8004f5a:	89fb      	ldrh	r3, [r7, #14]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01b      	beq.n	8004f9c <USB_ActivateEndpoint+0x17c>
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	81bb      	strh	r3, [r7, #12]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	441a      	add	r2, r3
 8004f86:	89bb      	ldrh	r3, [r7, #12]
 8004f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	78db      	ldrb	r3, [r3, #3]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d020      	beq.n	8004fe6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fba:	813b      	strh	r3, [r7, #8]
 8004fbc:	893b      	ldrh	r3, [r7, #8]
 8004fbe:	f083 0320 	eor.w	r3, r3, #32
 8004fc2:	813b      	strh	r3, [r7, #8]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	441a      	add	r2, r3
 8004fce:	893b      	ldrh	r3, [r7, #8]
 8004fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	8013      	strh	r3, [r2, #0]
 8004fe4:	e27f      	b.n	80054e6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	441a      	add	r2, r3
 8005008:	897b      	ldrh	r3, [r7, #10]
 800500a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800500e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501a:	b29b      	uxth	r3, r3
 800501c:	8013      	strh	r3, [r2, #0]
 800501e:	e262      	b.n	80054e6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502a:	b29b      	uxth	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	4413      	add	r3, r2
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	011a      	lsls	r2, r3, #4
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	4413      	add	r3, r2
 800503e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	88db      	ldrh	r3, [r3, #6]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	b29b      	uxth	r3, r3
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	4413      	add	r3, r2
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	011a      	lsls	r2, r3, #4
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	4413      	add	r3, r2
 8005072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005076:	623b      	str	r3, [r7, #32]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d112      	bne.n	80050a6 <USB_ActivateEndpoint+0x286>
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800508a:	b29a      	uxth	r2, r3
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	801a      	strh	r2, [r3, #0]
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509e:	b29a      	uxth	r2, r3
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	e02f      	b.n	8005106 <USB_ActivateEndpoint+0x2e6>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b3e      	cmp	r3, #62	; 0x3e
 80050ac:	d813      	bhi.n	80050d6 <USB_ActivateEndpoint+0x2b6>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	663b      	str	r3, [r7, #96]	; 0x60
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <USB_ActivateEndpoint+0x2a8>
 80050c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050c4:	3301      	adds	r3, #1
 80050c6:	663b      	str	r3, [r7, #96]	; 0x60
 80050c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	029b      	lsls	r3, r3, #10
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e017      	b.n	8005106 <USB_ActivateEndpoint+0x2e6>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	663b      	str	r3, [r7, #96]	; 0x60
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <USB_ActivateEndpoint+0x2d0>
 80050ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ec:	3b01      	subs	r3, #1
 80050ee:	663b      	str	r3, [r7, #96]	; 0x60
 80050f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	029b      	lsls	r3, r3, #10
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005100:	b29a      	uxth	r2, r3
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	83fb      	strh	r3, [r7, #30]
 8005114:	8bfb      	ldrh	r3, [r7, #30]
 8005116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01b      	beq.n	8005156 <USB_ActivateEndpoint+0x336>
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005134:	83bb      	strh	r3, [r7, #28]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	8bbb      	ldrh	r3, [r7, #28]
 8005142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800514e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005152:	b29b      	uxth	r3, r3
 8005154:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516c:	837b      	strh	r3, [r7, #26]
 800516e:	8b7b      	ldrh	r3, [r7, #26]
 8005170:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005174:	837b      	strh	r3, [r7, #26]
 8005176:	8b7b      	ldrh	r3, [r7, #26]
 8005178:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800517c:	837b      	strh	r3, [r7, #26]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	441a      	add	r2, r3
 8005188:	8b7b      	ldrh	r3, [r7, #26]
 800518a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519a:	b29b      	uxth	r3, r3
 800519c:	8013      	strh	r3, [r2, #0]
 800519e:	e1a2      	b.n	80054e6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	441a      	add	r2, r3
 80051c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80051c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d8:	b29b      	uxth	r3, r3
 80051da:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	65bb      	str	r3, [r7, #88]	; 0x58
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ec:	4413      	add	r3, r2
 80051ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	011a      	lsls	r2, r3, #4
 80051f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	891b      	ldrh	r3, [r3, #8]
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	b29b      	uxth	r3, r3
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	653b      	str	r3, [r7, #80]	; 0x50
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800521a:	b29b      	uxth	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005220:	4413      	add	r3, r2
 8005222:	653b      	str	r3, [r7, #80]	; 0x50
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	011a      	lsls	r2, r3, #4
 800522a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522c:	4413      	add	r3, r2
 800522e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	895b      	ldrh	r3, [r3, #10]
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	b29b      	uxth	r3, r3
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005242:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f040 8091 	bne.w	8005370 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800525c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800525e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01b      	beq.n	800529e <USB_ActivateEndpoint+0x47e>
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	441a      	add	r2, r3
 8005288:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800528a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800528e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529a:	b29b      	uxth	r3, r3
 800529c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80052ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01b      	beq.n	80052ee <USB_ActivateEndpoint+0x4ce>
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	441a      	add	r2, r3
 80052d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005304:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005306:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005308:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800530c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800530e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005310:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005314:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005332:	b29b      	uxth	r3, r3
 8005334:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534c:	867b      	strh	r3, [r7, #50]	; 0x32
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	441a      	add	r2, r3
 8005358:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800535a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536a:	b29b      	uxth	r3, r3
 800536c:	8013      	strh	r3, [r2, #0]
 800536e:	e0ba      	b.n	80054e6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005380:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01d      	beq.n	80053c8 <USB_ActivateEndpoint+0x5a8>
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	441a      	add	r2, r3
 80053b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01d      	beq.n	8005420 <USB_ActivateEndpoint+0x600>
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	441a      	add	r2, r3
 8005408:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800540c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005418:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800541c:	b29b      	uxth	r3, r3
 800541e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	78db      	ldrb	r3, [r3, #3]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d024      	beq.n	8005472 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800543e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005442:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005446:	f083 0320 	eor.w	r3, r3, #32
 800544a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	441a      	add	r2, r3
 8005458:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800545c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546c:	b29b      	uxth	r3, r3
 800546e:	8013      	strh	r3, [r2, #0]
 8005470:	e01d      	b.n	80054ae <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800549a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800549e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80054e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	376c      	adds	r7, #108	; 0x6c
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b08d      	sub	sp, #52	; 0x34
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	7b1b      	ldrb	r3, [r3, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 808e 	bne.w	8005624 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d044      	beq.n	800559a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	81bb      	strh	r3, [r7, #12]
 800551e:	89bb      	ldrh	r3, [r7, #12]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <USB_DeactivateEndpoint+0x6c>
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	817b      	strh	r3, [r7, #10]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	897b      	ldrh	r3, [r7, #10]
 800554c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005558:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005576:	813b      	strh	r3, [r7, #8]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	893b      	ldrh	r3, [r7, #8]
 8005584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]
 8005598:	e192      	b.n	80058c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	827b      	strh	r3, [r7, #18]
 80055a8:	8a7b      	ldrh	r3, [r7, #18]
 80055aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01b      	beq.n	80055ea <USB_DeactivateEndpoint+0xf6>
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	823b      	strh	r3, [r7, #16]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8a3b      	ldrh	r3, [r7, #16]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	81fb      	strh	r3, [r7, #14]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	89fb      	ldrh	r3, [r7, #14]
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]
 8005622:	e14d      	b.n	80058c0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b00      	cmp	r3, #0
 800562a:	f040 80a5 	bne.w	8005778 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	843b      	strh	r3, [r7, #32]
 800563c:	8c3b      	ldrh	r3, [r7, #32]
 800563e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01b      	beq.n	800567e <USB_DeactivateEndpoint+0x18a>
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565c:	83fb      	strh	r3, [r7, #30]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	8bfb      	ldrh	r3, [r7, #30]
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	83bb      	strh	r3, [r7, #28]
 800568c:	8bbb      	ldrh	r3, [r7, #28]
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01b      	beq.n	80056ce <USB_DeactivateEndpoint+0x1da>
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ac:	837b      	strh	r3, [r7, #26]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	8b7b      	ldrh	r3, [r7, #26]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	833b      	strh	r3, [r7, #24]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8b3b      	ldrh	r3, [r7, #24]
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571c:	82fb      	strh	r3, [r7, #22]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	8afb      	ldrh	r3, [r7, #22]
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005754:	82bb      	strh	r3, [r7, #20]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	441a      	add	r2, r3
 8005760:	8abb      	ldrh	r3, [r7, #20]
 8005762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005772:	b29b      	uxth	r3, r3
 8005774:	8013      	strh	r3, [r2, #0]
 8005776:	e0a3      	b.n	80058c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005786:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01b      	beq.n	80057c8 <USB_DeactivateEndpoint+0x2d4>
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	441a      	add	r2, r3
 80057b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80057b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80057d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01b      	beq.n	8005818 <USB_DeactivateEndpoint+0x324>
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005814:	b29b      	uxth	r3, r3
 8005816:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800583c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584c:	b29b      	uxth	r3, r3
 800584e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005866:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	441a      	add	r2, r3
 8005872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800587c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	847b      	strh	r3, [r7, #34]	; 0x22
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058bc:	b29b      	uxth	r3, r3
 80058be:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3734      	adds	r7, #52	; 0x34
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b0cc      	sub	sp, #304	; 0x130
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058da:	6018      	str	r0, [r3, #0]
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	f041 817d 	bne.w	8006bf2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d908      	bls.n	8005926 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005924:	e007      	b.n	8005936 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	7b1b      	ldrb	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d152      	bne.n	80059ec <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6959      	ldr	r1, [r3, #20]
 8005952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	88da      	ldrh	r2, [r3, #6]
 800595e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005962:	b29b      	uxth	r3, r3
 8005964:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005968:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800596c:	6800      	ldr	r0, [r0, #0]
 800596e:	f001 ff23 	bl	80077b8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005976:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800597a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800597e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	4619      	mov	r1, r3
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80059a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059a4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	440a      	add	r2, r1
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	011a      	lsls	r2, r3, #4
 80059bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059da:	b29a      	uxth	r2, r3
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	f001 b8b5 	b.w	8006b56 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	78db      	ldrb	r3, [r3, #3]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	f040 84c6 	bne.w	800638a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6a1a      	ldr	r2, [r3, #32]
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	f240 8443 	bls.w	80062a2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	441a      	add	r2, r3
 8005a60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a1a      	ldr	r2, [r3, #32]
 8005a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a88:	1ad2      	subs	r2, r2, r3
 8005a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 823e 	beq.w	8005f3a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005ac6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 809a 	bne.w	8005c18 <USB_EPStartXfer+0x34c>
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005af0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b16:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	011a      	lsls	r2, r3, #4
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d122      	bne.n	8005b96 <USB_EPStartXfer+0x2ca>
 8005b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e079      	b.n	8005c8a <USB_EPStartXfer+0x3be>
 8005b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9c:	d81b      	bhi.n	8005bd6 <USB_EPStartXfer+0x30a>
 8005b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <USB_EPStartXfer+0x2f2>
 8005bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bb8:	3301      	adds	r3, #1
 8005bba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005bbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	029b      	lsls	r3, r3, #10
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	e059      	b.n	8005c8a <USB_EPStartXfer+0x3be>
 8005bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <USB_EPStartXfer+0x32a>
 8005bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	029b      	lsls	r3, r3, #10
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e038      	b.n	8005c8a <USB_EPStartXfer+0x3be>
 8005c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d130      	bne.n	8005c8a <USB_EPStartXfer+0x3be>
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c46:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	011a      	lsls	r2, r3, #4
 8005c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c62:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	895b      	ldrh	r3, [r3, #10]
 8005c96:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6959      	ldr	r1, [r3, #20]
 8005ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cb0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cb4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cb8:	6800      	ldr	r0, [r0, #0]
 8005cba:	f001 fd7d 	bl	80077b8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695a      	ldr	r2, [r3, #20]
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	441a      	add	r2, r3
 8005cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6a1a      	ldr	r2, [r3, #32]
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d90f      	bls.n	8005d18 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d08:	1ad2      	subs	r2, r2, r3
 8005d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	621a      	str	r2, [r3, #32]
 8005d16:	e00e      	b.n	8005d36 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2200      	movs	r2, #0
 8005d34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 809a 	bne.w	8005e7c <USB_EPStartXfer+0x5b0>
 8005d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005d50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d54:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d72:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005d76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d7a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	440a      	add	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	011a      	lsls	r2, r3, #4
 8005d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d96:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d122      	bne.n	8005dfa <USB_EPStartXfer+0x52e>
 8005db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dcc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	e083      	b.n	8005f02 <USB_EPStartXfer+0x636>
 8005dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8005e00:	d81b      	bhi.n	8005e3a <USB_EPStartXfer+0x56e>
 8005e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d004      	beq.n	8005e22 <USB_EPStartXfer+0x556>
 8005e18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	e063      	b.n	8005f02 <USB_EPStartXfer+0x636>
 8005e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d104      	bne.n	8005e5a <USB_EPStartXfer+0x58e>
 8005e50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e54:	3b01      	subs	r3, #1
 8005e56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	029b      	lsls	r3, r3, #10
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	801a      	strh	r2, [r3, #0]
 8005e7a:	e042      	b.n	8005f02 <USB_EPStartXfer+0x636>
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d13a      	bne.n	8005f02 <USB_EPStartXfer+0x636>
 8005e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e98:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005eba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ebe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005ec2:	6812      	ldr	r2, [r2, #0]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	011a      	lsls	r2, r3, #4
 8005ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	891b      	ldrh	r3, [r3, #8]
 8005f0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6959      	ldr	r1, [r3, #20]
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f30:	6800      	ldr	r0, [r0, #0]
 8005f32:	f001 fc41 	bl	80077b8 <USB_WritePMA>
 8005f36:	f000 be0e 	b.w	8006b56 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d16d      	bne.n	8006026 <USB_EPStartXfer+0x75a>
 8005f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6a:	4413      	add	r3, r2
 8005f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	011a      	lsls	r2, r3, #4
 8005f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f84:	647b      	str	r3, [r7, #68]	; 0x44
 8005f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d112      	bne.n	8005fb4 <USB_EPStartXfer+0x6e8>
 8005f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	e063      	b.n	800607c <USB_EPStartXfer+0x7b0>
 8005fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005fba:	d817      	bhi.n	8005fec <USB_EPStartXfer+0x720>
 8005fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <USB_EPStartXfer+0x710>
 8005fd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005fdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	029b      	lsls	r3, r3, #10
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e047      	b.n	800607c <USB_EPStartXfer+0x7b0>
 8005fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d104      	bne.n	800600c <USB_EPStartXfer+0x740>
 8006002:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006006:	3b01      	subs	r3, #1
 8006008:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800600c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006010:	b29b      	uxth	r3, r3
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	b29b      	uxth	r3, r3
 8006016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601e:	b29a      	uxth	r2, r3
 8006020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e02a      	b.n	800607c <USB_EPStartXfer+0x7b0>
 8006026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d122      	bne.n	800607c <USB_EPStartXfer+0x7b0>
 8006036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	653b      	str	r3, [r7, #80]	; 0x50
 8006042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006050:	b29b      	uxth	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006056:	4413      	add	r3, r2
 8006058:	653b      	str	r3, [r7, #80]	; 0x50
 800605a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	011a      	lsls	r2, r3, #4
 8006068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606a:	4413      	add	r3, r2
 800606c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006070:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006076:	b29a      	uxth	r2, r3
 8006078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800607a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800607c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	891b      	ldrh	r3, [r3, #8]
 8006088:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800608c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6959      	ldr	r1, [r3, #20]
 8006098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609c:	b29b      	uxth	r3, r3
 800609e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060a2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80060a6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80060aa:	6800      	ldr	r0, [r0, #0]
 80060ac:	f001 fb84 	bl	80077b8 <USB_WritePMA>
            ep->xfer_buff += len;
 80060b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c0:	441a      	add	r2, r3
 80060c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a1a      	ldr	r2, [r3, #32]
 80060da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d90f      	bls.n	800610a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6a1a      	ldr	r2, [r3, #32]
 80060f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fa:	1ad2      	subs	r2, r2, r3
 80060fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	621a      	str	r2, [r3, #32]
 8006108:	e00e      	b.n	8006128 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800610a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800611a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2200      	movs	r2, #0
 8006126:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	643b      	str	r3, [r7, #64]	; 0x40
 8006134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d16d      	bne.n	8006220 <USB_EPStartXfer+0x954>
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615e:	b29b      	uxth	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	4413      	add	r3, r2
 8006166:	63bb      	str	r3, [r7, #56]	; 0x38
 8006168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	4413      	add	r3, r2
 800617a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
 8006180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d112      	bne.n	80061ae <USB_EPStartXfer+0x8e2>
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006192:	b29a      	uxth	r2, r3
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	e05d      	b.n	800626a <USB_EPStartXfer+0x99e>
 80061ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b2:	2b3e      	cmp	r3, #62	; 0x3e
 80061b4:	d817      	bhi.n	80061e6 <USB_EPStartXfer+0x91a>
 80061b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80061c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <USB_EPStartXfer+0x90a>
 80061cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061d0:	3301      	adds	r3, #1
 80061d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80061d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061da:	b29b      	uxth	r3, r3
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	b29a      	uxth	r2, r3
 80061e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	e041      	b.n	800626a <USB_EPStartXfer+0x99e>
 80061e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80061f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d104      	bne.n	8006206 <USB_EPStartXfer+0x93a>
 80061fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006200:	3b01      	subs	r3, #1
 8006202:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006206:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800620a:	b29b      	uxth	r3, r3
 800620c:	029b      	lsls	r3, r3, #10
 800620e:	b29b      	uxth	r3, r3
 8006210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006218:	b29a      	uxth	r2, r3
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	801a      	strh	r2, [r3, #0]
 800621e:	e024      	b.n	800626a <USB_EPStartXfer+0x99e>
 8006220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d11c      	bne.n	800626a <USB_EPStartXfer+0x99e>
 8006230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623e:	b29b      	uxth	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006244:	4413      	add	r3, r2
 8006246:	643b      	str	r3, [r7, #64]	; 0x40
 8006248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	011a      	lsls	r2, r3, #4
 8006256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006258:	4413      	add	r3, r2
 800625a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006264:	b29a      	uxth	r2, r3
 8006266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006268:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800626a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	895b      	ldrh	r3, [r3, #10]
 8006276:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800627a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6959      	ldr	r1, [r3, #20]
 8006286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628a:	b29b      	uxth	r3, r3
 800628c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006290:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006294:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006298:	6800      	ldr	r0, [r0, #0]
 800629a:	f001 fa8d 	bl	80077b8 <USB_WritePMA>
 800629e:	f000 bc5a 	b.w	8006b56 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80062a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80062b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80062d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80062dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	441a      	add	r2, r3
 80062f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80062fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630a:	b29b      	uxth	r3, r3
 800630c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800630e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006312:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800631a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006328:	b29b      	uxth	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800632e:	4413      	add	r3, r2
 8006330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	011a      	lsls	r2, r3, #4
 8006340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006342:	4413      	add	r3, r2
 8006344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006348:	65bb      	str	r3, [r7, #88]	; 0x58
 800634a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634e:	b29a      	uxth	r2, r3
 8006350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006352:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	891b      	ldrh	r3, [r3, #8]
 8006360:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6959      	ldr	r1, [r3, #20]
 8006370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006374:	b29b      	uxth	r3, r3
 8006376:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800637a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800637e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006382:	6800      	ldr	r0, [r0, #0]
 8006384:	f001 fa18 	bl	80077b8 <USB_WritePMA>
 8006388:	e3e5      	b.n	8006b56 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800638a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	441a      	add	r2, r3
 80063ce:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80063d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80063e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6a1a      	ldr	r2, [r3, #32]
 80063f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 81bc 	beq.w	80067a4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800642c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006430:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d16d      	bne.n	8006526 <USB_EPStartXfer+0xc5a>
 800644a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	67bb      	str	r3, [r7, #120]	; 0x78
 8006456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646a:	4413      	add	r3, r2
 800646c:	67bb      	str	r3, [r7, #120]	; 0x78
 800646e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	011a      	lsls	r2, r3, #4
 800647c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800647e:	4413      	add	r3, r2
 8006480:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006484:	677b      	str	r3, [r7, #116]	; 0x74
 8006486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d112      	bne.n	80064b4 <USB_EPStartXfer+0xbe8>
 800648e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006498:	b29a      	uxth	r2, r3
 800649a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800649c:	801a      	strh	r2, [r3, #0]
 800649e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b0:	801a      	strh	r2, [r3, #0]
 80064b2:	e060      	b.n	8006576 <USB_EPStartXfer+0xcaa>
 80064b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b8:	2b3e      	cmp	r3, #62	; 0x3e
 80064ba:	d817      	bhi.n	80064ec <USB_EPStartXfer+0xc20>
 80064bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80064c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <USB_EPStartXfer+0xc10>
 80064d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80064d6:	3301      	adds	r3, #1
 80064d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80064dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	029b      	lsls	r3, r3, #10
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	e044      	b.n	8006576 <USB_EPStartXfer+0xcaa>
 80064ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80064f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <USB_EPStartXfer+0xc40>
 8006502:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006506:	3b01      	subs	r3, #1
 8006508:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800650c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006510:	b29b      	uxth	r3, r3
 8006512:	029b      	lsls	r3, r3, #10
 8006514:	b29b      	uxth	r3, r3
 8006516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651e:	b29a      	uxth	r2, r3
 8006520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	e027      	b.n	8006576 <USB_EPStartXfer+0xcaa>
 8006526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d11f      	bne.n	8006576 <USB_EPStartXfer+0xcaa>
 8006536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006544:	b29b      	uxth	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800654c:	4413      	add	r3, r2
 800654e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	011a      	lsls	r2, r3, #4
 8006560:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006564:	4413      	add	r3, r2
 8006566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800656a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800656c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006570:	b29a      	uxth	r2, r3
 8006572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006574:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	895b      	ldrh	r3, [r3, #10]
 8006582:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6959      	ldr	r1, [r3, #20]
 8006592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006596:	b29b      	uxth	r3, r3
 8006598:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800659c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80065a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80065a4:	6800      	ldr	r0, [r0, #0]
 80065a6:	f001 f907 	bl	80077b8 <USB_WritePMA>
          ep->xfer_buff += len;
 80065aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695a      	ldr	r2, [r3, #20]
 80065b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ba:	441a      	add	r2, r3
 80065bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80065c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a1a      	ldr	r2, [r3, #32]
 80065d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d90f      	bls.n	8006604 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80065e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6a1a      	ldr	r2, [r3, #32]
 80065f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f4:	1ad2      	subs	r2, r2, r3
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	621a      	str	r2, [r3, #32]
 8006602:	e00e      	b.n	8006622 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 8295 	beq.w	8006b56 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800662c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	785b      	ldrb	r3, [r3, #1]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d16d      	bne.n	8006718 <USB_EPStartXfer+0xe4c>
 800663c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006640:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	66bb      	str	r3, [r7, #104]	; 0x68
 8006648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006656:	b29b      	uxth	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800665c:	4413      	add	r3, r2
 800665e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	011a      	lsls	r2, r3, #4
 800666e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006670:	4413      	add	r3, r2
 8006672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006676:	667b      	str	r3, [r7, #100]	; 0x64
 8006678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d112      	bne.n	80066a6 <USB_EPStartXfer+0xdda>
 8006680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800668a:	b29a      	uxth	r2, r3
 800668c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	e063      	b.n	800676e <USB_EPStartXfer+0xea2>
 80066a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066aa:	2b3e      	cmp	r3, #62	; 0x3e
 80066ac:	d817      	bhi.n	80066de <USB_EPStartXfer+0xe12>
 80066ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <USB_EPStartXfer+0xe02>
 80066c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c8:	3301      	adds	r3, #1
 80066ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066da:	801a      	strh	r2, [r3, #0]
 80066dc:	e047      	b.n	800676e <USB_EPStartXfer+0xea2>
 80066de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d104      	bne.n	80066fe <USB_EPStartXfer+0xe32>
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f8:	3b01      	subs	r3, #1
 80066fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006702:	b29b      	uxth	r3, r3
 8006704:	029b      	lsls	r3, r3, #10
 8006706:	b29b      	uxth	r3, r3
 8006708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006710:	b29a      	uxth	r2, r3
 8006712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e02a      	b.n	800676e <USB_EPStartXfer+0xea2>
 8006718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d122      	bne.n	800676e <USB_EPStartXfer+0xea2>
 8006728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	673b      	str	r3, [r7, #112]	; 0x70
 8006734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006748:	4413      	add	r3, r2
 800674a:	673b      	str	r3, [r7, #112]	; 0x70
 800674c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	011a      	lsls	r2, r3, #4
 800675a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800675c:	4413      	add	r3, r2
 800675e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006762:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006768:	b29a      	uxth	r2, r3
 800676a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800676e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	891b      	ldrh	r3, [r3, #8]
 800677a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800677e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6959      	ldr	r1, [r3, #20]
 800678a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800678e:	b29b      	uxth	r3, r3
 8006790:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006794:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006798:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800679c:	6800      	ldr	r0, [r0, #0]
 800679e:	f001 f80b 	bl	80077b8 <USB_WritePMA>
 80067a2:	e1d8      	b.n	8006b56 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d178      	bne.n	80068a6 <USB_EPStartXfer+0xfda>
 80067b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067d8:	4413      	add	r3, r2
 80067da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	011a      	lsls	r2, r3, #4
 80067ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067f0:	4413      	add	r3, r2
 80067f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <USB_EPStartXfer+0xf64>
 8006802:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800680e:	b29a      	uxth	r2, r3
 8006810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006826:	b29a      	uxth	r2, r3
 8006828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	e06b      	b.n	8006908 <USB_EPStartXfer+0x103c>
 8006830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006834:	2b3e      	cmp	r3, #62	; 0x3e
 8006836:	d818      	bhi.n	800686a <USB_EPStartXfer+0xf9e>
 8006838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <USB_EPStartXfer+0xf8c>
 800684e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006852:	3301      	adds	r3, #1
 8006854:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006858:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800685c:	b29b      	uxth	r3, r3
 800685e:	029b      	lsls	r3, r3, #10
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e04e      	b.n	8006908 <USB_EPStartXfer+0x103c>
 800686a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <USB_EPStartXfer+0xfbe>
 8006880:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006884:	3b01      	subs	r3, #1
 8006886:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800688a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800688e:	b29b      	uxth	r3, r3
 8006890:	029b      	lsls	r3, r3, #10
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689c:	b29a      	uxth	r2, r3
 800689e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068a2:	801a      	strh	r2, [r3, #0]
 80068a4:	e030      	b.n	8006908 <USB_EPStartXfer+0x103c>
 80068a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d128      	bne.n	8006908 <USB_EPStartXfer+0x103c>
 80068b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068da:	4413      	add	r3, r2
 80068dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	011a      	lsls	r2, r3, #4
 80068ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068f2:	4413      	add	r3, r2
 80068f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006900:	b29a      	uxth	r2, r3
 8006902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006906:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	891b      	ldrh	r3, [r3, #8]
 8006914:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6959      	ldr	r1, [r3, #20]
 8006924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006928:	b29b      	uxth	r3, r3
 800692a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800692e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006932:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006936:	6800      	ldr	r0, [r0, #0]
 8006938:	f000 ff3e 	bl	80077b8 <USB_WritePMA>
          ep->xfer_buff += len;
 800693c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695a      	ldr	r2, [r3, #20]
 8006948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800694c:	441a      	add	r2, r3
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800695a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6a1a      	ldr	r2, [r3, #32]
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	429a      	cmp	r2, r3
 8006974:	d90f      	bls.n	8006996 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6a1a      	ldr	r2, [r3, #32]
 8006982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006986:	1ad2      	subs	r2, r2, r3
 8006988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	621a      	str	r2, [r3, #32]
 8006994:	e00e      	b.n	80069b4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80069a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80069b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80cc 	beq.w	8006b56 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d178      	bne.n	8006ace <USB_EPStartXfer+0x1202>
 80069dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	461a      	mov	r2, r3
 80069fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a00:	4413      	add	r3, r2
 8006a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	011a      	lsls	r2, r3, #4
 8006a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a18:	4413      	add	r3, r2
 8006a1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d116      	bne.n	8006a58 <USB_EPStartXfer+0x118c>
 8006a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a54:	801a      	strh	r2, [r3, #0]
 8006a56:	e064      	b.n	8006b22 <USB_EPStartXfer+0x1256>
 8006a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a5c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a5e:	d818      	bhi.n	8006a92 <USB_EPStartXfer+0x11c6>
 8006a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <USB_EPStartXfer+0x11b4>
 8006a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	029b      	lsls	r3, r3, #10
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e047      	b.n	8006b22 <USB_EPStartXfer+0x1256>
 8006a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <USB_EPStartXfer+0x11e6>
 8006aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aac:	3b01      	subs	r3, #1
 8006aae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	029b      	lsls	r3, r3, #10
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	e029      	b.n	8006b22 <USB_EPStartXfer+0x1256>
 8006ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d121      	bne.n	8006b22 <USB_EPStartXfer+0x1256>
 8006ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006af4:	4413      	add	r3, r2
 8006af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	011a      	lsls	r2, r3, #4
 8006b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	895b      	ldrh	r3, [r3, #10]
 8006b2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6959      	ldr	r1, [r3, #20]
 8006b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b48:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b4c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b50:	6800      	ldr	r0, [r0, #0]
 8006b52:	f000 fe31 	bl	80077b8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b78:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b84:	8013      	strh	r3, [r2, #0]
 8006b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006b8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b92:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006b96:	8812      	ldrh	r2, [r2, #0]
 8006b98:	f082 0210 	eor.w	r2, r2, #16
 8006b9c:	801a      	strh	r2, [r3, #0]
 8006b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006ba6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006baa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006bae:	8812      	ldrh	r2, [r2, #0]
 8006bb0:	f082 0220 	eor.w	r2, r2, #32
 8006bb4:	801a      	strh	r2, [r3, #0]
 8006bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	441a      	add	r2, r3
 8006bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	8013      	strh	r3, [r2, #0]
 8006bee:	f000 bc9f 	b.w	8007530 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	7b1b      	ldrb	r3, [r3, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 80ae 	bne.w	8006d60 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d917      	bls.n	8006c50 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c40:	1ad2      	subs	r2, r2, r3
 8006c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	619a      	str	r2, [r3, #24]
 8006c4e:	e00e      	b.n	8006c6e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006c92:	4413      	add	r3, r2
 8006c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	011a      	lsls	r2, r3, #4
 8006ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006caa:	4413      	add	r3, r2
 8006cac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d116      	bne.n	8006cea <USB_EPStartXfer+0x141e>
 8006cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	e3e8      	b.n	80074bc <USB_EPStartXfer+0x1bf0>
 8006cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cee:	2b3e      	cmp	r3, #62	; 0x3e
 8006cf0:	d818      	bhi.n	8006d24 <USB_EPStartXfer+0x1458>
 8006cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d004      	beq.n	8006d12 <USB_EPStartXfer+0x1446>
 8006d08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006d12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	029b      	lsls	r3, r3, #10
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	e3cb      	b.n	80074bc <USB_EPStartXfer+0x1bf0>
 8006d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <USB_EPStartXfer+0x1478>
 8006d3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006d44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	029b      	lsls	r3, r3, #10
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	e3ad      	b.n	80074bc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	78db      	ldrb	r3, [r3, #3]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	f040 8200 	bne.w	8007172 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f040 8091 	bne.w	8006ea6 <USB_EPStartXfer+0x15da>
 8006d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006da8:	4413      	add	r3, r2
 8006daa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	011a      	lsls	r2, r3, #4
 8006dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d116      	bne.n	8006e08 <USB_EPStartXfer+0x153c>
 8006dda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e04:	801a      	strh	r2, [r3, #0]
 8006e06:	e083      	b.n	8006f10 <USB_EPStartXfer+0x1644>
 8006e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	2b3e      	cmp	r3, #62	; 0x3e
 8006e16:	d820      	bhi.n	8006e5a <USB_EPStartXfer+0x158e>
 8006e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <USB_EPStartXfer+0x157c>
 8006e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e42:	3301      	adds	r3, #1
 8006e44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	029b      	lsls	r3, r3, #10
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e56:	801a      	strh	r2, [r3, #0]
 8006e58:	e05a      	b.n	8006f10 <USB_EPStartXfer+0x1644>
 8006e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f003 031f 	and.w	r3, r3, #31
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d104      	bne.n	8006e8a <USB_EPStartXfer+0x15be>
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e84:	3b01      	subs	r3, #1
 8006e86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	029b      	lsls	r3, r3, #10
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	e034      	b.n	8006f10 <USB_EPStartXfer+0x1644>
 8006ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d12c      	bne.n	8006f10 <USB_EPStartXfer+0x1644>
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eda:	4413      	add	r3, r2
 8006edc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	011a      	lsls	r2, r3, #4
 8006eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f0e:	801a      	strh	r2, [r3, #0]
 8006f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f040 8091 	bne.w	8007052 <USB_EPStartXfer+0x1786>
 8006f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f54:	4413      	add	r3, r2
 8006f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	011a      	lsls	r2, r3, #4
 8006f68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d116      	bne.n	8006fb4 <USB_EPStartXfer+0x16e8>
 8006f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fb0:	801a      	strh	r2, [r3, #0]
 8006fb2:	e07c      	b.n	80070ae <USB_EPStartXfer+0x17e2>
 8006fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8006fc2:	d820      	bhi.n	8007006 <USB_EPStartXfer+0x173a>
 8006fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <USB_EPStartXfer+0x1728>
 8006fea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fee:	3301      	adds	r3, #1
 8006ff0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ff4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	029b      	lsls	r3, r3, #10
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	e053      	b.n	80070ae <USB_EPStartXfer+0x17e2>
 8007006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	2b00      	cmp	r3, #0
 800702a:	d104      	bne.n	8007036 <USB_EPStartXfer+0x176a>
 800702c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007030:	3b01      	subs	r3, #1
 8007032:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007036:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800703a:	b29b      	uxth	r3, r3
 800703c:	029b      	lsls	r3, r3, #10
 800703e:	b29b      	uxth	r3, r3
 8007040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007048:	b29a      	uxth	r2, r3
 800704a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e02d      	b.n	80070ae <USB_EPStartXfer+0x17e2>
 8007052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d125      	bne.n	80070ae <USB_EPStartXfer+0x17e2>
 8007062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007070:	b29b      	uxth	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007078:	4413      	add	r3, r2
 800707a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	011a      	lsls	r2, r3, #4
 800708c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007090:	4413      	add	r3, r2
 8007092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007096:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800709a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070ac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80070ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 81fe 	beq.w	80074bc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80070c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80070e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <USB_EPStartXfer+0x182c>
 80070ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80070f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10d      	bne.n	8007114 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070f8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80070fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 81db 	bne.w	80074bc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007106:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 81d4 	bne.w	80074bc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007118:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800713e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	441a      	add	r2, r3
 8007158:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800715c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800716c:	b29b      	uxth	r3, r3
 800716e:	8013      	strh	r3, [r2, #0]
 8007170:	e1a4      	b.n	80074bc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	78db      	ldrb	r3, [r3, #3]
 800717e:	2b01      	cmp	r3, #1
 8007180:	f040 819a 	bne.w	80074b8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	429a      	cmp	r2, r3
 800719e:	d917      	bls.n	80071d0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80071a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80071b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699a      	ldr	r2, [r3, #24]
 80071bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c0:	1ad2      	subs	r2, r2, r3
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	619a      	str	r2, [r3, #24]
 80071ce:	e00e      	b.n	80071ee <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80071d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80071e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2200      	movs	r2, #0
 80071ec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d178      	bne.n	80072f0 <USB_EPStartXfer+0x1a24>
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007222:	4413      	add	r3, r2
 8007224:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	011a      	lsls	r2, r3, #4
 8007236:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800723a:	4413      	add	r3, r2
 800723c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007240:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d116      	bne.n	800727a <USB_EPStartXfer+0x19ae>
 800724c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007258:	b29a      	uxth	r2, r3
 800725a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800725e:	801a      	strh	r2, [r3, #0]
 8007260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007270:	b29a      	uxth	r2, r3
 8007272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	e06b      	b.n	8007352 <USB_EPStartXfer+0x1a86>
 800727a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800727e:	2b3e      	cmp	r3, #62	; 0x3e
 8007280:	d818      	bhi.n	80072b4 <USB_EPStartXfer+0x19e8>
 8007282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007286:	085b      	lsrs	r3, r3, #1
 8007288:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800728c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <USB_EPStartXfer+0x19d6>
 8007298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800729c:	3301      	adds	r3, #1
 800729e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	029b      	lsls	r3, r3, #10
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072b0:	801a      	strh	r2, [r3, #0]
 80072b2:	e04e      	b.n	8007352 <USB_EPStartXfer+0x1a86>
 80072b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <USB_EPStartXfer+0x1a08>
 80072ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ce:	3b01      	subs	r3, #1
 80072d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072d8:	b29b      	uxth	r3, r3
 80072da:	029b      	lsls	r3, r3, #10
 80072dc:	b29b      	uxth	r3, r3
 80072de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072ec:	801a      	strh	r2, [r3, #0]
 80072ee:	e030      	b.n	8007352 <USB_EPStartXfer+0x1a86>
 80072f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d128      	bne.n	8007352 <USB_EPStartXfer+0x1a86>
 8007300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800730e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007312:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731c:	b29b      	uxth	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007324:	4413      	add	r3, r2
 8007326:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	011a      	lsls	r2, r3, #4
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	4413      	add	r3, r2
 800733e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007342:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734a:	b29a      	uxth	r2, r3
 800734c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d178      	bne.n	8007462 <USB_EPStartXfer+0x1b96>
 8007370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007374:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800737e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007382:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738c:	b29b      	uxth	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007394:	4413      	add	r3, r2
 8007396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800739a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	011a      	lsls	r2, r3, #4
 80073a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ac:	4413      	add	r3, r2
 80073ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d116      	bne.n	80073ec <USB_EPStartXfer+0x1b20>
 80073be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d0:	801a      	strh	r2, [r3, #0]
 80073d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	e067      	b.n	80074bc <USB_EPStartXfer+0x1bf0>
 80073ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f0:	2b3e      	cmp	r3, #62	; 0x3e
 80073f2:	d818      	bhi.n	8007426 <USB_EPStartXfer+0x1b5a>
 80073f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f8:	085b      	lsrs	r3, r3, #1
 80073fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d004      	beq.n	8007414 <USB_EPStartXfer+0x1b48>
 800740a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800740e:	3301      	adds	r3, #1
 8007410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007418:	b29b      	uxth	r3, r3
 800741a:	029b      	lsls	r3, r3, #10
 800741c:	b29a      	uxth	r2, r3
 800741e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	e04a      	b.n	80074bc <USB_EPStartXfer+0x1bf0>
 8007426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742a:	095b      	lsrs	r3, r3, #5
 800742c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007434:	f003 031f 	and.w	r3, r3, #31
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <USB_EPStartXfer+0x1b7a>
 800743c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007440:	3b01      	subs	r3, #1
 8007442:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800744a:	b29b      	uxth	r3, r3
 800744c:	029b      	lsls	r3, r3, #10
 800744e:	b29b      	uxth	r3, r3
 8007450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007458:	b29a      	uxth	r2, r3
 800745a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	e02c      	b.n	80074bc <USB_EPStartXfer+0x1bf0>
 8007462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d124      	bne.n	80074bc <USB_EPStartXfer+0x1bf0>
 8007472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007480:	b29b      	uxth	r3, r3
 8007482:	461a      	mov	r2, r3
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007488:	4413      	add	r3, r2
 800748a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	011a      	lsls	r2, r3, #4
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a0:	4413      	add	r3, r2
 80074a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b4:	801a      	strh	r2, [r3, #0]
 80074b6:	e001      	b.n	80074bc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e03a      	b.n	8007532 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80074e6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80074ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80074f2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80074f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80074fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	441a      	add	r2, r3
 8007518:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800751c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800752c:	b29b      	uxth	r3, r3
 800752e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d020      	beq.n	8007590 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007564:	81bb      	strh	r3, [r7, #12]
 8007566:	89bb      	ldrh	r3, [r7, #12]
 8007568:	f083 0310 	eor.w	r3, r3, #16
 800756c:	81bb      	strh	r3, [r7, #12]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	441a      	add	r2, r3
 8007578:	89bb      	ldrh	r3, [r7, #12]
 800757a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758a:	b29b      	uxth	r3, r3
 800758c:	8013      	strh	r3, [r2, #0]
 800758e:	e01f      	b.n	80075d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	81fb      	strh	r3, [r7, #14]
 80075a8:	89fb      	ldrh	r3, [r7, #14]
 80075aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075ae:	81fb      	strh	r3, [r7, #14]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	441a      	add	r2, r3
 80075ba:	89fb      	ldrh	r3, [r7, #14]
 80075bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr

080075dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	7b1b      	ldrb	r3, [r3, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f040 809d 	bne.w	800772a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d04c      	beq.n	8007692 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	823b      	strh	r3, [r7, #16]
 8007606:	8a3b      	ldrh	r3, [r7, #16]
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01b      	beq.n	8007648 <USB_EPClearStall+0x6c>
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	b29b      	uxth	r3, r3
 800761e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007626:	81fb      	strh	r3, [r7, #14]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	89fb      	ldrh	r3, [r7, #14]
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007640:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	78db      	ldrb	r3, [r3, #3]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d06c      	beq.n	800772a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007666:	81bb      	strh	r3, [r7, #12]
 8007668:	89bb      	ldrh	r3, [r7, #12]
 800766a:	f083 0320 	eor.w	r3, r3, #32
 800766e:	81bb      	strh	r3, [r7, #12]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	441a      	add	r2, r3
 800767a:	89bb      	ldrh	r3, [r7, #12]
 800767c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768c:	b29b      	uxth	r3, r3
 800768e:	8013      	strh	r3, [r2, #0]
 8007690:	e04b      	b.n	800772a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	82fb      	strh	r3, [r7, #22]
 80076a0:	8afb      	ldrh	r3, [r7, #22]
 80076a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d01b      	beq.n	80076e2 <USB_EPClearStall+0x106>
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c0:	82bb      	strh	r3, [r7, #20]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	441a      	add	r2, r3
 80076cc:	8abb      	ldrh	r3, [r7, #20]
 80076ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076de:	b29b      	uxth	r3, r3
 80076e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f8:	827b      	strh	r3, [r7, #18]
 80076fa:	8a7b      	ldrh	r3, [r7, #18]
 80076fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007700:	827b      	strh	r3, [r7, #18]
 8007702:	8a7b      	ldrh	r3, [r7, #18]
 8007704:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007708:	827b      	strh	r3, [r7, #18]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	441a      	add	r2, r3
 8007714:	8a7b      	ldrh	r3, [r7, #18]
 8007716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800771a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800771e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007726:	b29b      	uxth	r3, r3
 8007728:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr

08007736 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2280      	movs	r2, #128	; 0x80
 800774c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr

0800775c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	bc80      	pop	{r7}
 800776e:	4770      	bx	lr

08007770 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007792:	b29b      	uxth	r3, r3
 8007794:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007796:	68fb      	ldr	r3, [r7, #12]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr

080077a2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b08d      	sub	sp, #52	; 0x34
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	4611      	mov	r1, r2
 80077c4:	461a      	mov	r2, r3
 80077c6:	460b      	mov	r3, r1
 80077c8:	80fb      	strh	r3, [r7, #6]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077ce:	88bb      	ldrh	r3, [r7, #4]
 80077d0:	3301      	adds	r3, #1
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	005a      	lsls	r2, r3, #1
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ea:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f0:	e01e      	b.n	8007830 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	3301      	adds	r3, #1
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	b29b      	uxth	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	b29a      	uxth	r2, r3
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	3302      	adds	r3, #2
 800781c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	3302      	adds	r3, #2
 8007822:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	3301      	adds	r3, #1
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	3b01      	subs	r3, #1
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1dd      	bne.n	80077f2 <USB_WritePMA+0x3a>
  }
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	3734      	adds	r7, #52	; 0x34
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007842:	b480      	push	{r7}
 8007844:	b08b      	sub	sp, #44	; 0x2c
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	4611      	mov	r1, r2
 800784e:	461a      	mov	r2, r3
 8007850:	460b      	mov	r3, r1
 8007852:	80fb      	strh	r3, [r7, #6]
 8007854:	4613      	mov	r3, r2
 8007856:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007858:	88bb      	ldrh	r3, [r7, #4]
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	b29b      	uxth	r3, r3
 800785e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	005a      	lsls	r2, r3, #1
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007874:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
 800787a:	e01b      	b.n	80078b4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	3302      	adds	r3, #2
 8007888:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	b2da      	uxtb	r2, r3
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	3301      	adds	r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	b2da      	uxtb	r2, r3
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	3301      	adds	r3, #1
 80078a6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	3302      	adds	r3, #2
 80078ac:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	3b01      	subs	r3, #1
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e0      	bne.n	800787c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078ba:	88bb      	ldrh	r3, [r7, #4]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	701a      	strb	r2, [r3, #0]
  }
}
 80078d6:	bf00      	nop
 80078d8:	372c      	adds	r7, #44	; 0x2c
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr

080078e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 80078e4:	f001 f926 	bl	8008b34 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 80078e8:	2200      	movs	r2, #0
 80078ea:	4912      	ldr	r1, [pc, #72]	; (8007934 <MX_USB_DEVICE_Init+0x54>)
 80078ec:	4812      	ldr	r0, [pc, #72]	; (8007938 <MX_USB_DEVICE_Init+0x58>)
 80078ee:	f001 fc59 	bl	80091a4 <USBD_Init>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 80078f8:	f7f9 f8e2 	bl	8000ac0 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 80078fc:	490f      	ldr	r1, [pc, #60]	; (800793c <MX_USB_DEVICE_Init+0x5c>)
 80078fe:	480e      	ldr	r0, [pc, #56]	; (8007938 <MX_USB_DEVICE_Init+0x58>)
 8007900:	f001 fc7c 	bl	80091fc <USBD_RegisterClass>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800790a:	f7f9 f8d9 	bl	8000ac0 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 800790e:	490c      	ldr	r1, [pc, #48]	; (8007940 <MX_USB_DEVICE_Init+0x60>)
 8007910:	4809      	ldr	r0, [pc, #36]	; (8007938 <MX_USB_DEVICE_Init+0x58>)
 8007912:	f000 fe0b 	bl	800852c <USBD_CDC_ACM_RegisterInterface>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800791c:	f7f9 f8d0 	bl	8000ac0 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8007920:	4805      	ldr	r0, [pc, #20]	; (8007938 <MX_USB_DEVICE_Init+0x58>)
 8007922:	f001 fca9 	bl	8009278 <USBD_Start>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800792c:	f7f9 f8c8 	bl	8000ac0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007930:	bf00      	nop
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000074 	.word	0x20000074
 8007938:	20000868 	.word	0x20000868
 800793c:	200001a4 	.word	0x200001a4
 8007940:	20000060 	.word	0x20000060

08007944 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	01db      	lsls	r3, r3, #7
 8007952:	4a06      	ldr	r2, [pc, #24]	; (800796c <CDC_Init+0x28>)
 8007954:	441a      	add	r2, r3
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	4905      	ldr	r1, [pc, #20]	; (8007970 <CDC_Init+0x2c>)
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fe1c 	bl	8008598 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8007960:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000b84 	.word	0x20000b84
 8007970:	20000868 	.word	0x20000868

08007974 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 800797e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr
	...

0800798c <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	603a      	str	r2, [r7, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	4603      	mov	r3, r0
 8007998:	71fb      	strb	r3, [r7, #7]
 800799a:	460b      	mov	r3, r1
 800799c:	71bb      	strb	r3, [r7, #6]
 800799e:	4613      	mov	r3, r2
 80079a0:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80079a2:	79bb      	ldrb	r3, [r7, #6]
 80079a4:	2b23      	cmp	r3, #35	; 0x23
 80079a6:	f200 80b6 	bhi.w	8007b16 <CDC_Control+0x18a>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <CDC_Control+0x24>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007b17 	.word	0x08007b17
 80079b4:	08007b17 	.word	0x08007b17
 80079b8:	08007b17 	.word	0x08007b17
 80079bc:	08007b17 	.word	0x08007b17
 80079c0:	08007b17 	.word	0x08007b17
 80079c4:	08007b17 	.word	0x08007b17
 80079c8:	08007b17 	.word	0x08007b17
 80079cc:	08007b17 	.word	0x08007b17
 80079d0:	08007b17 	.word	0x08007b17
 80079d4:	08007b17 	.word	0x08007b17
 80079d8:	08007b17 	.word	0x08007b17
 80079dc:	08007b17 	.word	0x08007b17
 80079e0:	08007b17 	.word	0x08007b17
 80079e4:	08007b17 	.word	0x08007b17
 80079e8:	08007b17 	.word	0x08007b17
 80079ec:	08007b17 	.word	0x08007b17
 80079f0:	08007b17 	.word	0x08007b17
 80079f4:	08007b17 	.word	0x08007b17
 80079f8:	08007b17 	.word	0x08007b17
 80079fc:	08007b17 	.word	0x08007b17
 8007a00:	08007b17 	.word	0x08007b17
 8007a04:	08007b17 	.word	0x08007b17
 8007a08:	08007b17 	.word	0x08007b17
 8007a0c:	08007b17 	.word	0x08007b17
 8007a10:	08007b17 	.word	0x08007b17
 8007a14:	08007b17 	.word	0x08007b17
 8007a18:	08007b17 	.word	0x08007b17
 8007a1c:	08007b17 	.word	0x08007b17
 8007a20:	08007b17 	.word	0x08007b17
 8007a24:	08007b17 	.word	0x08007b17
 8007a28:	08007b17 	.word	0x08007b17
 8007a2c:	08007b17 	.word	0x08007b17
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007aa1 	.word	0x08007aa1
 8007a38:	08007b17 	.word	0x08007b17
 8007a3c:	08007b17 	.word	0x08007b17
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	3302      	adds	r3, #2
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007a58:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	3303      	adds	r3, #3
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	061b      	lsls	r3, r3, #24
 8007a62:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	4611      	mov	r1, r2
 8007a68:	4a2e      	ldr	r2, [pc, #184]	; (8007b24 <CDC_Control+0x198>)
 8007a6a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	7911      	ldrb	r1, [r2, #4]
 8007a74:	4a2b      	ldr	r2, [pc, #172]	; (8007b24 <CDC_Control+0x198>)
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4413      	add	r3, r2
 8007a7a:	460a      	mov	r2, r1
 8007a7c:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	7951      	ldrb	r1, [r2, #5]
 8007a84:	4a27      	ldr	r2, [pc, #156]	; (8007b24 <CDC_Control+0x198>)
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4413      	add	r3, r2
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	7991      	ldrb	r1, [r2, #6]
 8007a94:	4a23      	ldr	r2, [pc, #140]	; (8007b24 <CDC_Control+0x198>)
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4413      	add	r3, r2
 8007a9a:	460a      	mov	r2, r1
 8007a9c:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 8007a9e:	e03b      	b.n	8007b18 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	4a20      	ldr	r2, [pc, #128]	; (8007b24 <CDC_Control+0x198>)
 8007aa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	4a1c      	ldr	r2, [pc, #112]	; (8007b24 <CDC_Control+0x198>)
 8007ab2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ab6:	0a1a      	lsrs	r2, r3, #8
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	4a18      	ldr	r2, [pc, #96]	; (8007b24 <CDC_Control+0x198>)
 8007ac4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ac8:	0c1a      	lsrs	r2, r3, #16
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	3302      	adds	r3, #2
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	4a13      	ldr	r2, [pc, #76]	; (8007b24 <CDC_Control+0x198>)
 8007ad6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ada:	0e1a      	lsrs	r2, r3, #24
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3303      	adds	r3, #3
 8007ae0:	b2d2      	uxtb	r2, r2
 8007ae2:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	3204      	adds	r2, #4
 8007aea:	490e      	ldr	r1, [pc, #56]	; (8007b24 <CDC_Control+0x198>)
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	440b      	add	r3, r1
 8007af0:	791b      	ldrb	r3, [r3, #4]
 8007af2:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	3205      	adds	r2, #5
 8007afa:	490a      	ldr	r1, [pc, #40]	; (8007b24 <CDC_Control+0x198>)
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	440b      	add	r3, r1
 8007b00:	795b      	ldrb	r3, [r3, #5]
 8007b02:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8007b04:	79fb      	ldrb	r3, [r7, #7]
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	3206      	adds	r2, #6
 8007b0a:	4906      	ldr	r1, [pc, #24]	; (8007b24 <CDC_Control+0x198>)
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	440b      	add	r3, r1
 8007b10:	799b      	ldrb	r3, [r3, #6]
 8007b12:	7013      	strb	r3, [r2, #0]
    break;
 8007b14:	e000      	b.n	8007b18 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b16:	bf00      	nop
  }

  return (USBD_OK);
 8007b18:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr
 8007b24:	20000c04 	.word	0x20000c04

08007b28 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 f823 	bl	8007b8c <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	4907      	ldr	r1, [pc, #28]	; (8007b68 <CDC_Receive+0x40>)
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fd23 	bl	8008598 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	4904      	ldr	r1, [pc, #16]	; (8007b68 <CDC_Receive+0x40>)
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fd7e 	bl	8008658 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000868 	.word	0x20000868

08007b6c <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	461a      	mov	r2, r3
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr

08007b8c <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
 8007bae:	4a0e      	ldr	r2, [pc, #56]	; (8007be8 <CDC_Transmit+0x5c>)
 8007bb0:	4413      	add	r3, r2
 8007bb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e00d      	b.n	8007bde <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8007bc2:	88bb      	ldrh	r3, [r7, #4]
 8007bc4:	79f8      	ldrb	r0, [r7, #7]
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4908      	ldr	r1, [pc, #32]	; (8007bec <CDC_Transmit+0x60>)
 8007bca:	f000 fcc3 	bl	8008554 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	4906      	ldr	r1, [pc, #24]	; (8007bec <CDC_Transmit+0x60>)
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fcfe 	bl	80085d4 <USBD_CDC_TransmitPacket>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000e24 	.word	0x20000e24
 8007bec:	20000868 	.word	0x20000868

08007bf0 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2212      	movs	r2, #18
 8007c00:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8007c02:	4b03      	ldr	r3, [pc, #12]	; (8007c10 <USBD_DeviceDescriptor+0x20>)
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bc80      	pop	{r7}
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	20000090 	.word	0x20000090

08007c14 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	6039      	str	r1, [r7, #0]
 8007c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2204      	movs	r2, #4
 8007c24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c26:	4b03      	ldr	r3, [pc, #12]	; (8007c34 <USBD_LangIDStrDescriptor+0x20>)
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	200000a4 	.word	0x200000a4

08007c38 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	6039      	str	r1, [r7, #0]
 8007c42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d105      	bne.n	8007c56 <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	4907      	ldr	r1, [pc, #28]	; (8007c6c <USBD_ProductStrDescriptor+0x34>)
 8007c4e:	4808      	ldr	r0, [pc, #32]	; (8007c70 <USBD_ProductStrDescriptor+0x38>)
 8007c50:	f002 fad9 	bl	800a206 <USBD_GetString>
 8007c54:	e004      	b.n	8007c60 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4904      	ldr	r1, [pc, #16]	; (8007c6c <USBD_ProductStrDescriptor+0x34>)
 8007c5a:	4805      	ldr	r0, [pc, #20]	; (8007c70 <USBD_ProductStrDescriptor+0x38>)
 8007c5c:	f002 fad3 	bl	800a206 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c60:	4b02      	ldr	r3, [pc, #8]	; (8007c6c <USBD_ProductStrDescriptor+0x34>)
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20000c0c 	.word	0x20000c0c
 8007c70:	0800b2c4 	.word	0x0800b2c4

08007c74 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	6039      	str	r1, [r7, #0]
 8007c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	4904      	ldr	r1, [pc, #16]	; (8007c94 <USBD_ManufacturerStrDescriptor+0x20>)
 8007c84:	4804      	ldr	r0, [pc, #16]	; (8007c98 <USBD_ManufacturerStrDescriptor+0x24>)
 8007c86:	f002 fabe 	bl	800a206 <USBD_GetString>
  return USBD_StrDesc;
 8007c8a:	4b02      	ldr	r3, [pc, #8]	; (8007c94 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	20000c0c 	.word	0x20000c0c
 8007c98:	0800b2dc 	.word	0x0800b2dc

08007c9c <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	6039      	str	r1, [r7, #0]
 8007ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	221a      	movs	r2, #26
 8007cac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cae:	f000 f843 	bl	8007d38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007cb2:	4b02      	ldr	r3, [pc, #8]	; (8007cbc <USBD_SerialStrDescriptor+0x20>)
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	200000a8 	.word	0x200000a8

08007cc0 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d105      	bne.n	8007cde <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	4907      	ldr	r1, [pc, #28]	; (8007cf4 <USBD_ConfigStrDescriptor+0x34>)
 8007cd6:	4808      	ldr	r0, [pc, #32]	; (8007cf8 <USBD_ConfigStrDescriptor+0x38>)
 8007cd8:	f002 fa95 	bl	800a206 <USBD_GetString>
 8007cdc:	e004      	b.n	8007ce8 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	4904      	ldr	r1, [pc, #16]	; (8007cf4 <USBD_ConfigStrDescriptor+0x34>)
 8007ce2:	4805      	ldr	r0, [pc, #20]	; (8007cf8 <USBD_ConfigStrDescriptor+0x38>)
 8007ce4:	f002 fa8f 	bl	800a206 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ce8:	4b02      	ldr	r3, [pc, #8]	; (8007cf4 <USBD_ConfigStrDescriptor+0x34>)
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000c0c 	.word	0x20000c0c
 8007cf8:	0800b2f0 	.word	0x0800b2f0

08007cfc <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	6039      	str	r1, [r7, #0]
 8007d06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d105      	bne.n	8007d1a <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	4907      	ldr	r1, [pc, #28]	; (8007d30 <USBD_InterfaceStrDescriptor+0x34>)
 8007d12:	4808      	ldr	r0, [pc, #32]	; (8007d34 <USBD_InterfaceStrDescriptor+0x38>)
 8007d14:	f002 fa77 	bl	800a206 <USBD_GetString>
 8007d18:	e004      	b.n	8007d24 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	4904      	ldr	r1, [pc, #16]	; (8007d30 <USBD_InterfaceStrDescriptor+0x34>)
 8007d1e:	4805      	ldr	r0, [pc, #20]	; (8007d34 <USBD_InterfaceStrDescriptor+0x38>)
 8007d20:	f002 fa71 	bl	800a206 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d24:	4b02      	ldr	r3, [pc, #8]	; (8007d30 <USBD_InterfaceStrDescriptor+0x34>)
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000c0c 	.word	0x20000c0c
 8007d34:	0800b300 	.word	0x0800b300

08007d38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <Get_SerialNum+0x44>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d44:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <Get_SerialNum+0x48>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <Get_SerialNum+0x4c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4413      	add	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d009      	beq.n	8007d72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d5e:	2208      	movs	r2, #8
 8007d60:	4909      	ldr	r1, [pc, #36]	; (8007d88 <Get_SerialNum+0x50>)
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 f814 	bl	8007d90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d68:	2204      	movs	r2, #4
 8007d6a:	4908      	ldr	r1, [pc, #32]	; (8007d8c <Get_SerialNum+0x54>)
 8007d6c:	68b8      	ldr	r0, [r7, #8]
 8007d6e:	f000 f80f 	bl	8007d90 <IntToUnicode>
  }
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	1ffff7e8 	.word	0x1ffff7e8
 8007d80:	1ffff7ec 	.word	0x1ffff7ec
 8007d84:	1ffff7f0 	.word	0x1ffff7f0
 8007d88:	200000aa 	.word	0x200000aa
 8007d8c:	200000ba 	.word	0x200000ba

08007d90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]
 8007da6:	e027      	b.n	8007df8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	0f1b      	lsrs	r3, r3, #28
 8007dac:	2b09      	cmp	r3, #9
 8007dae:	d80b      	bhi.n	8007dc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	0f1b      	lsrs	r3, r3, #28
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	440b      	add	r3, r1
 8007dc0:	3230      	adds	r2, #48	; 0x30
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	e00a      	b.n	8007dde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	0f1b      	lsrs	r3, r3, #28
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	440b      	add	r3, r1
 8007dd8:	3237      	adds	r2, #55	; 0x37
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	3301      	adds	r3, #1
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	4413      	add	r3, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	3301      	adds	r3, #1
 8007df6:	75fb      	strb	r3, [r7, #23]
 8007df8:	7dfa      	ldrb	r2, [r7, #23]
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d3d3      	bcc.n	8007da8 <IntToUnicode+0x18>
  }
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	371c      	adds	r7, #28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73fb      	strb	r3, [r7, #15]
 8007e20:	e0c6      	b.n	8007fb0 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007e28:	fb02 f303 	mul.w	r3, r2, r3
 8007e2c:	4a65      	ldr	r2, [pc, #404]	; (8007fc4 <USBD_CDC_Init+0x1b8>)
 8007e2e:	4413      	add	r3, r2
 8007e30:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	7c1b      	ldrb	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d13d      	bne.n	8007eb6 <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	4a62      	ldr	r2, [pc, #392]	; (8007fc8 <USBD_CDC_Init+0x1bc>)
 8007e3e:	5cd1      	ldrb	r1, [r2, r3]
 8007e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e44:	2202      	movs	r2, #2
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f002 fbe7 	bl	800a61a <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	4a5e      	ldr	r2, [pc, #376]	; (8007fc8 <USBD_CDC_Init+0x1bc>)
 8007e50:	5cd3      	ldrb	r3, [r2, r3]
 8007e52:	f003 020f 	and.w	r2, r3, #15
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	440b      	add	r3, r1
 8007e62:	3324      	adds	r3, #36	; 0x24
 8007e64:	2201      	movs	r2, #1
 8007e66:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	4a58      	ldr	r2, [pc, #352]	; (8007fcc <USBD_CDC_Init+0x1c0>)
 8007e6c:	5cd1      	ldrb	r1, [r2, r3]
 8007e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e72:	2202      	movs	r2, #2
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f002 fbd0 	bl	800a61a <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	4a53      	ldr	r2, [pc, #332]	; (8007fcc <USBD_CDC_Init+0x1c0>)
 8007e7e:	5cd3      	ldrb	r3, [r2, r3]
 8007e80:	f003 020f 	and.w	r2, r3, #15
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	440b      	add	r3, r1
 8007e90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e94:	2201      	movs	r2, #1
 8007e96:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	4a4d      	ldr	r2, [pc, #308]	; (8007fd0 <USBD_CDC_Init+0x1c4>)
 8007e9c:	5cd3      	ldrb	r3, [r2, r3]
 8007e9e:	f003 020f 	and.w	r2, r3, #15
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	3326      	adds	r3, #38	; 0x26
 8007eb0:	2210      	movs	r2, #16
 8007eb2:	801a      	strh	r2, [r3, #0]
 8007eb4:	e03a      	b.n	8007f2c <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	4a43      	ldr	r2, [pc, #268]	; (8007fc8 <USBD_CDC_Init+0x1bc>)
 8007eba:	5cd1      	ldrb	r1, [r2, r3]
 8007ebc:	2340      	movs	r3, #64	; 0x40
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f002 fbaa 	bl	800a61a <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	4a3f      	ldr	r2, [pc, #252]	; (8007fc8 <USBD_CDC_Init+0x1bc>)
 8007eca:	5cd3      	ldrb	r3, [r2, r3]
 8007ecc:	f003 020f 	and.w	r2, r3, #15
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	440b      	add	r3, r1
 8007edc:	3324      	adds	r3, #36	; 0x24
 8007ede:	2201      	movs	r2, #1
 8007ee0:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	4a39      	ldr	r2, [pc, #228]	; (8007fcc <USBD_CDC_Init+0x1c0>)
 8007ee6:	5cd1      	ldrb	r1, [r2, r3]
 8007ee8:	2340      	movs	r3, #64	; 0x40
 8007eea:	2202      	movs	r2, #2
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f002 fb94 	bl	800a61a <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	4a35      	ldr	r2, [pc, #212]	; (8007fcc <USBD_CDC_Init+0x1c0>)
 8007ef6:	5cd3      	ldrb	r3, [r2, r3]
 8007ef8:	f003 020f 	and.w	r2, r3, #15
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	440b      	add	r3, r1
 8007f08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	4a2f      	ldr	r2, [pc, #188]	; (8007fd0 <USBD_CDC_Init+0x1c4>)
 8007f14:	5cd3      	ldrb	r3, [r2, r3]
 8007f16:	f003 020f 	and.w	r2, r3, #15
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	3326      	adds	r3, #38	; 0x26
 8007f28:	2210      	movs	r2, #16
 8007f2a:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	4a28      	ldr	r2, [pc, #160]	; (8007fd0 <USBD_CDC_Init+0x1c4>)
 8007f30:	5cd1      	ldrb	r1, [r2, r3]
 8007f32:	2308      	movs	r3, #8
 8007f34:	2203      	movs	r2, #3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f002 fb6f 	bl	800a61a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	4a24      	ldr	r2, [pc, #144]	; (8007fd0 <USBD_CDC_Init+0x1c4>)
 8007f40:	5cd3      	ldrb	r3, [r2, r3]
 8007f42:	f003 020f 	and.w	r2, r3, #15
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	440b      	add	r3, r1
 8007f52:	3324      	adds	r3, #36	; 0x24
 8007f54:	2201      	movs	r2, #1
 8007f56:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	7bfa      	ldrb	r2, [r7, #15]
 8007f62:	4610      	mov	r0, r2
 8007f64:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	7c1b      	ldrb	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10b      	bne.n	8007f96 <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	4a12      	ldr	r2, [pc, #72]	; (8007fcc <USBD_CDC_Init+0x1c0>)
 8007f82:	5cd1      	ldrb	r1, [r2, r3]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f002 fc32 	bl	800a7f8 <USBD_LL_PrepareReceive>
 8007f94:	e009      	b.n	8007faa <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	4a0c      	ldr	r2, [pc, #48]	; (8007fcc <USBD_CDC_Init+0x1c0>)
 8007f9a:	5cd1      	ldrb	r1, [r2, r3]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fa2:	2340      	movs	r3, #64	; 0x40
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f002 fc27 	bl	800a7f8 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	3301      	adds	r3, #1
 8007fae:	73fb      	strb	r3, [r7, #15]
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f43f af35 	beq.w	8007e22 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000e24 	.word	0x20000e24
 8007fc8:	20000e0c 	.word	0x20000e0c
 8007fcc:	20000e10 	.word	0x20000e10
 8007fd0:	20000e14 	.word	0x20000e14

08007fd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
 8007fe4:	e057      	b.n	8008096 <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	4a2f      	ldr	r2, [pc, #188]	; (80080a8 <USBD_CDC_DeInit+0xd4>)
 8007fea:	5cd3      	ldrb	r3, [r2, r3]
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f002 fb39 	bl	800a666 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4a2c      	ldr	r2, [pc, #176]	; (80080a8 <USBD_CDC_DeInit+0xd4>)
 8007ff8:	5cd3      	ldrb	r3, [r2, r3]
 8007ffa:	f003 020f 	and.w	r2, r3, #15
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	440b      	add	r3, r1
 800800a:	3324      	adds	r3, #36	; 0x24
 800800c:	2200      	movs	r2, #0
 800800e:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4a26      	ldr	r2, [pc, #152]	; (80080ac <USBD_CDC_DeInit+0xd8>)
 8008014:	5cd3      	ldrb	r3, [r2, r3]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f002 fb24 	bl	800a666 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	4a22      	ldr	r2, [pc, #136]	; (80080ac <USBD_CDC_DeInit+0xd8>)
 8008022:	5cd3      	ldrb	r3, [r2, r3]
 8008024:	f003 020f 	and.w	r2, r3, #15
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008038:	2200      	movs	r2, #0
 800803a:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	4a1c      	ldr	r2, [pc, #112]	; (80080b0 <USBD_CDC_DeInit+0xdc>)
 8008040:	5cd3      	ldrb	r3, [r2, r3]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f002 fb0e 	bl	800a666 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <USBD_CDC_DeInit+0xdc>)
 800804e:	5cd3      	ldrb	r3, [r2, r3]
 8008050:	f003 020f 	and.w	r2, r3, #15
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	3324      	adds	r3, #36	; 0x24
 8008062:	2200      	movs	r2, #0
 8008064:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	4a11      	ldr	r2, [pc, #68]	; (80080b0 <USBD_CDC_DeInit+0xdc>)
 800806a:	5cd3      	ldrb	r3, [r2, r3]
 800806c:	f003 020f 	and.w	r2, r3, #15
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	3326      	adds	r3, #38	; 0x26
 800807e:	2200      	movs	r2, #0
 8008080:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	7bfa      	ldrb	r2, [r7, #15]
 800808c:	4610      	mov	r0, r2
 800808e:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	3301      	adds	r3, #1
 8008094:	73fb      	strb	r3, [r7, #15]
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0a4      	beq.n	8007fe6 <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20000e0c 	.word	0x20000e0c
 80080ac:	20000e10 	.word	0x20000e10
 80080b0:	20000e14 	.word	0x20000e14

080080b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80080b4:	b590      	push	{r4, r7, lr}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80080d2:	2300      	movs	r3, #0
 80080d4:	757b      	strb	r3, [r7, #21]
 80080d6:	e015      	b.n	8008104 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	889b      	ldrh	r3, [r3, #4]
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	7d7b      	ldrb	r3, [r7, #21]
 80080e0:	496d      	ldr	r1, [pc, #436]	; (8008298 <USBD_CDC_Setup+0x1e4>)
 80080e2:	5ccb      	ldrb	r3, [r1, r3]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d007      	beq.n	80080f8 <USBD_CDC_Setup+0x44>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	889b      	ldrh	r3, [r3, #4]
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	7d7b      	ldrb	r3, [r7, #21]
 80080f0:	496a      	ldr	r1, [pc, #424]	; (800829c <USBD_CDC_Setup+0x1e8>)
 80080f2:	5ccb      	ldrb	r3, [r1, r3]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d102      	bne.n	80080fe <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 80080f8:	7d7b      	ldrb	r3, [r7, #21]
 80080fa:	75bb      	strb	r3, [r7, #22]
      break;
 80080fc:	e005      	b.n	800810a <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80080fe:	7d7b      	ldrb	r3, [r7, #21]
 8008100:	3301      	adds	r3, #1
 8008102:	757b      	strb	r3, [r7, #21]
 8008104:	7d7b      	ldrb	r3, [r7, #21]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0e6      	beq.n	80080d8 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800810a:	7dbb      	ldrb	r3, [r7, #22]
 800810c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008110:	fb02 f303 	mul.w	r3, r2, r3
 8008114:	4a62      	ldr	r2, [pc, #392]	; (80082a0 <USBD_CDC_Setup+0x1ec>)
 8008116:	4413      	add	r3, r2
 8008118:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008122:	2b00      	cmp	r3, #0
 8008124:	d04a      	beq.n	80081bc <USBD_CDC_Setup+0x108>
 8008126:	2b20      	cmp	r3, #32
 8008128:	f040 80aa 	bne.w	8008280 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	88db      	ldrh	r3, [r3, #6]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d038      	beq.n	80081a6 <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	b25b      	sxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	da1d      	bge.n	800817a <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008144:	689c      	ldr	r4, [r3, #8]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	7859      	ldrb	r1, [r3, #1]
 800814a:	7dbb      	ldrb	r3, [r7, #22]
 800814c:	025b      	lsls	r3, r3, #9
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	441a      	add	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	88db      	ldrh	r3, [r3, #6]
 8008156:	7db8      	ldrb	r0, [r7, #22]
 8008158:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	88db      	ldrh	r3, [r3, #6]
 800815e:	2b07      	cmp	r3, #7
 8008160:	bf28      	it	cs
 8008162:	2307      	movcs	r3, #7
 8008164:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 8008166:	7dbb      	ldrb	r3, [r7, #22]
 8008168:	025b      	lsls	r3, r3, #9
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4413      	add	r3, r2
 800816e:	89fa      	ldrh	r2, [r7, #14]
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f002 f8a6 	bl	800a2c4 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8008178:	e089      	b.n	800828e <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	785a      	ldrb	r2, [r3, #1]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	88db      	ldrh	r3, [r3, #6]
 8008188:	b2da      	uxtb	r2, r3
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8008190:	7dbb      	ldrb	r3, [r7, #22]
 8008192:	025b      	lsls	r3, r3, #9
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	18d1      	adds	r1, r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	88db      	ldrh	r3, [r3, #6]
 800819c:	461a      	mov	r2, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f002 f8bc 	bl	800a31c <USBD_CtlPrepareRx>
    break;
 80081a4:	e073      	b.n	800828e <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ac:	689c      	ldr	r4, [r3, #8]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	7859      	ldrb	r1, [r3, #1]
 80081b2:	7db8      	ldrb	r0, [r7, #22]
 80081b4:	2300      	movs	r3, #0
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	47a0      	blx	r4
    break;
 80081ba:	e068      	b.n	800828e <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	2b0b      	cmp	r3, #11
 80081c2:	d852      	bhi.n	800826a <USBD_CDC_Setup+0x1b6>
 80081c4:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <USBD_CDC_Setup+0x118>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	080081fd 	.word	0x080081fd
 80081d0:	08008279 	.word	0x08008279
 80081d4:	0800826b 	.word	0x0800826b
 80081d8:	0800826b 	.word	0x0800826b
 80081dc:	0800826b 	.word	0x0800826b
 80081e0:	0800826b 	.word	0x0800826b
 80081e4:	0800826b 	.word	0x0800826b
 80081e8:	0800826b 	.word	0x0800826b
 80081ec:	0800826b 	.word	0x0800826b
 80081f0:	0800826b 	.word	0x0800826b
 80081f4:	08008227 	.word	0x08008227
 80081f8:	08008251 	.word	0x08008251
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b03      	cmp	r3, #3
 8008206:	d107      	bne.n	8008218 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008208:	f107 030a 	add.w	r3, r7, #10
 800820c:	2202      	movs	r2, #2
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f002 f857 	bl	800a2c4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008216:	e032      	b.n	800827e <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 ffe2 	bl	800a1e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	75fb      	strb	r3, [r7, #23]
      break;
 8008224:	e02b      	b.n	800827e <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b03      	cmp	r3, #3
 8008230:	d107      	bne.n	8008242 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008232:	f107 030d 	add.w	r3, r7, #13
 8008236:	2201      	movs	r2, #1
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f002 f842 	bl	800a2c4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008240:	e01d      	b.n	800827e <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 ffcd 	bl	800a1e4 <USBD_CtlError>
        ret = USBD_FAIL;
 800824a:	2303      	movs	r3, #3
 800824c:	75fb      	strb	r3, [r7, #23]
      break;
 800824e:	e016      	b.n	800827e <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b03      	cmp	r3, #3
 800825a:	d00f      	beq.n	800827c <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 ffc0 	bl	800a1e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8008264:	2303      	movs	r3, #3
 8008266:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008268:	e008      	b.n	800827c <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 ffb9 	bl	800a1e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008272:	2303      	movs	r3, #3
 8008274:	75fb      	strb	r3, [r7, #23]
      break;
 8008276:	e002      	b.n	800827e <USBD_CDC_Setup+0x1ca>
      break;
 8008278:	bf00      	nop
 800827a:	e008      	b.n	800828e <USBD_CDC_Setup+0x1da>
      break;
 800827c:	bf00      	nop
    }
    break;
 800827e:	e006      	b.n	800828e <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 ffae 	bl	800a1e4 <USBD_CtlError>
    ret = USBD_FAIL;
 8008288:	2303      	movs	r3, #3
 800828a:	75fb      	strb	r3, [r7, #23]
    break;
 800828c:	bf00      	nop
  }

  return (uint8_t)ret;
 800828e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008290:	4618      	mov	r0, r3
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	bd90      	pop	{r4, r7, pc}
 8008298:	20000e18 	.word	0x20000e18
 800829c:	20000e1c 	.word	0x20000e1c
 80082a0:	20000e24 	.word	0x20000e24

080082a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80082ba:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80082c0:	2300      	movs	r3, #0
 80082c2:	75bb      	strb	r3, [r7, #22]
 80082c4:	e00d      	b.n	80082e2 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	7dbb      	ldrb	r3, [r7, #22]
 80082ca:	4934      	ldr	r1, [pc, #208]	; (800839c <USBD_CDC_DataIn+0xf8>)
 80082cc:	5ccb      	ldrb	r3, [r1, r3]
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d102      	bne.n	80082dc <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 80082d6:	7dbb      	ldrb	r3, [r7, #22]
 80082d8:	75fb      	strb	r3, [r7, #23]
      break;
 80082da:	e005      	b.n	80082e8 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80082dc:	7dbb      	ldrb	r3, [r7, #22]
 80082de:	3301      	adds	r3, #1
 80082e0:	75bb      	strb	r3, [r7, #22]
 80082e2:	7dbb      	ldrb	r3, [r7, #22]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0ee      	beq.n	80082c6 <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80082ee:	fb02 f303 	mul.w	r3, r2, r3
 80082f2:	4a2b      	ldr	r2, [pc, #172]	; (80083a0 <USBD_CDC_DataIn+0xfc>)
 80082f4:	4413      	add	r3, r2
 80082f6:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80082f8:	78fa      	ldrb	r2, [r7, #3]
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	3318      	adds	r3, #24
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d029      	beq.n	8008362 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	3318      	adds	r3, #24
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	78f9      	ldrb	r1, [r7, #3]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	460b      	mov	r3, r1
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	4403      	add	r3, r0
 800832e:	3338      	adds	r3, #56	; 0x38
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	fbb2 f1f3 	udiv	r1, r2, r3
 8008336:	fb01 f303 	mul.w	r3, r1, r3
 800833a:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800833c:	2b00      	cmp	r3, #0
 800833e:	d110      	bne.n	8008362 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	3318      	adds	r3, #24
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008354:	78f9      	ldrb	r1, [r7, #3]
 8008356:	2300      	movs	r3, #0
 8008358:	2200      	movs	r2, #0
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f002 fa2b 	bl	800a7b6 <USBD_LL_Transmit>
 8008360:	e016      	b.n	8008390 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2200      	movs	r2, #0
 8008366:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00c      	beq.n	8008390 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800837c:	691c      	ldr	r4, [r3, #16]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	7df8      	ldrb	r0, [r7, #23]
 800838e:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	371c      	adds	r7, #28
 8008396:	46bd      	mov	sp, r7
 8008398:	bd90      	pop	{r4, r7, pc}
 800839a:	bf00      	nop
 800839c:	20000e0c 	.word	0x20000e0c
 80083a0:	20000e24 	.word	0x20000e24

080083a4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80083b8:	2300      	movs	r3, #0
 80083ba:	73bb      	strb	r3, [r7, #14]
 80083bc:	e00b      	b.n	80083d6 <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	4a17      	ldr	r2, [pc, #92]	; (8008420 <USBD_CDC_DataOut+0x7c>)
 80083c2:	5cd3      	ldrb	r3, [r2, r3]
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d102      	bne.n	80083d0 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	73fb      	strb	r3, [r7, #15]
      break;
 80083ce:	e005      	b.n	80083dc <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	3301      	adds	r3, #1
 80083d4:	73bb      	strb	r3, [r7, #14]
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0f0      	beq.n	80083be <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80083e2:	fb02 f303 	mul.w	r3, r2, r3
 80083e6:	4a0f      	ldr	r2, [pc, #60]	; (8008424 <USBD_CDC_DataOut+0x80>)
 80083e8:	4413      	add	r3, r2
 80083ea:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f002 fa22 	bl	800a83a <USBD_LL_GetRxDataSize>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008412:	7bf8      	ldrb	r0, [r7, #15]
 8008414:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20000e10 	.word	0x20000e10
 8008424:	20000e24 	.word	0x20000e24

08008428 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008428:	b590      	push	{r4, r7, lr}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008430:	2300      	movs	r3, #0
 8008432:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
 8008438:	e02e      	b.n	8008498 <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008440:	fb02 f303 	mul.w	r3, r2, r3
 8008444:	4a18      	ldr	r2, [pc, #96]	; (80084a8 <USBD_CDC_EP0_RxReady+0x80>)
 8008446:	4413      	add	r3, r2
 8008448:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8008450:	2303      	movs	r3, #3
 8008452:	e025      	b.n	80084a0 <USBD_CDC_EP0_RxReady+0x78>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800845a:	2b00      	cmp	r3, #0
 800845c:	d019      	beq.n	8008492 <USBD_CDC_EP0_RxReady+0x6a>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008464:	2bff      	cmp	r3, #255	; 0xff
 8008466:	d014      	beq.n	8008492 <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800846e:	689c      	ldr	r4, [r3, #8]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	025b      	lsls	r3, r3, #9
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	441a      	add	r2, r3
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008484:	b29b      	uxth	r3, r3
 8008486:	7bf8      	ldrb	r0, [r7, #15]
 8008488:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	22ff      	movs	r2, #255	; 0xff
 800848e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	3301      	adds	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0cd      	beq.n	800843a <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd90      	pop	{r4, r7, pc}
 80084a8:	20000e24 	.word	0x20000e24

080084ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	224b      	movs	r2, #75	; 0x4b
 80084b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80084ba:	4b03      	ldr	r3, [pc, #12]	; (80084c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	20000158 	.word	0x20000158

080084cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	224b      	movs	r2, #75	; 0x4b
 80084d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80084da:	4b03      	ldr	r3, [pc, #12]	; (80084e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	2000010c 	.word	0x2000010c

080084ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	224b      	movs	r2, #75	; 0x4b
 80084f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80084fa:	4b03      	ldr	r3, [pc, #12]	; (8008508 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	bc80      	pop	{r7}
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	20000158 	.word	0x20000158

0800850c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	220a      	movs	r2, #10
 8008518:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800851a:	4b03      	ldr	r3, [pc, #12]	; (8008528 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	bc80      	pop	{r7}
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	200000c4 	.word	0x200000c4

0800852c <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800853c:	2303      	movs	r3, #3
 800853e:	e004      	b.n	800854a <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	bc80      	pop	{r7}
 8008552:	4770      	bx	lr

08008554 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	607a      	str	r2, [r7, #4]
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	4603      	mov	r3, r0
 8008562:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800856e:	fb02 f303 	mul.w	r3, r2, r3
 8008572:	4a08      	ldr	r2, [pc, #32]	; (8008594 <USBD_CDC_SetTxBuffer+0x40>)
 8008574:	4413      	add	r3, r2
 8008576:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr
 8008594:	20000e24 	.word	0x20000e24

08008598 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80085b0:	fb02 f303 	mul.w	r3, r2, r3
 80085b4:	4a06      	ldr	r2, [pc, #24]	; (80085d0 <USBD_CDC_SetRxBuffer+0x38>)
 80085b6:	4413      	add	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	371c      	adds	r7, #28
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	20000e24 	.word	0x20000e24

080085d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 80085e8:	79fb      	ldrb	r3, [r7, #7]
 80085ea:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80085ee:	fb02 f303 	mul.w	r3, r2, r3
 80085f2:	4a17      	ldr	r2, [pc, #92]	; (8008650 <USBD_CDC_TransmitPacket+0x7c>)
 80085f4:	4413      	add	r3, r2
 80085f6:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d121      	bne.n	8008646 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2201      	movs	r2, #1
 8008606:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	4a11      	ldr	r2, [pc, #68]	; (8008654 <USBD_CDC_TransmitPacket+0x80>)
 800860e:	5cd3      	ldrb	r3, [r2, r3]
 8008610:	f003 020f 	and.w	r2, r3, #15
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800861a:	6838      	ldr	r0, [r7, #0]
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4403      	add	r3, r0
 8008626:	3318      	adds	r3, #24
 8008628:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	4a09      	ldr	r2, [pc, #36]	; (8008654 <USBD_CDC_TransmitPacket+0x80>)
 800862e:	5cd1      	ldrb	r1, [r2, r3]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800863c:	6838      	ldr	r0, [r7, #0]
 800863e:	f002 f8ba 	bl	800a7b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000e24 	.word	0x20000e24
 8008654:	20000e0c 	.word	0x20000e0c

08008658 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	6039      	str	r1, [r7, #0]
 8008662:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800866e:	fb02 f303 	mul.w	r3, r2, r3
 8008672:	4a11      	ldr	r2, [pc, #68]	; (80086b8 <USBD_CDC_ReceivePacket+0x60>)
 8008674:	4413      	add	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	7c1b      	ldrb	r3, [r3, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10b      	bne.n	8008698 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	4a0e      	ldr	r2, [pc, #56]	; (80086bc <USBD_CDC_ReceivePacket+0x64>)
 8008684:	5cd1      	ldrb	r1, [r2, r3]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800868c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008690:	6838      	ldr	r0, [r7, #0]
 8008692:	f002 f8b1 	bl	800a7f8 <USBD_LL_PrepareReceive>
 8008696:	e009      	b.n	80086ac <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	4a08      	ldr	r2, [pc, #32]	; (80086bc <USBD_CDC_ReceivePacket+0x64>)
 800869c:	5cd1      	ldrb	r1, [r2, r3]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086a4:	2340      	movs	r3, #64	; 0x40
 80086a6:	6838      	ldr	r0, [r7, #0]
 80086a8:	f002 f8a6 	bl	800a7f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000e24 	.word	0x20000e24
 80086bc:	20000e10 	.word	0x20000e10

080086c0 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	4608      	mov	r0, r1
 80086ca:	4611      	mov	r1, r2
 80086cc:	461a      	mov	r2, r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	70fb      	strb	r3, [r7, #3]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70bb      	strb	r3, [r7, #2]
 80086d6:	4613      	mov	r3, r2
 80086d8:	707b      	strb	r3, [r7, #1]
  desc += 9;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3309      	adds	r3, #9
 80086de:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80086e0:	2300      	movs	r3, #0
 80086e2:	73fb      	strb	r3, [r7, #15]
 80086e4:	e05b      	b.n	800879e <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3302      	adds	r3, #2
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3310      	adds	r3, #16
 80086f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80086f6:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	330a      	adds	r3, #10
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	331a      	adds	r3, #26
 8008704:	78ba      	ldrb	r2, [r7, #2]
 8008706:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3322      	adds	r3, #34	; 0x22
 800870c:	78fa      	ldrb	r2, [r7, #3]
 800870e:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3323      	adds	r3, #35	; 0x23
 8008714:	78ba      	ldrb	r2, [r7, #2]
 8008716:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3326      	adds	r3, #38	; 0x26
 800871c:	7e3a      	ldrb	r2, [r7, #24]
 800871e:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	332d      	adds	r3, #45	; 0x2d
 8008724:	78ba      	ldrb	r2, [r7, #2]
 8008726:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3336      	adds	r3, #54	; 0x36
 800872c:	7f3a      	ldrb	r2, [r7, #28]
 800872e:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	333d      	adds	r3, #61	; 0x3d
 8008734:	787a      	ldrb	r2, [r7, #1]
 8008736:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3342      	adds	r3, #66	; 0x42
 800873c:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	491b      	ldr	r1, [pc, #108]	; (80087b0 <USBD_Update_CDC_ACM_DESC+0xf0>)
 8008742:	787a      	ldrb	r2, [r7, #1]
 8008744:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	491a      	ldr	r1, [pc, #104]	; (80087b4 <USBD_Update_CDC_ACM_DESC+0xf4>)
 800874a:	7f3a      	ldrb	r2, [r7, #28]
 800874c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	4919      	ldr	r1, [pc, #100]	; (80087b8 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8008752:	7e3a      	ldrb	r2, [r7, #24]
 8008754:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	4918      	ldr	r1, [pc, #96]	; (80087bc <USBD_Update_CDC_ACM_DESC+0xfc>)
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	4917      	ldr	r1, [pc, #92]	; (80087c0 <USBD_Update_CDC_ACM_DESC+0x100>)
 8008762:	78ba      	ldrb	r2, [r7, #2]
 8008764:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
 8008768:	4916      	ldr	r1, [pc, #88]	; (80087c4 <USBD_Update_CDC_ACM_DESC+0x104>)
 800876a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800876e:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8008770:	787b      	ldrb	r3, [r7, #1]
 8008772:	3302      	adds	r3, #2
 8008774:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8008776:	787b      	ldrb	r3, [r7, #1]
 8008778:	3301      	adds	r3, #1
 800877a:	763b      	strb	r3, [r7, #24]
    out_ep++;
 800877c:	7f3b      	ldrb	r3, [r7, #28]
 800877e:	3301      	adds	r3, #1
 8008780:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8008782:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008786:	3301      	adds	r3, #1
 8008788:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	3302      	adds	r3, #2
 8008790:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8008792:	78fb      	ldrb	r3, [r7, #3]
 8008794:	3301      	adds	r3, #1
 8008796:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	3301      	adds	r3, #1
 800879c:	73fb      	strb	r3, [r7, #15]
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0a0      	beq.n	80086e6 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr
 80087b0:	20000e0c 	.word	0x20000e0c
 80087b4:	20000e10 	.word	0x20000e10
 80087b8:	20000e14 	.word	0x20000e14
 80087bc:	20000e18 	.word	0x20000e18
 80087c0:	20000e1c 	.word	0x20000e1c
 80087c4:	20000e20 	.word	0x20000e20

080087c8 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 80087d4:	4b08      	ldr	r3, [pc, #32]	; (80087f8 <USBD_COMPOSITE_Init+0x30>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	78fa      	ldrb	r2, [r7, #3]
 80087da:	4611      	mov	r1, r2
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
 80087e0:	4b06      	ldr	r3, [pc, #24]	; (80087fc <USBD_COMPOSITE_Init+0x34>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	78fa      	ldrb	r2, [r7, #3]
 80087e6:	4611      	mov	r1, r2
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	200000d0 	.word	0x200000d0
 80087fc:	200001f0 	.word	0x200001f0

08008800 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 800880c:	4b08      	ldr	r3, [pc, #32]	; (8008830 <USBD_COMPOSITE_DeInit+0x30>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	78fa      	ldrb	r2, [r7, #3]
 8008812:	4611      	mov	r1, r2
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	4798      	blx	r3
#endif
#if (USBD_USE_HID_MOUSE == 1)
  USBD_HID_MOUSE.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
 8008818:	4b06      	ldr	r3, [pc, #24]	; (8008834 <USBD_COMPOSITE_DeInit+0x34>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	4611      	mov	r1, r2
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	200000d0 	.word	0x200000d0
 8008834:	200001f0 	.word	0x200001f0

08008838 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008842:	2300      	movs	r3, #0
 8008844:	73fb      	strb	r3, [r7, #15]
 8008846:	e019      	b.n	800887c <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	889b      	ldrh	r3, [r3, #4]
 800884c:	b2da      	uxtb	r2, r3
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	4915      	ldr	r1, [pc, #84]	; (80088a8 <USBD_COMPOSITE_Setup+0x70>)
 8008852:	5ccb      	ldrb	r3, [r1, r3]
 8008854:	429a      	cmp	r2, r3
 8008856:	d007      	beq.n	8008868 <USBD_COMPOSITE_Setup+0x30>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	889b      	ldrh	r3, [r3, #4]
 800885c:	b2da      	uxtb	r2, r3
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	4912      	ldr	r1, [pc, #72]	; (80088ac <USBD_COMPOSITE_Setup+0x74>)
 8008862:	5ccb      	ldrb	r3, [r1, r3]
 8008864:	429a      	cmp	r2, r3
 8008866:	d106      	bne.n	8008876 <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8008868:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <USBD_COMPOSITE_Setup+0x78>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
 8008872:	4603      	mov	r3, r0
 8008874:	e014      	b.n	80088a0 <USBD_COMPOSITE_Setup+0x68>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	3301      	adds	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0e2      	beq.n	8008848 <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_MOUSE.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (LOBYTE(req->wIndex) == HID_KEYBOARD_ITF_NBR)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	889b      	ldrh	r3, [r3, #4]
 8008886:	b2da      	uxtb	r2, r3
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <USBD_COMPOSITE_Setup+0x7c>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	429a      	cmp	r2, r3
 800888e:	d106      	bne.n	800889e <USBD_COMPOSITE_Setup+0x66>
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <USBD_COMPOSITE_Setup+0x80>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
 800889a:	4603      	mov	r3, r0
 800889c:	e000      	b.n	80088a0 <USBD_COMPOSITE_Setup+0x68>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800889e:	2303      	movs	r3, #3
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	20000e18 	.word	0x20000e18
 80088ac:	20000e1c 	.word	0x20000e1c
 80088b0:	200000d0 	.word	0x200000d0
 80088b4:	20001148 	.word	0x20001148
 80088b8:	200001f0 	.word	0x200001f0

080088bc <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
 80088cc:	e01a      	b.n	8008904 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	4918      	ldr	r1, [pc, #96]	; (8008934 <USBD_COMPOSITE_DataIn+0x78>)
 80088d4:	5ccb      	ldrb	r3, [r1, r3]
 80088d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088da:	429a      	cmp	r2, r3
 80088dc:	d007      	beq.n	80088ee <USBD_COMPOSITE_DataIn+0x32>
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	4915      	ldr	r1, [pc, #84]	; (8008938 <USBD_COMPOSITE_DataIn+0x7c>)
 80088e4:	5ccb      	ldrb	r3, [r1, r3]
 80088e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d107      	bne.n	80088fe <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <USBD_COMPOSITE_DataIn+0x80>)
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	78fa      	ldrb	r2, [r7, #3]
 80088f4:	4611      	mov	r1, r2
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
 80088fa:	4603      	mov	r3, r0
 80088fc:	e015      	b.n	800892a <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	3301      	adds	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0e1      	beq.n	80088ce <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_MOUSE.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  if (epnum == (HID_KEYBOARD_IN_EP & 0x7F))
 800890a:	78fa      	ldrb	r2, [r7, #3]
 800890c:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <USBD_COMPOSITE_DataIn+0x84>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008914:	429a      	cmp	r2, r3
 8008916:	d107      	bne.n	8008928 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
 8008918:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <USBD_COMPOSITE_DataIn+0x88>)
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	78fa      	ldrb	r2, [r7, #3]
 800891e:	4611      	mov	r1, r2
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	4798      	blx	r3
 8008924:	4603      	mov	r3, r0
 8008926:	e000      	b.n	800892a <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8008928:	2303      	movs	r3, #3
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20000e0c 	.word	0x20000e0c
 8008938:	20000e14 	.word	0x20000e14
 800893c:	200000d0 	.word	0x200000d0
 8008940:	200001ee 	.word	0x200001ee
 8008944:	200001f0 	.word	0x200001f0

08008948 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	200000d0 	.word	0x200000d0

08008968 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr

0800897c <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bc80      	pop	{r7}
 80089be:	4770      	bx	lr

080089c0 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	e010      	b.n	80089f4 <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	4a0b      	ldr	r2, [pc, #44]	; (8008a04 <USBD_COMPOSITE_DataOut+0x44>)
 80089d6:	5cd3      	ldrb	r3, [r2, r3]
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d107      	bne.n	80089ee <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 80089de:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <USBD_COMPOSITE_DataOut+0x48>)
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	78fa      	ldrb	r2, [r7, #3]
 80089e4:	4611      	mov	r1, r2
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	4798      	blx	r3
 80089ea:	4603      	mov	r3, r0
 80089ec:	e006      	b.n	80089fc <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	3301      	adds	r3, #1
 80089f2:	73fb      	strb	r3, [r7, #15]
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0eb      	beq.n	80089d2 <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 80089fa:	2303      	movs	r3, #3
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20000e10 	.word	0x20000e10
 8008a08:	200000d0 	.word	0x200000d0

08008a0c <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2264      	movs	r2, #100	; 0x64
 8008a18:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8008a1a:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	200010a4 	.word	0x200010a4

08008a2c <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2264      	movs	r2, #100	; 0x64
 8008a38:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8008a3a:	4b03      	ldr	r3, [pc, #12]	; (8008a48 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	20001040 	.word	0x20001040

08008a4c <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2264      	movs	r2, #100	; 0x64
 8008a58:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8008a5a:	4b03      	ldr	r3, [pc, #12]	; (8008a68 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	200010a4 	.word	0x200010a4

08008a6c <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	220a      	movs	r2, #10
 8008a78:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8008a7a:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bc80      	pop	{r7}
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	200001e4 	.word	0x200001e4

08008a8c <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	; 0x28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	460b      	mov	r3, r1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8008a9a:	4b20      	ldr	r3, [pc, #128]	; (8008b1c <USBD_COMPOSITE_GetUsrStringDesc+0x90>)
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	7afa      	ldrb	r2, [r7, #11]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d836      	bhi.n	8008b12 <USBD_COMPOSITE_GetUsrStringDesc+0x86>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	f107 0318 	add.w	r3, r7, #24
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	605a      	str	r2, [r3, #4]
 8008ab2:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008aba:	e01a      	b.n	8008af2 <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8008abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ac0:	4a17      	ldr	r2, [pc, #92]	; (8008b20 <USBD_COMPOSITE_GetUsrStringDesc+0x94>)
 8008ac2:	5cd3      	ldrb	r3, [r2, r3]
 8008ac4:	7afa      	ldrb	r2, [r7, #11]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d10e      	bne.n	8008ae8 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8008aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ace:	f107 0014 	add.w	r0, r7, #20
 8008ad2:	4a14      	ldr	r2, [pc, #80]	; (8008b24 <USBD_COMPOSITE_GetUsrStringDesc+0x98>)
 8008ad4:	2110      	movs	r1, #16
 8008ad6:	f001 ff2f 	bl	800a938 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8008ada:	f107 0314 	add.w	r3, r7, #20
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	4911      	ldr	r1, [pc, #68]	; (8008b28 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f001 fb8f 	bl	800a206 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8008ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aec:	3301      	adds	r3, #1
 8008aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0e0      	beq.n	8008abc <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_MOUSE_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    if (index == HID_KEYBOARD_STR_DESC_IDX)
 8008afa:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <USBD_COMPOSITE_GetUsrStringDesc+0xa0>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	7afa      	ldrb	r2, [r7, #11]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d104      	bne.n	8008b0e <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	4908      	ldr	r1, [pc, #32]	; (8008b28 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8008b08:	4809      	ldr	r0, [pc, #36]	; (8008b30 <USBD_COMPOSITE_GetUsrStringDesc+0xa4>)
 8008b0a:	f001 fb7c 	bl	800a206 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 8008b0e:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <USBD_COMPOSITE_GetUsrStringDesc+0x9c>)
 8008b10:	e000      	b.n	8008b14 <USBD_COMPOSITE_GetUsrStringDesc+0x88>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8008b12:	2300      	movs	r3, #0
  }
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3728      	adds	r7, #40	; 0x28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	200001e0 	.word	0x200001e0
 8008b20:	20000e20 	.word	0x20000e20
 8008b24:	0800b314 	.word	0x0800b314
 8008b28:	20001108 	.word	0x20001108
 8008b2c:	20001149 	.word	0x20001149
 8008b30:	0800b324 	.word	0x0800b324

08008b34 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b089      	sub	sp, #36	; 0x24
 8008b38:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8008b42:	2381      	movs	r3, #129	; 0x81
 8008b44:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8008b46:	2301      	movs	r3, #1
 8008b48:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_KEYBOARD == 1)
  ptr = USBD_HID_KEYBOARD.GetFSConfigDescriptor(&len);
 8008b4e:	4b6f      	ldr	r3, [pc, #444]	; (8008d0c <USBD_COMPOSITE_Mount_Class+0x1d8>)
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	1d3a      	adds	r2, r7, #4
 8008b54:	4610      	mov	r0, r2
 8008b56:	4798      	blx	r3
 8008b58:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8008b5a:	4b6d      	ldr	r3, [pc, #436]	; (8008d10 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	7afa      	ldrb	r2, [r7, #11]
 8008b60:	7a79      	ldrb	r1, [r7, #9]
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 faf0 	bl	8009148 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3309      	adds	r3, #9
 8008b6c:	88ba      	ldrh	r2, [r7, #4]
 8008b6e:	3a09      	subs	r2, #9
 8008b70:	4619      	mov	r1, r3
 8008b72:	4868      	ldr	r0, [pc, #416]	; (8008d14 <USBD_COMPOSITE_Mount_Class+0x1e0>)
 8008b74:	f001 feca 	bl	800a90c <memcpy>

  ptr = USBD_HID_KEYBOARD.GetHSConfigDescriptor(&len);
 8008b78:	4b64      	ldr	r3, [pc, #400]	; (8008d0c <USBD_COMPOSITE_Mount_Class+0x1d8>)
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7c:	1d3a      	adds	r2, r7, #4
 8008b7e:	4610      	mov	r0, r2
 8008b80:	4798      	blx	r3
 8008b82:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_KBD_DESC(ptr, interface_no_track, in_ep_track, USBD_Track_String_Index);
 8008b84:	4b62      	ldr	r3, [pc, #392]	; (8008d10 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	7afa      	ldrb	r2, [r7, #11]
 8008b8a:	7a79      	ldrb	r1, [r7, #9]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fadb 	bl	8009148 <USBD_Update_HID_KBD_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_KEYBOARD_DESC, ptr + 0x09, len - 0x09);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3309      	adds	r3, #9
 8008b96:	88ba      	ldrh	r2, [r7, #4]
 8008b98:	3a09      	subs	r2, #9
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	485e      	ldr	r0, [pc, #376]	; (8008d18 <USBD_COMPOSITE_Mount_Class+0x1e4>)
 8008b9e:	f001 feb5 	bl	800a90c <memcpy>

  in_ep_track += 1;
 8008ba2:	7afb      	ldrb	r3, [r7, #11]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 1;
 8008ba8:	7a7b      	ldrb	r3, [r7, #9]
 8008baa:	3301      	adds	r3, #1
 8008bac:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8008bae:	4b58      	ldr	r3, [pc, #352]	; (8008d10 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	4b56      	ldr	r3, [pc, #344]	; (8008d10 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8008bb8:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8008bba:	4b58      	ldr	r3, [pc, #352]	; (8008d1c <USBD_COMPOSITE_Mount_Class+0x1e8>)
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	1d3a      	adds	r2, r7, #4
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4798      	blx	r3
 8008bc4:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8008bc6:	7a7b      	ldrb	r3, [r7, #9]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	b2d8      	uxtb	r0, r3
 8008bcc:	7afb      	ldrb	r3, [r7, #11]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	4a4f      	ldr	r2, [pc, #316]	; (8008d10 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8008bd4:	7812      	ldrb	r2, [r2, #0]
 8008bd6:	7afc      	ldrb	r4, [r7, #11]
 8008bd8:	7a79      	ldrb	r1, [r7, #9]
 8008bda:	9202      	str	r2, [sp, #8]
 8008bdc:	7aba      	ldrb	r2, [r7, #10]
 8008bde:	9201      	str	r2, [sp, #4]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	4623      	mov	r3, r4
 8008be4:	4602      	mov	r2, r0
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f7ff fd6a 	bl	80086c0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3309      	adds	r3, #9
 8008bf0:	88ba      	ldrh	r2, [r7, #4]
 8008bf2:	3a09      	subs	r2, #9
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	484a      	ldr	r0, [pc, #296]	; (8008d20 <USBD_COMPOSITE_Mount_Class+0x1ec>)
 8008bf8:	f001 fe88 	bl	800a90c <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 8008bfc:	4b47      	ldr	r3, [pc, #284]	; (8008d1c <USBD_COMPOSITE_Mount_Class+0x1e8>)
 8008bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c00:	1d3a      	adds	r2, r7, #4
 8008c02:	4610      	mov	r0, r2
 8008c04:	4798      	blx	r3
 8008c06:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8008c08:	7a7b      	ldrb	r3, [r7, #9]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	b2d8      	uxtb	r0, r3
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	3301      	adds	r3, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	4a3e      	ldr	r2, [pc, #248]	; (8008d10 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8008c16:	7812      	ldrb	r2, [r2, #0]
 8008c18:	7afc      	ldrb	r4, [r7, #11]
 8008c1a:	7a79      	ldrb	r1, [r7, #9]
 8008c1c:	9202      	str	r2, [sp, #8]
 8008c1e:	7aba      	ldrb	r2, [r7, #10]
 8008c20:	9201      	str	r2, [sp, #4]
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4623      	mov	r3, r4
 8008c26:	4602      	mov	r2, r0
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff fd49 	bl	80086c0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3309      	adds	r3, #9
 8008c32:	88ba      	ldrh	r2, [r7, #4]
 8008c34:	3a09      	subs	r2, #9
 8008c36:	4619      	mov	r1, r3
 8008c38:	483a      	ldr	r0, [pc, #232]	; (8008d24 <USBD_COMPOSITE_Mount_Class+0x1f0>)
 8008c3a:	f001 fe67 	bl	800a90c <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 8008c3e:	7afb      	ldrb	r3, [r7, #11]
 8008c40:	3302      	adds	r3, #2
 8008c42:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8008c44:	7abb      	ldrb	r3, [r7, #10]
 8008c46:	3301      	adds	r3, #1
 8008c48:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8008c4a:	7a7b      	ldrb	r3, [r7, #9]
 8008c4c:	3302      	adds	r3, #2
 8008c4e:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8008c50:	4b2f      	ldr	r3, [pc, #188]	; (8008d10 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	4b2d      	ldr	r3, [pc, #180]	; (8008d10 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 8008c5a:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8008c5c:	2364      	movs	r3, #100	; 0x64
 8008c5e:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 8008c60:	4b31      	ldr	r3, [pc, #196]	; (8008d28 <USBD_COMPOSITE_Mount_Class+0x1f4>)
 8008c62:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2209      	movs	r2, #9
 8008c68:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	2202      	movs	r2, #2
 8008c70:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3302      	adds	r3, #2
 8008c76:	88fa      	ldrh	r2, [r7, #6]
 8008c78:	b2d2      	uxtb	r2, r2
 8008c7a:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8008c7c:	88fb      	ldrh	r3, [r7, #6]
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3303      	adds	r3, #3
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	7a7a      	ldrb	r2, [r7, #9]
 8008c90:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3305      	adds	r3, #5
 8008c96:	2201      	movs	r2, #1
 8008c98:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3306      	adds	r3, #6
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3307      	adds	r3, #7
 8008ca6:	22c0      	movs	r2, #192	; 0xc0
 8008ca8:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3308      	adds	r3, #8
 8008cae:	2232      	movs	r2, #50	; 0x32
 8008cb0:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 8008cb2:	4b1e      	ldr	r3, [pc, #120]	; (8008d2c <USBD_COMPOSITE_Mount_Class+0x1f8>)
 8008cb4:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2209      	movs	r2, #9
 8008cba:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3302      	adds	r3, #2
 8008cc8:	88fa      	ldrh	r2, [r7, #6]
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8008cce:	88fb      	ldrh	r3, [r7, #6]
 8008cd0:	0a1b      	lsrs	r3, r3, #8
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3303      	adds	r3, #3
 8008cd8:	b2d2      	uxtb	r2, r2
 8008cda:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	7a7a      	ldrb	r2, [r7, #9]
 8008ce2:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3305      	adds	r3, #5
 8008ce8:	2201      	movs	r2, #1
 8008cea:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3306      	adds	r3, #6
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3307      	adds	r3, #7
 8008cf8:	22c0      	movs	r2, #192	; 0xc0
 8008cfa:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3308      	adds	r3, #8
 8008d00:	2232      	movs	r2, #50	; 0x32
 8008d02:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8008d04:	bf00      	nop
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd90      	pop	{r4, r7, pc}
 8008d0c:	200001f0 	.word	0x200001f0
 8008d10:	200001e0 	.word	0x200001e0
 8008d14:	20001049 	.word	0x20001049
 8008d18:	200010ad 	.word	0x200010ad
 8008d1c:	200000d0 	.word	0x200000d0
 8008d20:	20001062 	.word	0x20001062
 8008d24:	200010c6 	.word	0x200010c6
 8008d28:	200010a4 	.word	0x200010a4
 8008d2c:	20001040 	.word	0x20001040

08008d30 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_Keyboard_HandleTypeDef *hhid;

  hhid = &USBD_HID_KBD_Instace;
 8008d3c:	4b24      	ldr	r3, [pc, #144]	; (8008dd0 <USBD_HID_Init+0xa0>)
 8008d3e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d105      	bne.n	8008d52 <USBD_HID_Init+0x22>
  {
    pdev->pClassData_HID_Keyboard = NULL;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    return (uint8_t)USBD_EMEM;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e03a      	b.n	8008dc8 <USBD_HID_Init+0x98>
  }

  pdev->pClassData_HID_Keyboard = (void *)hhid;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	7c1b      	ldrb	r3, [r3, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10d      	bne.n	8008d7e <USBD_HID_Init+0x4e>
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_HS_BINTERVAL;
 8008d62:	4b1c      	ldr	r3, [pc, #112]	; (8008dd4 <USBD_HID_Init+0xa4>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	f003 020f 	and.w	r2, r3, #15
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	440b      	add	r3, r1
 8008d76:	3326      	adds	r3, #38	; 0x26
 8008d78:	2201      	movs	r2, #1
 8008d7a:	801a      	strh	r2, [r3, #0]
 8008d7c:	e00c      	b.n	8008d98 <USBD_HID_Init+0x68>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = HID_KEYBOARD_FS_BINTERVAL;
 8008d7e:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <USBD_HID_Init+0xa4>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	f003 020f 	and.w	r2, r3, #15
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	3326      	adds	r3, #38	; 0x26
 8008d94:	2201      	movs	r2, #1
 8008d96:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_KEYBOARD_IN_EP, USBD_EP_TYPE_INTR, HID_KEYBOARD_EPIN_SIZE);
 8008d98:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <USBD_HID_Init+0xa4>)
 8008d9a:	7819      	ldrb	r1, [r3, #0]
 8008d9c:	2308      	movs	r3, #8
 8008d9e:	2203      	movs	r2, #3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 fc3a 	bl	800a61a <USBD_LL_OpenEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 1U;
 8008da6:	4b0b      	ldr	r3, [pc, #44]	; (8008dd4 <USBD_HID_Init+0xa4>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	f003 020f 	and.w	r2, r3, #15
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	440b      	add	r3, r1
 8008dba:	3324      	adds	r3, #36	; 0x24
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	801a      	strh	r2, [r3, #0]

  hhid->state = KEYBOARD_HID_IDLE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	2000114c 	.word	0x2000114c
 8008dd4:	200001ee 	.word	0x200001ee

08008dd8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_KEYBOARD_IN_EP);
 8008de4:	4b16      	ldr	r3, [pc, #88]	; (8008e40 <USBD_HID_DeInit+0x68>)
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 fc3b 	bl	800a666 <USBD_LL_CloseEP>
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].is_used = 0U;
 8008df0:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <USBD_HID_DeInit+0x68>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	f003 020f 	and.w	r2, r3, #15
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	440b      	add	r3, r1
 8008e04:	3324      	adds	r3, #36	; 0x24
 8008e06:	2200      	movs	r2, #0
 8008e08:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HID_KEYBOARD_IN_EP & 0xFU].bInterval = 0U;
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <USBD_HID_DeInit+0x68>)
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	f003 020f 	and.w	r2, r3, #15
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	3326      	adds	r3, #38	; 0x26
 8008e20:	2200      	movs	r2, #0
 8008e22:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Keyboard != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <USBD_HID_DeInit+0x5e>
  {
#if (0)
    (void)USBD_free(pdev->pClassData_HID_Keyboard);
#endif
    pdev->pClassData_HID_Keyboard = NULL;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  }

  return (uint8_t)USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	200001ee 	.word	0x200001ee

08008e44 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e54:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e0e8      	b.n	800903a <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d046      	beq.n	8008f02 <USBD_HID_Setup+0xbe>
 8008e74:	2b20      	cmp	r3, #32
 8008e76:	f040 80d8 	bne.w	800902a <USBD_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	785b      	ldrb	r3, [r3, #1]
 8008e7e:	3b02      	subs	r3, #2
 8008e80:	2b09      	cmp	r3, #9
 8008e82:	d836      	bhi.n	8008ef2 <USBD_HID_Setup+0xae>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <USBD_HID_Setup+0x48>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008ee3 	.word	0x08008ee3
 8008e90:	08008ec3 	.word	0x08008ec3
 8008e94:	08008ef3 	.word	0x08008ef3
 8008e98:	08008ef3 	.word	0x08008ef3
 8008e9c:	08008ef3 	.word	0x08008ef3
 8008ea0:	08008ef3 	.word	0x08008ef3
 8008ea4:	08008ef3 	.word	0x08008ef3
 8008ea8:	08008ef3 	.word	0x08008ef3
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008eb5 	.word	0x08008eb5
    {
    case HID_KEYBOARD_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	885b      	ldrh	r3, [r3, #2]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	461a      	mov	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	601a      	str	r2, [r3, #0]
      break;
 8008ec0:	e01e      	b.n	8008f00 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 f9fb 	bl	800a2c4 <USBD_CtlSendData>
      break;
 8008ece:	e017      	b.n	8008f00 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	885b      	ldrh	r3, [r3, #2]
 8008ed4:	0a1b      	lsrs	r3, r3, #8
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	461a      	mov	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	605a      	str	r2, [r3, #4]
      break;
 8008ee0:	e00e      	b.n	8008f00 <USBD_HID_Setup+0xbc>

    case HID_KEYBOARD_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 f9ea 	bl	800a2c4 <USBD_CtlSendData>
      break;
 8008ef0:	e006      	b.n	8008f00 <USBD_HID_Setup+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 f975 	bl	800a1e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008efa:	2303      	movs	r3, #3
 8008efc:	75fb      	strb	r3, [r7, #23]
      break;
 8008efe:	bf00      	nop
    }
    break;
 8008f00:	e09a      	b.n	8009038 <USBD_HID_Setup+0x1f4>
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	2b0b      	cmp	r3, #11
 8008f08:	f200 8086 	bhi.w	8009018 <USBD_HID_Setup+0x1d4>
 8008f0c:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <USBD_HID_Setup+0xd0>)
 8008f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f12:	bf00      	nop
 8008f14:	08008f45 	.word	0x08008f45
 8008f18:	08009027 	.word	0x08009027
 8008f1c:	08009019 	.word	0x08009019
 8008f20:	08009019 	.word	0x08009019
 8008f24:	08009019 	.word	0x08009019
 8008f28:	08009019 	.word	0x08009019
 8008f2c:	08008f6f 	.word	0x08008f6f
 8008f30:	08009019 	.word	0x08009019
 8008f34:	08009019 	.word	0x08009019
 8008f38:	08009019 	.word	0x08009019
 8008f3c:	08008fc7 	.word	0x08008fc7
 8008f40:	08008ff1 	.word	0x08008ff1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d107      	bne.n	8008f60 <USBD_HID_Setup+0x11c>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008f50:	f107 030a 	add.w	r3, r7, #10
 8008f54:	2202      	movs	r2, #2
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f9b3 	bl	800a2c4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008f5e:	e063      	b.n	8009028 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 f93e 	bl	800a1e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f6c:	e05c      	b.n	8009028 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == HID_KEYBOARD_REPORT_DESC)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	885b      	ldrh	r3, [r3, #2]
 8008f72:	0a1b      	lsrs	r3, r3, #8
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	2b22      	cmp	r3, #34	; 0x22
 8008f78:	d108      	bne.n	8008f8c <USBD_HID_Setup+0x148>
      {
        len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	88db      	ldrh	r3, [r3, #6]
 8008f7e:	2bbb      	cmp	r3, #187	; 0xbb
 8008f80:	bf28      	it	cs
 8008f82:	23bb      	movcs	r3, #187	; 0xbb
 8008f84:	82bb      	strh	r3, [r7, #20]
        pbuf = HID_KEYBOARD_ReportDesc;
 8008f86:	4b2f      	ldr	r3, [pc, #188]	; (8009044 <USBD_HID_Setup+0x200>)
 8008f88:	613b      	str	r3, [r7, #16]
 8008f8a:	e015      	b.n	8008fb8 <USBD_HID_Setup+0x174>
      }
      else if ((req->wValue >> 8) == HID_KEYBOARD_DESCRIPTOR_TYPE)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	0a1b      	lsrs	r3, r3, #8
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	2b21      	cmp	r3, #33	; 0x21
 8008f96:	d108      	bne.n	8008faa <USBD_HID_Setup+0x166>
      {
        pbuf = USBD_HID_KEYBOARD_Desc;
 8008f98:	4b2b      	ldr	r3, [pc, #172]	; (8009048 <USBD_HID_Setup+0x204>)
 8008f9a:	613b      	str	r3, [r7, #16]
        len = MIN(HID_KEYBOARD_DESC_SIZE, req->wLength);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	88db      	ldrh	r3, [r3, #6]
 8008fa0:	2b09      	cmp	r3, #9
 8008fa2:	bf28      	it	cs
 8008fa4:	2309      	movcs	r3, #9
 8008fa6:	82bb      	strh	r3, [r7, #20]
 8008fa8:	e006      	b.n	8008fb8 <USBD_HID_Setup+0x174>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 f919 	bl	800a1e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	75fb      	strb	r3, [r7, #23]
        break;
 8008fb6:	e037      	b.n	8009028 <USBD_HID_Setup+0x1e4>
      }
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fb8:	8abb      	ldrh	r3, [r7, #20]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	6939      	ldr	r1, [r7, #16]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f980 	bl	800a2c4 <USBD_CtlSendData>
      break;
 8008fc4:	e030      	b.n	8009028 <USBD_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d107      	bne.n	8008fe2 <USBD_HID_Setup+0x19e>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 f972 	bl	800a2c4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008fe0:	e022      	b.n	8009028 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 f8fd 	bl	800a1e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8008fea:	2303      	movs	r3, #3
 8008fec:	75fb      	strb	r3, [r7, #23]
      break;
 8008fee:	e01b      	b.n	8009028 <USBD_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d106      	bne.n	800900a <USBD_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	885b      	ldrh	r3, [r3, #2]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	461a      	mov	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	609a      	str	r2, [r3, #8]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009008:	e00e      	b.n	8009028 <USBD_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 f8e9 	bl	800a1e4 <USBD_CtlError>
        ret = USBD_FAIL;
 8009012:	2303      	movs	r3, #3
 8009014:	75fb      	strb	r3, [r7, #23]
      break;
 8009016:	e007      	b.n	8009028 <USBD_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 f8e2 	bl	800a1e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009020:	2303      	movs	r3, #3
 8009022:	75fb      	strb	r3, [r7, #23]
      break;
 8009024:	e000      	b.n	8009028 <USBD_HID_Setup+0x1e4>
      break;
 8009026:	bf00      	nop
    }
    break;
 8009028:	e006      	b.n	8009038 <USBD_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f8d9 	bl	800a1e4 <USBD_CtlError>
    ret = USBD_FAIL;
 8009032:	2303      	movs	r3, #3
 8009034:	75fb      	strb	r3, [r7, #23]
    break;
 8009036:	bf00      	nop
  }

  return (uint8_t)ret;
 8009038:	7dfb      	ldrb	r3, [r7, #23]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	2000028c 	.word	0x2000028c
 8009048:	20000274 	.word	0x20000274

0800904c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2222      	movs	r2, #34	; 0x22
 8009058:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	; (8009068 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	2000022c 	.word	0x2000022c

0800906c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgHSDesc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2222      	movs	r2, #34	; 0x22
 8009078:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgHSDesc;
 800907a:	4b03      	ldr	r3, [pc, #12]	; (8009088 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	bc80      	pop	{r7}
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	20000250 	.word	0x20000250

0800908c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_KEYBOARD_CfgFSDesc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2222      	movs	r2, #34	; 0x22
 8009098:	801a      	strh	r2, [r3, #0]

  return USBD_HID_KEYBOARD_CfgFSDesc;
 800909a:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bc80      	pop	{r7}
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	2000022c 	.word	0x2000022c

080090ac <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard)->state = KEYBOARD_HID_IDLE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090be:	2200      	movs	r2, #0
 80090c0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
	...

080090d0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	220a      	movs	r2, #10
 80090dc:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000280 	.word	0x20000280

080090f0 <USBD_HID_Keybaord_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_Keybaord_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_Keyboard_HandleTypeDef *hhid = (USBD_HID_Keyboard_HandleTypeDef *)pdev->pClassData_HID_Keyboard;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009104:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <USBD_HID_Keybaord_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 800910c:	2303      	movs	r3, #3
 800910e:	e014      	b.n	800913a <USBD_HID_Keybaord_SendReport+0x4a>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b03      	cmp	r3, #3
 800911a:	d10d      	bne.n	8009138 <USBD_HID_Keybaord_SendReport+0x48>
  {
    if (hhid->state == KEYBOARD_HID_IDLE)
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	7b1b      	ldrb	r3, [r3, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d109      	bne.n	8009138 <USBD_HID_Keybaord_SendReport+0x48>
    {
      hhid->state = KEYBOARD_HID_BUSY;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	2201      	movs	r2, #1
 8009128:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_KEYBOARD_IN_EP, report, len);
 800912a:	4b06      	ldr	r3, [pc, #24]	; (8009144 <USBD_HID_Keybaord_SendReport+0x54>)
 800912c:	7819      	ldrb	r1, [r3, #0]
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f001 fb3f 	bl	800a7b6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200001ee 	.word	0x200001ee

08009148 <USBD_Update_HID_KBD_DESC>:

  return ((uint32_t)(polling_interval));
}

void USBD_Update_HID_KBD_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t str_idx)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	4608      	mov	r0, r1
 8009152:	4611      	mov	r1, r2
 8009154:	461a      	mov	r2, r3
 8009156:	4603      	mov	r3, r0
 8009158:	70fb      	strb	r3, [r7, #3]
 800915a:	460b      	mov	r3, r1
 800915c:	70bb      	strb	r3, [r7, #2]
 800915e:	4613      	mov	r3, r2
 8009160:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	330b      	adds	r3, #11
 8009166:	78fa      	ldrb	r2, [r7, #3]
 8009168:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3311      	adds	r3, #17
 800916e:	787a      	ldrb	r2, [r7, #1]
 8009170:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	331d      	adds	r3, #29
 8009176:	78ba      	ldrb	r2, [r7, #2]
 8009178:	701a      	strb	r2, [r3, #0]

  HID_KEYBOARD_IN_EP = in_ep;
 800917a:	4a07      	ldr	r2, [pc, #28]	; (8009198 <USBD_Update_HID_KBD_DESC+0x50>)
 800917c:	78bb      	ldrb	r3, [r7, #2]
 800917e:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_ITF_NBR = itf_no;
 8009180:	4a06      	ldr	r2, [pc, #24]	; (800919c <USBD_Update_HID_KBD_DESC+0x54>)
 8009182:	78fb      	ldrb	r3, [r7, #3]
 8009184:	7013      	strb	r3, [r2, #0]
  HID_KEYBOARD_STR_DESC_IDX = str_idx;
 8009186:	4a06      	ldr	r2, [pc, #24]	; (80091a0 <USBD_Update_HID_KBD_DESC+0x58>)
 8009188:	787b      	ldrb	r3, [r7, #1]
 800918a:	7013      	strb	r3, [r2, #0]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	bc80      	pop	{r7}
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	200001ee 	.word	0x200001ee
 800919c:	20001148 	.word	0x20001148
 80091a0:	20001149 	.word	0x20001149

080091a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e01b      	b.n	80091f4 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	79fa      	ldrb	r2, [r7, #7]
 80091e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f001 f97d 	bl	800a4e8 <USBD_LL_Init>
 80091ee:	4603      	mov	r3, r0
 80091f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009210:	2303      	movs	r3, #3
 8009212:	e02d      	b.n	8009270 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	7c1b      	ldrb	r3, [r3, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d112      	bne.n	800924a <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01e      	beq.n	800926e <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009238:	f107 020e 	add.w	r2, r7, #14
 800923c:	4610      	mov	r0, r2
 800923e:	4798      	blx	r3
 8009240:	4602      	mov	r2, r0
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 8009248:	e011      	b.n	800926e <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00b      	beq.n	800926e <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925e:	f107 020e 	add.w	r2, r7, #14
 8009262:	4610      	mov	r0, r2
 8009264:	4798      	blx	r3
 8009266:	4602      	mov	r2, r0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 f9af 	bl	800a5e4 <USBD_LL_Start>
 8009286:	4603      	mov	r3, r0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	bc80      	pop	{r7}
 80092a2:	4770      	bx	lr

080092a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092b0:	2303      	movs	r3, #3
 80092b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	78fa      	ldrb	r2, [r7, #3]
 80092c8:	4611      	mov	r1, r2
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4798      	blx	r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d007      	beq.n	8009302 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	4611      	mov	r1, r2
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
  }

  return USBD_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	4618      	mov	r0, r3
 8009320:	f000 ff26 	bl	800a170 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009340:	f003 031f 	and.w	r3, r3, #31
 8009344:	2b02      	cmp	r3, #2
 8009346:	d01a      	beq.n	800937e <USBD_LL_SetupStage+0x72>
 8009348:	2b02      	cmp	r3, #2
 800934a:	d822      	bhi.n	8009392 <USBD_LL_SetupStage+0x86>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <USBD_LL_SetupStage+0x4a>
 8009350:	2b01      	cmp	r3, #1
 8009352:	d00a      	beq.n	800936a <USBD_LL_SetupStage+0x5e>
 8009354:	e01d      	b.n	8009392 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f9e6 	bl	8009730 <USBD_StdDevReq>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]
      break;
 8009368:	e020      	b.n	80093ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa4a 	bl	800980c <USBD_StdItfReq>
 8009378:	4603      	mov	r3, r0
 800937a:	73fb      	strb	r3, [r7, #15]
      break;
 800937c:	e016      	b.n	80093ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fa89 	bl	800989e <USBD_StdEPReq>
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]
      break;
 8009390:	e00c      	b.n	80093ac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009398:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800939c:	b2db      	uxtb	r3, r3
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 f97f 	bl	800a6a4 <USBD_LL_StallEP>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73fb      	strb	r3, [r7, #15]
      break;
 80093aa:	bf00      	nop
  }

  return ret;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	460b      	mov	r3, r1
 80093c0:	607a      	str	r2, [r7, #4]
 80093c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80093c4:	7afb      	ldrb	r3, [r7, #11]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d138      	bne.n	800943c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d14a      	bne.n	8009472 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	689a      	ldr	r2, [r3, #8]
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d913      	bls.n	8009410 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	1ad2      	subs	r2, r2, r3
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	4293      	cmp	r3, r2
 8009400:	bf28      	it	cs
 8009402:	4613      	movcs	r3, r2
 8009404:	461a      	mov	r2, r3
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 ffa4 	bl	800a356 <USBD_CtlContinueRx>
 800940e:	e030      	b.n	8009472 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b03      	cmp	r3, #3
 800941a:	d10b      	bne.n	8009434 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 ff9f 	bl	800a378 <USBD_CtlSendStatus>
 800943a:	e01a      	b.n	8009472 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b03      	cmp	r3, #3
 8009446:	d114      	bne.n	8009472 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00e      	beq.n	8009472 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	7afa      	ldrb	r2, [r7, #11]
 800945e:	4611      	mov	r1, r2
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	4798      	blx	r3
 8009464:	4603      	mov	r3, r0
 8009466:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	e000      	b.n	8009474 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	460b      	mov	r3, r1
 8009486:	607a      	str	r2, [r7, #4]
 8009488:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800948a:	7afb      	ldrb	r3, [r7, #11]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d16b      	bne.n	8009568 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3314      	adds	r3, #20
 8009494:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800949c:	2b02      	cmp	r3, #2
 800949e:	d156      	bne.n	800954e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d914      	bls.n	80094d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	461a      	mov	r2, r3
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 ff19 	bl	800a2fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094c8:	2300      	movs	r3, #0
 80094ca:	2200      	movs	r2, #0
 80094cc:	2100      	movs	r1, #0
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f001 f992 	bl	800a7f8 <USBD_LL_PrepareReceive>
 80094d4:	e03b      	b.n	800954e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d11c      	bne.n	800951c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d316      	bcc.n	800951c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d20f      	bcs.n	800951c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094fc:	2200      	movs	r2, #0
 80094fe:	2100      	movs	r1, #0
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fefa 	bl	800a2fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800950e:	2300      	movs	r3, #0
 8009510:	2200      	movs	r2, #0
 8009512:	2100      	movs	r1, #0
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f001 f96f 	bl	800a7f8 <USBD_LL_PrepareReceive>
 800951a:	e018      	b.n	800954e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b03      	cmp	r3, #3
 8009526:	d10b      	bne.n	8009540 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d005      	beq.n	8009540 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009540:	2180      	movs	r1, #128	; 0x80
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f001 f8ae 	bl	800a6a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 ff28 	bl	800a39e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009554:	2b01      	cmp	r3, #1
 8009556:	d122      	bne.n	800959e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7ff fe99 	bl	8009290 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009566:	e01a      	b.n	800959e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b03      	cmp	r3, #3
 8009572:	d114      	bne.n	800959e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957a:	695b      	ldr	r3, [r3, #20]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00e      	beq.n	800959e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	7afa      	ldrb	r2, [r7, #11]
 800958a:	4611      	mov	r1, r2
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	4798      	blx	r3
 8009590:	4603      	mov	r3, r0
 8009592:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009594:	7dfb      	ldrb	r3, [r7, #23]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	e000      	b.n	80095a0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80095d8:	2303      	movs	r3, #3
 80095da:	e02a      	b.n	8009632 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d009      	beq.n	80095fc <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	6852      	ldr	r2, [r2, #4]
 80095f4:	b2d2      	uxtb	r2, r2
 80095f6:	4611      	mov	r1, r2
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095fc:	2340      	movs	r3, #64	; 0x40
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 f809 	bl	800a61a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2240      	movs	r2, #64	; 0x40
 8009614:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009618:	2340      	movs	r3, #64	; 0x40
 800961a:	2200      	movs	r2, #0
 800961c:	2180      	movs	r1, #128	; 0x80
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fffb 	bl	800a61a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2240      	movs	r2, #64	; 0x40
 800962e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	78fa      	ldrb	r2, [r7, #3]
 800964a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	bc80      	pop	{r7}
 8009656:	4770      	bx	lr

08009658 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009666:	b2da      	uxtb	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2204      	movs	r2, #4
 8009672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	bc80      	pop	{r7}
 8009680:	4770      	bx	lr

08009682 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b04      	cmp	r3, #4
 8009694:	d106      	bne.n	80096a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800969c:	b2da      	uxtb	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bc80      	pop	{r7}
 80096ae:	4770      	bx	lr

080096b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e012      	b.n	80096ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d10b      	bne.n	80096ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d005      	beq.n	80096ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	3301      	adds	r3, #1
 800970a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009712:	8a3b      	ldrh	r3, [r7, #16]
 8009714:	021b      	lsls	r3, r3, #8
 8009716:	b21a      	sxth	r2, r3
 8009718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800971c:	4313      	orrs	r3, r2
 800971e:	b21b      	sxth	r3, r3
 8009720:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009722:	89fb      	ldrh	r3, [r7, #14]
}
 8009724:	4618      	mov	r0, r3
 8009726:	371c      	adds	r7, #28
 8009728:	46bd      	mov	sp, r7
 800972a:	bc80      	pop	{r7}
 800972c:	4770      	bx	lr
	...

08009730 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009746:	2b40      	cmp	r3, #64	; 0x40
 8009748:	d005      	beq.n	8009756 <USBD_StdDevReq+0x26>
 800974a:	2b40      	cmp	r3, #64	; 0x40
 800974c:	d853      	bhi.n	80097f6 <USBD_StdDevReq+0xc6>
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00b      	beq.n	800976a <USBD_StdDevReq+0x3a>
 8009752:	2b20      	cmp	r3, #32
 8009754:	d14f      	bne.n	80097f6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	4798      	blx	r3
 8009764:	4603      	mov	r3, r0
 8009766:	73fb      	strb	r3, [r7, #15]
      break;
 8009768:	e04a      	b.n	8009800 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b09      	cmp	r3, #9
 8009770:	d83b      	bhi.n	80097ea <USBD_StdDevReq+0xba>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <USBD_StdDevReq+0x48>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	080097cd 	.word	0x080097cd
 800977c:	080097e1 	.word	0x080097e1
 8009780:	080097eb 	.word	0x080097eb
 8009784:	080097d7 	.word	0x080097d7
 8009788:	080097eb 	.word	0x080097eb
 800978c:	080097ab 	.word	0x080097ab
 8009790:	080097a1 	.word	0x080097a1
 8009794:	080097eb 	.word	0x080097eb
 8009798:	080097c3 	.word	0x080097c3
 800979c:	080097b5 	.word	0x080097b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f9de 	bl	8009b64 <USBD_GetDescriptor>
          break;
 80097a8:	e024      	b.n	80097f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fb55 	bl	8009e5c <USBD_SetAddress>
          break;
 80097b2:	e01f      	b.n	80097f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fb94 	bl	8009ee4 <USBD_SetConfig>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]
          break;
 80097c0:	e018      	b.n	80097f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fc33 	bl	800a030 <USBD_GetConfig>
          break;
 80097ca:	e013      	b.n	80097f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fc64 	bl	800a09c <USBD_GetStatus>
          break;
 80097d4:	e00e      	b.n	80097f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fc93 	bl	800a104 <USBD_SetFeature>
          break;
 80097de:	e009      	b.n	80097f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fca2 	bl	800a12c <USBD_ClrFeature>
          break;
 80097e8:	e004      	b.n	80097f4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fcf9 	bl	800a1e4 <USBD_CtlError>
          break;
 80097f2:	bf00      	nop
      }
      break;
 80097f4:	e004      	b.n	8009800 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fcf3 	bl	800a1e4 <USBD_CtlError>
      break;
 80097fe:	bf00      	nop
  }

  return ret;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop

0800980c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009822:	2b40      	cmp	r3, #64	; 0x40
 8009824:	d005      	beq.n	8009832 <USBD_StdItfReq+0x26>
 8009826:	2b40      	cmp	r3, #64	; 0x40
 8009828:	d82f      	bhi.n	800988a <USBD_StdItfReq+0x7e>
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <USBD_StdItfReq+0x26>
 800982e:	2b20      	cmp	r3, #32
 8009830:	d12b      	bne.n	800988a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009838:	b2db      	uxtb	r3, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	2b02      	cmp	r3, #2
 800983e:	d81d      	bhi.n	800987c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	889b      	ldrh	r3, [r3, #4]
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b0f      	cmp	r3, #15
 8009848:	d813      	bhi.n	8009872 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	4798      	blx	r3
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	88db      	ldrh	r3, [r3, #6]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d110      	bne.n	8009886 <USBD_StdItfReq+0x7a>
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10d      	bne.n	8009886 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fd84 	bl	800a378 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009870:	e009      	b.n	8009886 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fcb5 	bl	800a1e4 <USBD_CtlError>
          break;
 800987a:	e004      	b.n	8009886 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fcb0 	bl	800a1e4 <USBD_CtlError>
          break;
 8009884:	e000      	b.n	8009888 <USBD_StdItfReq+0x7c>
          break;
 8009886:	bf00      	nop
      }
      break;
 8009888:	e004      	b.n	8009894 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fca9 	bl	800a1e4 <USBD_CtlError>
      break;
 8009892:	bf00      	nop
  }

  return ret;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	889b      	ldrh	r3, [r3, #4]
 80098b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ba:	2b40      	cmp	r3, #64	; 0x40
 80098bc:	d007      	beq.n	80098ce <USBD_StdEPReq+0x30>
 80098be:	2b40      	cmp	r3, #64	; 0x40
 80098c0:	f200 8145 	bhi.w	8009b4e <USBD_StdEPReq+0x2b0>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00c      	beq.n	80098e2 <USBD_StdEPReq+0x44>
 80098c8:	2b20      	cmp	r3, #32
 80098ca:	f040 8140 	bne.w	8009b4e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]
      break;
 80098e0:	e13a      	b.n	8009b58 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	785b      	ldrb	r3, [r3, #1]
 80098e6:	2b03      	cmp	r3, #3
 80098e8:	d007      	beq.n	80098fa <USBD_StdEPReq+0x5c>
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	f300 8129 	bgt.w	8009b42 <USBD_StdEPReq+0x2a4>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d07f      	beq.n	80099f4 <USBD_StdEPReq+0x156>
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d03c      	beq.n	8009972 <USBD_StdEPReq+0xd4>
 80098f8:	e123      	b.n	8009b42 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b02      	cmp	r3, #2
 8009904:	d002      	beq.n	800990c <USBD_StdEPReq+0x6e>
 8009906:	2b03      	cmp	r3, #3
 8009908:	d016      	beq.n	8009938 <USBD_StdEPReq+0x9a>
 800990a:	e02c      	b.n	8009966 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800990c:	7bbb      	ldrb	r3, [r7, #14]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00d      	beq.n	800992e <USBD_StdEPReq+0x90>
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	2b80      	cmp	r3, #128	; 0x80
 8009916:	d00a      	beq.n	800992e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009918:	7bbb      	ldrb	r3, [r7, #14]
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fec1 	bl	800a6a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009922:	2180      	movs	r1, #128	; 0x80
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 febd 	bl	800a6a4 <USBD_LL_StallEP>
 800992a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800992c:	e020      	b.n	8009970 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fc57 	bl	800a1e4 <USBD_CtlError>
              break;
 8009936:	e01b      	b.n	8009970 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	885b      	ldrh	r3, [r3, #2]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10e      	bne.n	800995e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00b      	beq.n	800995e <USBD_StdEPReq+0xc0>
 8009946:	7bbb      	ldrb	r3, [r7, #14]
 8009948:	2b80      	cmp	r3, #128	; 0x80
 800994a:	d008      	beq.n	800995e <USBD_StdEPReq+0xc0>
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	88db      	ldrh	r3, [r3, #6]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d104      	bne.n	800995e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fea3 	bl	800a6a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fd0a 	bl	800a378 <USBD_CtlSendStatus>

              break;
 8009964:	e004      	b.n	8009970 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fc3b 	bl	800a1e4 <USBD_CtlError>
              break;
 800996e:	bf00      	nop
          }
          break;
 8009970:	e0ec      	b.n	8009b4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b02      	cmp	r3, #2
 800997c:	d002      	beq.n	8009984 <USBD_StdEPReq+0xe6>
 800997e:	2b03      	cmp	r3, #3
 8009980:	d016      	beq.n	80099b0 <USBD_StdEPReq+0x112>
 8009982:	e030      	b.n	80099e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00d      	beq.n	80099a6 <USBD_StdEPReq+0x108>
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b80      	cmp	r3, #128	; 0x80
 800998e:	d00a      	beq.n	80099a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fe85 	bl	800a6a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800999a:	2180      	movs	r1, #128	; 0x80
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fe81 	bl	800a6a4 <USBD_LL_StallEP>
 80099a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099a4:	e025      	b.n	80099f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fc1b 	bl	800a1e4 <USBD_CtlError>
              break;
 80099ae:	e020      	b.n	80099f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	885b      	ldrh	r3, [r3, #2]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d11b      	bne.n	80099f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
 80099ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d004      	beq.n	80099cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fe8b 	bl	800a6e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fcd3 	bl	800a378 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	4798      	blx	r3
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80099e4:	e004      	b.n	80099f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fbfb 	bl	800a1e4 <USBD_CtlError>
              break;
 80099ee:	e000      	b.n	80099f2 <USBD_StdEPReq+0x154>
              break;
 80099f0:	bf00      	nop
          }
          break;
 80099f2:	e0ab      	b.n	8009b4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d002      	beq.n	8009a06 <USBD_StdEPReq+0x168>
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d032      	beq.n	8009a6a <USBD_StdEPReq+0x1cc>
 8009a04:	e097      	b.n	8009b36 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d007      	beq.n	8009a1c <USBD_StdEPReq+0x17e>
 8009a0c:	7bbb      	ldrb	r3, [r7, #14]
 8009a0e:	2b80      	cmp	r3, #128	; 0x80
 8009a10:	d004      	beq.n	8009a1c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fbe5 	bl	800a1e4 <USBD_CtlError>
                break;
 8009a1a:	e091      	b.n	8009b40 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	da0b      	bge.n	8009a3c <USBD_StdEPReq+0x19e>
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	3310      	adds	r3, #16
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4413      	add	r3, r2
 8009a38:	3304      	adds	r3, #4
 8009a3a:	e00b      	b.n	8009a54 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	3304      	adds	r3, #4
 8009a54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fc2e 	bl	800a2c4 <USBD_CtlSendData>
              break;
 8009a68:	e06a      	b.n	8009b40 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	da11      	bge.n	8009a96 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	f003 020f 	and.w	r2, r3, #15
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	440b      	add	r3, r1
 8009a84:	3324      	adds	r3, #36	; 0x24
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d117      	bne.n	8009abc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fba8 	bl	800a1e4 <USBD_CtlError>
                  break;
 8009a94:	e054      	b.n	8009b40 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	f003 020f 	and.w	r2, r3, #15
 8009a9c:	6879      	ldr	r1, [r7, #4]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	440b      	add	r3, r1
 8009aa8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d104      	bne.n	8009abc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fb95 	bl	800a1e4 <USBD_CtlError>
                  break;
 8009aba:	e041      	b.n	8009b40 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	da0b      	bge.n	8009adc <USBD_StdEPReq+0x23e>
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	3310      	adds	r3, #16
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3304      	adds	r3, #4
 8009ada:	e00b      	b.n	8009af4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	4413      	add	r3, r2
 8009af2:	3304      	adds	r3, #4
 8009af4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <USBD_StdEPReq+0x264>
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	2b80      	cmp	r3, #128	; 0x80
 8009b00:	d103      	bne.n	8009b0a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	e00e      	b.n	8009b28 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fe06 	bl	800a720 <USBD_LL_IsStallEP>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	e002      	b.n	8009b28 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fbc8 	bl	800a2c4 <USBD_CtlSendData>
              break;
 8009b34:	e004      	b.n	8009b40 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fb53 	bl	800a1e4 <USBD_CtlError>
              break;
 8009b3e:	bf00      	nop
          }
          break;
 8009b40:	e004      	b.n	8009b4c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fb4d 	bl	800a1e4 <USBD_CtlError>
          break;
 8009b4a:	bf00      	nop
      }
      break;
 8009b4c:	e004      	b.n	8009b58 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fb47 	bl	800a1e4 <USBD_CtlError>
      break;
 8009b56:	bf00      	nop
  }

  return ret;
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	885b      	ldrh	r3, [r3, #2]
 8009b7e:	0a1b      	lsrs	r3, r3, #8
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	3b01      	subs	r3, #1
 8009b84:	2b06      	cmp	r3, #6
 8009b86:	f200 813b 	bhi.w	8009e00 <USBD_GetDescriptor+0x29c>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <USBD_GetDescriptor+0x2c>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009bad 	.word	0x08009bad
 8009b94:	08009bc5 	.word	0x08009bc5
 8009b98:	08009c05 	.word	0x08009c05
 8009b9c:	08009e01 	.word	0x08009e01
 8009ba0:	08009e01 	.word	0x08009e01
 8009ba4:	08009da1 	.word	0x08009da1
 8009ba8:	08009dcd 	.word	0x08009dcd
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	7c12      	ldrb	r2, [r2, #16]
 8009bb8:	f107 0108 	add.w	r1, r7, #8
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4798      	blx	r3
 8009bc0:	60f8      	str	r0, [r7, #12]
      break;
 8009bc2:	e125      	b.n	8009e10 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	7c1b      	ldrb	r3, [r3, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10d      	bne.n	8009be8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd4:	f107 0208 	add.w	r2, r7, #8
 8009bd8:	4610      	mov	r0, r2
 8009bda:	4798      	blx	r3
 8009bdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	2202      	movs	r2, #2
 8009be4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009be6:	e113      	b.n	8009e10 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	f107 0208 	add.w	r2, r7, #8
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4798      	blx	r3
 8009bf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	2202      	movs	r2, #2
 8009c00:	701a      	strb	r2, [r3, #0]
      break;
 8009c02:	e105      	b.n	8009e10 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	885b      	ldrh	r3, [r3, #2]
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	f200 80ac 	bhi.w	8009d68 <USBD_GetDescriptor+0x204>
 8009c10:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <USBD_GetDescriptor+0xb4>)
 8009c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c16:	bf00      	nop
 8009c18:	08009c31 	.word	0x08009c31
 8009c1c:	08009c65 	.word	0x08009c65
 8009c20:	08009c99 	.word	0x08009c99
 8009c24:	08009ccd 	.word	0x08009ccd
 8009c28:	08009d01 	.word	0x08009d01
 8009c2c:	08009d35 	.word	0x08009d35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00b      	beq.n	8009c54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	7c12      	ldrb	r2, [r2, #16]
 8009c48:	f107 0108 	add.w	r1, r7, #8
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4798      	blx	r3
 8009c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c52:	e0a4      	b.n	8009d9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fac4 	bl	800a1e4 <USBD_CtlError>
            err++;
 8009c5c:	7afb      	ldrb	r3, [r7, #11]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	72fb      	strb	r3, [r7, #11]
          break;
 8009c62:	e09c      	b.n	8009d9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00b      	beq.n	8009c88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	7c12      	ldrb	r2, [r2, #16]
 8009c7c:	f107 0108 	add.w	r1, r7, #8
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
 8009c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c86:	e08a      	b.n	8009d9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 faaa 	bl	800a1e4 <USBD_CtlError>
            err++;
 8009c90:	7afb      	ldrb	r3, [r7, #11]
 8009c92:	3301      	adds	r3, #1
 8009c94:	72fb      	strb	r3, [r7, #11]
          break;
 8009c96:	e082      	b.n	8009d9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	7c12      	ldrb	r2, [r2, #16]
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cba:	e070      	b.n	8009d9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa90 	bl	800a1e4 <USBD_CtlError>
            err++;
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cca:	e068      	b.n	8009d9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cee:	e056      	b.n	8009d9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa76 	bl	800a1e4 <USBD_CtlError>
            err++;
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfe:	e04e      	b.n	8009d9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7c12      	ldrb	r2, [r2, #16]
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d22:	e03c      	b.n	8009d9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa5c 	bl	800a1e4 <USBD_CtlError>
            err++;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	72fb      	strb	r3, [r7, #11]
          break;
 8009d32:	e034      	b.n	8009d9e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	7c12      	ldrb	r2, [r2, #16]
 8009d4c:	f107 0108 	add.w	r1, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d56:	e022      	b.n	8009d9e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa42 	bl	800a1e4 <USBD_CtlError>
            err++;
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	3301      	adds	r3, #1
 8009d64:	72fb      	strb	r3, [r7, #11]
          break;
 8009d66:	e01a      	b.n	8009d9e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00c      	beq.n	8009d8e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	8852      	ldrh	r2, [r2, #2]
 8009d80:	b2d1      	uxtb	r1, r2
 8009d82:	f107 0208 	add.w	r2, r7, #8
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	4798      	blx	r3
 8009d8a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8009d8c:	e006      	b.n	8009d9c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fa27 	bl	800a1e4 <USBD_CtlError>
            err++;
 8009d96:	7afb      	ldrb	r3, [r7, #11]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	72fb      	strb	r3, [r7, #11]
          break;
 8009d9c:	bf00      	nop
      }
      break;
 8009d9e:	e037      	b.n	8009e10 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	7c1b      	ldrb	r3, [r3, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d109      	bne.n	8009dbc <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db0:	f107 0208 	add.w	r2, r7, #8
 8009db4:	4610      	mov	r0, r2
 8009db6:	4798      	blx	r3
 8009db8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dba:	e029      	b.n	8009e10 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fa10 	bl	800a1e4 <USBD_CtlError>
        err++;
 8009dc4:	7afb      	ldrb	r3, [r7, #11]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	72fb      	strb	r3, [r7, #11]
      break;
 8009dca:	e021      	b.n	8009e10 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	7c1b      	ldrb	r3, [r3, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10d      	bne.n	8009df0 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ddc:	f107 0208 	add.w	r2, r7, #8
 8009de0:	4610      	mov	r0, r2
 8009de2:	4798      	blx	r3
 8009de4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3301      	adds	r3, #1
 8009dea:	2207      	movs	r2, #7
 8009dec:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dee:	e00f      	b.n	8009e10 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f9f6 	bl	800a1e4 <USBD_CtlError>
        err++;
 8009df8:	7afb      	ldrb	r3, [r7, #11]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	72fb      	strb	r3, [r7, #11]
      break;
 8009dfe:	e007      	b.n	8009e10 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f9ee 	bl	800a1e4 <USBD_CtlError>
      err++;
 8009e08:	7afb      	ldrb	r3, [r7, #11]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	72fb      	strb	r3, [r7, #11]
      break;
 8009e0e:	bf00      	nop
  }

  if (err != 0U)
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d11e      	bne.n	8009e54 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	88db      	ldrh	r3, [r3, #6]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d016      	beq.n	8009e4c <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8009e1e:	893b      	ldrh	r3, [r7, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00e      	beq.n	8009e42 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	88da      	ldrh	r2, [r3, #6]
 8009e28:	893b      	ldrh	r3, [r7, #8]
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	bf28      	it	cs
 8009e2e:	4613      	movcs	r3, r2
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e34:	893b      	ldrh	r3, [r7, #8]
 8009e36:	461a      	mov	r2, r3
 8009e38:	68f9      	ldr	r1, [r7, #12]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fa42 	bl	800a2c4 <USBD_CtlSendData>
 8009e40:	e009      	b.n	8009e56 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f9cd 	bl	800a1e4 <USBD_CtlError>
 8009e4a:	e004      	b.n	8009e56 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fa93 	bl	800a378 <USBD_CtlSendStatus>
 8009e52:	e000      	b.n	8009e56 <USBD_GetDescriptor+0x2f2>
    return;
 8009e54:	bf00      	nop
  }
}
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	889b      	ldrh	r3, [r3, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d131      	bne.n	8009ed2 <USBD_SetAddress+0x76>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	88db      	ldrh	r3, [r3, #6]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d12d      	bne.n	8009ed2 <USBD_SetAddress+0x76>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	885b      	ldrh	r3, [r3, #2]
 8009e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8009e7c:	d829      	bhi.n	8009ed2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	885b      	ldrh	r3, [r3, #2]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d104      	bne.n	8009ea0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f9a3 	bl	800a1e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9e:	e01d      	b.n	8009edc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7bfa      	ldrb	r2, [r7, #15]
 8009ea4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fc63 	bl	800a778 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa60 	bl	800a378 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d004      	beq.n	8009ec8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec6:	e009      	b.n	8009edc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed0:	e004      	b.n	8009edc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f985 	bl	800a1e4 <USBD_CtlError>
  }
}
 8009eda:	bf00      	nop
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	4b4c      	ldr	r3, [pc, #304]	; (800a02c <USBD_SetConfig+0x148>)
 8009efa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009efc:	4b4b      	ldr	r3, [pc, #300]	; (800a02c <USBD_SetConfig+0x148>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d905      	bls.n	8009f10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f96c 	bl	800a1e4 <USBD_CtlError>
    return USBD_FAIL;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e088      	b.n	800a022 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d002      	beq.n	8009f22 <USBD_SetConfig+0x3e>
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d025      	beq.n	8009f6c <USBD_SetConfig+0x88>
 8009f20:	e071      	b.n	800a006 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f22:	4b42      	ldr	r3, [pc, #264]	; (800a02c <USBD_SetConfig+0x148>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d01c      	beq.n	8009f64 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009f2a:	4b40      	ldr	r3, [pc, #256]	; (800a02c <USBD_SetConfig+0x148>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f34:	4b3d      	ldr	r3, [pc, #244]	; (800a02c <USBD_SetConfig+0x148>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff f9b2 	bl	80092a4 <USBD_SetClassConfig>
 8009f40:	4603      	mov	r3, r0
 8009f42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d004      	beq.n	8009f54 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f949 	bl	800a1e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f52:	e065      	b.n	800a020 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa0f 	bl	800a378 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2203      	movs	r2, #3
 8009f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f62:	e05d      	b.n	800a020 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fa07 	bl	800a378 <USBD_CtlSendStatus>
      break;
 8009f6a:	e059      	b.n	800a020 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f6c:	4b2f      	ldr	r3, [pc, #188]	; (800a02c <USBD_SetConfig+0x148>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d112      	bne.n	8009f9a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f7c:	4b2b      	ldr	r3, [pc, #172]	; (800a02c <USBD_SetConfig+0x148>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f86:	4b29      	ldr	r3, [pc, #164]	; (800a02c <USBD_SetConfig+0x148>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff f9a5 	bl	80092dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f9f0 	bl	800a378 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f98:	e042      	b.n	800a020 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009f9a:	4b24      	ldr	r3, [pc, #144]	; (800a02c <USBD_SetConfig+0x148>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d02a      	beq.n	8009ffe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff f993 	bl	80092dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fb6:	4b1d      	ldr	r3, [pc, #116]	; (800a02c <USBD_SetConfig+0x148>)
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fc0:	4b1a      	ldr	r3, [pc, #104]	; (800a02c <USBD_SetConfig+0x148>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff f96c 	bl	80092a4 <USBD_SetClassConfig>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00f      	beq.n	8009ff6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f903 	bl	800a1e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff f978 	bl	80092dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2202      	movs	r2, #2
 8009ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ff4:	e014      	b.n	800a020 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f9be 	bl	800a378 <USBD_CtlSendStatus>
      break;
 8009ffc:	e010      	b.n	800a020 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f9ba 	bl	800a378 <USBD_CtlSendStatus>
      break;
 800a004:	e00c      	b.n	800a020 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f8eb 	bl	800a1e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a00e:	4b07      	ldr	r3, [pc, #28]	; (800a02c <USBD_SetConfig+0x148>)
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7ff f961 	bl	80092dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a01a:	2303      	movs	r3, #3
 800a01c:	73fb      	strb	r3, [r7, #15]
      break;
 800a01e:	bf00      	nop
  }

  return ret;
 800a020:	7bfb      	ldrb	r3, [r7, #15]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	2000115c 	.word	0x2000115c

0800a030 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	88db      	ldrh	r3, [r3, #6]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d004      	beq.n	800a04c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f8cd 	bl	800a1e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a04a:	e023      	b.n	800a094 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b02      	cmp	r3, #2
 800a056:	dc02      	bgt.n	800a05e <USBD_GetConfig+0x2e>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dc03      	bgt.n	800a064 <USBD_GetConfig+0x34>
 800a05c:	e015      	b.n	800a08a <USBD_GetConfig+0x5a>
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d00b      	beq.n	800a07a <USBD_GetConfig+0x4a>
 800a062:	e012      	b.n	800a08a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3308      	adds	r3, #8
 800a06e:	2201      	movs	r2, #1
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f926 	bl	800a2c4 <USBD_CtlSendData>
        break;
 800a078:	e00c      	b.n	800a094 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	3304      	adds	r3, #4
 800a07e:	2201      	movs	r2, #1
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f91e 	bl	800a2c4 <USBD_CtlSendData>
        break;
 800a088:	e004      	b.n	800a094 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f8a9 	bl	800a1e4 <USBD_CtlError>
        break;
 800a092:	bf00      	nop
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d81e      	bhi.n	800a0f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	88db      	ldrh	r3, [r3, #6]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d004      	beq.n	800a0c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f890 	bl	800a1e4 <USBD_CtlError>
        break;
 800a0c4:	e01a      	b.n	800a0fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f043 0202 	orr.w	r2, r3, #2
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	330c      	adds	r3, #12
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f8ea 	bl	800a2c4 <USBD_CtlSendData>
      break;
 800a0f0:	e004      	b.n	800a0fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f875 	bl	800a1e4 <USBD_CtlError>
      break;
 800a0fa:	bf00      	nop
  }
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	885b      	ldrh	r3, [r3, #2]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d106      	bne.n	800a124 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f92a 	bl	800a378 <USBD_CtlSendStatus>
  }
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	2b02      	cmp	r3, #2
 800a142:	d80b      	bhi.n	800a15c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	885b      	ldrh	r3, [r3, #2]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d10c      	bne.n	800a166 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f90f 	bl	800a378 <USBD_CtlSendStatus>
      }
      break;
 800a15a:	e004      	b.n	800a166 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f840 	bl	800a1e4 <USBD_CtlError>
      break;
 800a164:	e000      	b.n	800a168 <USBD_ClrFeature+0x3c>
      break;
 800a166:	bf00      	nop
  }
}
 800a168:	bf00      	nop
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	781a      	ldrb	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	781a      	ldrb	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3301      	adds	r3, #1
 800a198:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f7ff faaa 	bl	80096f4 <SWAPBYTE>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff fa9d 	bl	80096f4 <SWAPBYTE>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	461a      	mov	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fa90 	bl	80096f4 <SWAPBYTE>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	80da      	strh	r2, [r3, #6]
}
 800a1dc:	bf00      	nop
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1ee:	2180      	movs	r1, #128	; 0x80
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fa57 	bl	800a6a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fa53 	bl	800a6a4 <USBD_LL_StallEP>
}
 800a1fe:	bf00      	nop
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b086      	sub	sp, #24
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a212:	2300      	movs	r3, #0
 800a214:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d036      	beq.n	800a28a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a220:	6938      	ldr	r0, [r7, #16]
 800a222:	f000 f836 	bl	800a292 <USBD_GetLen>
 800a226:	4603      	mov	r3, r0
 800a228:	3301      	adds	r3, #1
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	005b      	lsls	r3, r3, #1
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	4413      	add	r3, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	7812      	ldrb	r2, [r2, #0]
 800a23e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a240:	7dfb      	ldrb	r3, [r7, #23]
 800a242:	3301      	adds	r3, #1
 800a244:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a246:	7dfb      	ldrb	r3, [r7, #23]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	4413      	add	r3, r2
 800a24c:	2203      	movs	r2, #3
 800a24e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
 800a252:	3301      	adds	r3, #1
 800a254:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a256:	e013      	b.n	800a280 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a258:	7dfb      	ldrb	r3, [r7, #23]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	4413      	add	r3, r2
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	7812      	ldrb	r2, [r2, #0]
 800a262:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	3301      	adds	r3, #1
 800a268:	613b      	str	r3, [r7, #16]
    idx++;
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	3301      	adds	r3, #1
 800a26e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a270:	7dfb      	ldrb	r3, [r7, #23]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	4413      	add	r3, r2
 800a276:	2200      	movs	r2, #0
 800a278:	701a      	strb	r2, [r3, #0]
    idx++;
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	3301      	adds	r3, #1
 800a27e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1e7      	bne.n	800a258 <USBD_GetString+0x52>
 800a288:	e000      	b.n	800a28c <USBD_GetString+0x86>
    return;
 800a28a:	bf00      	nop
  }
}
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a292:	b480      	push	{r7}
 800a294:	b085      	sub	sp, #20
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2a2:	e005      	b.n	800a2b0 <USBD_GetLen+0x1e>
  {
    len++;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1f5      	bne.n	800a2a4 <USBD_GetLen+0x12>
  }

  return len;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bc80      	pop	{r7}
 800a2c2:	4770      	bx	lr

0800a2c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 fa63 	bl	800a7b6 <USBD_LL_Transmit>

  return USBD_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	2100      	movs	r1, #0
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 fa52 	bl	800a7b6 <USBD_LL_Transmit>

  return USBD_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2203      	movs	r2, #3
 800a32c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	2100      	movs	r1, #0
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fa56 	bl	800a7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	2100      	movs	r1, #0
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fa45 	bl	800a7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2204      	movs	r2, #4
 800a384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a388:	2300      	movs	r3, #0
 800a38a:	2200      	movs	r2, #0
 800a38c:	2100      	movs	r1, #0
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fa11 	bl	800a7b6 <USBD_LL_Transmit>

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2205      	movs	r2, #5
 800a3aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fa1f 	bl	800a7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fe ff96 	bl	800930c <USBD_LL_SetupStage>
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a3fa:	78fa      	ldrb	r2, [r7, #3]
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	4613      	mov	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4413      	add	r3, r2
 800a404:	00db      	lsls	r3, r3, #3
 800a406:	440b      	add	r3, r1
 800a408:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	4619      	mov	r1, r3
 800a412:	f7fe ffd0 	bl	80093b6 <USBD_LL_DataOutStage>
}
 800a416:	bf00      	nop
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a430:	78fa      	ldrb	r2, [r7, #3]
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	440b      	add	r3, r1
 800a43e:	333c      	adds	r3, #60	; 0x3c
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	78fb      	ldrb	r3, [r7, #3]
 800a444:	4619      	mov	r1, r3
 800a446:	f7ff f819 	bl	800947c <USBD_LL_DataInStage>
}
 800a44a:	bf00      	nop
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a460:	4618      	mov	r0, r3
 800a462:	f7ff f925 	bl	80096b0 <USBD_LL_SOF>
}
 800a466:	bf00      	nop
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a476:	2301      	movs	r3, #1
 800a478:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d102      	bne.n	800a488 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800a482:	2301      	movs	r3, #1
 800a484:	73fb      	strb	r3, [r7, #15]
 800a486:	e001      	b.n	800a48c <HAL_PCD_ResetCallback+0x1e>
    speed = USBD_SPEED_HIGH;
  }
  #endif
  else
  {
    Error_Handler();
 800a488:	f7f6 fb1a 	bl	8000ac0 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a492:	7bfa      	ldrb	r2, [r7, #15]
 800a494:	4611      	mov	r1, r2
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff f8cf 	bl	800963a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7ff f880 	bl	80095a8 <USBD_LL_Reset>
}
 800a4a8:	bf00      	nop
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff f8ca 	bl	8009658 <USBD_LL_Suspend>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
  }
#endif
  /* USER CODE END 2 */
}
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff f8d1 	bl	8009682 <USBD_LL_Resume>
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
#endif
  }
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800a4f0:	4b36      	ldr	r3, [pc, #216]	; (800a5cc <USBD_LL_Init+0xe4>)
 800a4f2:	4a37      	ldr	r2, [pc, #220]	; (800a5d0 <USBD_LL_Init+0xe8>)
 800a4f4:	601a      	str	r2, [r3, #0]
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#endif

  if (pdev->id == DEVICE_FS)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d161      	bne.n	800a5c2 <USBD_LL_Init+0xda>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800a4fe:	4b33      	ldr	r3, [pc, #204]	; (800a5cc <USBD_LL_Init+0xe4>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    pdev->pData = hpcd_USB_OTG_PTR;
 800a508:	4b30      	ldr	r3, [pc, #192]	; (800a5cc <USBD_LL_Init+0xe4>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310

    /* @see HAL_PCD_Init() usb_otg.c generated by cube **/

#if (STM32F1_DEVICE)
    /** Device is F1 or similar or if HAL_PCDEx_PMAConfig() is used by HAL driver */
    uint16_t pma_track = 0x40; /** PMA offset*/
 800a512:	2340      	movs	r3, #64	; 0x40
 800a514:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a51c:	89fb      	ldrh	r3, [r7, #14]
 800a51e:	2200      	movs	r2, #0
 800a520:	2100      	movs	r1, #0
 800a522:	f7f9 fb2c 	bl	8003b7e <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 800a526:	89fb      	ldrh	r3, [r7, #14]
 800a528:	3340      	adds	r3, #64	; 0x40
 800a52a:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x80, PCD_SNG_BUF, pma_track);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a532:	89fb      	ldrh	r3, [r7, #14]
 800a534:	2200      	movs	r2, #0
 800a536:	2180      	movs	r1, #128	; 0x80
 800a538:	f7f9 fb21 	bl	8003b7e <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 800a53c:	89fb      	ldrh	r3, [r7, #14]
 800a53e:	3340      	adds	r3, #64	; 0x40
 800a540:	81fb      	strh	r3, [r7, #14]
#if (USBD_USE_HID_MOUSE == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_MOUSE_IN_EP, PCD_SNG_BUF, pma_track);
    pma_track += 8;
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, HID_KEYBOARD_IN_EP, PCD_SNG_BUF, pma_track);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a548:	4b22      	ldr	r3, [pc, #136]	; (800a5d4 <USBD_LL_Init+0xec>)
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	b299      	uxth	r1, r3
 800a54e:	89fb      	ldrh	r3, [r7, #14]
 800a550:	2200      	movs	r2, #0
 800a552:	f7f9 fb14 	bl	8003b7e <HAL_PCDEx_PMAConfig>
    pma_track += 8;
 800a556:	89fb      	ldrh	r3, [r7, #14]
 800a558:	3308      	adds	r3, #8
 800a55a:	81fb      	strh	r3, [r7, #14]
    pma_track += 128;
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, PRNT_OUT_EP, PCD_SNG_BUF, pma_track);
    pma_track += 128;
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a55c:	2300      	movs	r3, #0
 800a55e:	737b      	strb	r3, [r7, #13]
 800a560:	e02c      	b.n	800a5bc <USBD_LL_Init+0xd4>
    {
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_IN_EP[i], PCD_SNG_BUF, pma_track);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a568:	7b7b      	ldrb	r3, [r7, #13]
 800a56a:	4a1b      	ldr	r2, [pc, #108]	; (800a5d8 <USBD_LL_Init+0xf0>)
 800a56c:	5cd3      	ldrb	r3, [r2, r3]
 800a56e:	b299      	uxth	r1, r3
 800a570:	89fb      	ldrh	r3, [r7, #14]
 800a572:	2200      	movs	r2, #0
 800a574:	f7f9 fb03 	bl	8003b7e <HAL_PCDEx_PMAConfig>
      pma_track += 48;
 800a578:	89fb      	ldrh	r3, [r7, #14]
 800a57a:	3330      	adds	r3, #48	; 0x30
 800a57c:	81fb      	strh	r3, [r7, #14]

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_OUT_EP[i], PCD_SNG_BUF, pma_track);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a584:	7b7b      	ldrb	r3, [r7, #13]
 800a586:	4a15      	ldr	r2, [pc, #84]	; (800a5dc <USBD_LL_Init+0xf4>)
 800a588:	5cd3      	ldrb	r3, [r2, r3]
 800a58a:	b299      	uxth	r1, r3
 800a58c:	89fb      	ldrh	r3, [r7, #14]
 800a58e:	2200      	movs	r2, #0
 800a590:	f7f9 faf5 	bl	8003b7e <HAL_PCDEx_PMAConfig>
      pma_track += 48;
 800a594:	89fb      	ldrh	r3, [r7, #14]
 800a596:	3330      	adds	r3, #48	; 0x30
 800a598:	81fb      	strh	r3, [r7, #14]

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_CMD_EP[i], PCD_SNG_BUF, pma_track);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a5a0:	7b7b      	ldrb	r3, [r7, #13]
 800a5a2:	4a0f      	ldr	r2, [pc, #60]	; (800a5e0 <USBD_LL_Init+0xf8>)
 800a5a4:	5cd3      	ldrb	r3, [r2, r3]
 800a5a6:	b299      	uxth	r1, r3
 800a5a8:	89fb      	ldrh	r3, [r7, #14]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f7f9 fae7 	bl	8003b7e <HAL_PCDEx_PMAConfig>
      pma_track += 8;
 800a5b0:	89fb      	ldrh	r3, [r7, #14]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800a5b6:	7b7b      	ldrb	r3, [r7, #13]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	737b      	strb	r3, [r7, #13]
 800a5bc:	7b7b      	ldrb	r3, [r7, #13]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0cf      	beq.n	800a562 <USBD_LL_Init+0x7a>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	20001160 	.word	0x20001160
 800a5d0:	20000578 	.word	0x20000578
 800a5d4:	200001ee 	.word	0x200001ee
 800a5d8:	20000e0c 	.word	0x20000e0c
 800a5dc:	20000e10 	.word	0x20000e10
 800a5e0:	20000e14 	.word	0x20000e14

0800a5e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7f7 ff49 	bl	8002492 <HAL_PCD_Start>
 800a600:	4603      	mov	r3, r0
 800a602:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800a604:	7bfb      	ldrb	r3, [r7, #15]
 800a606:	4618      	mov	r0, r3
 800a608:	f000 f92a 	bl	800a860 <USBD_Get_USB_Status>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a610:	7bbb      	ldrb	r3, [r7, #14]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	4608      	mov	r0, r1
 800a624:	4611      	mov	r1, r2
 800a626:	461a      	mov	r2, r3
 800a628:	4603      	mov	r3, r0
 800a62a:	70fb      	strb	r3, [r7, #3]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70bb      	strb	r3, [r7, #2]
 800a630:	4613      	mov	r3, r2
 800a632:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a642:	78bb      	ldrb	r3, [r7, #2]
 800a644:	883a      	ldrh	r2, [r7, #0]
 800a646:	78f9      	ldrb	r1, [r7, #3]
 800a648:	f7f8 f8c1 	bl	80027ce <HAL_PCD_EP_Open>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 f904 	bl	800a860 <USBD_Get_USB_Status>
 800a658:	4603      	mov	r3, r0
 800a65a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b084      	sub	sp, #16
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	460b      	mov	r3, r1
 800a670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800a680:	78fa      	ldrb	r2, [r7, #3]
 800a682:	4611      	mov	r1, r2
 800a684:	4618      	mov	r0, r3
 800a686:	f7f8 f908 	bl	800289a <HAL_PCD_EP_Close>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f8e5 	bl	800a860 <USBD_Get_USB_Status>
 800a696:	4603      	mov	r3, r0
 800a698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800a6be:	78fa      	ldrb	r2, [r7, #3]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f8 f9c8 	bl	8002a58 <HAL_PCD_EP_SetStall>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 f8c6 	bl	800a860 <USBD_Get_USB_Status>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800a6fc:	78fa      	ldrb	r2, [r7, #3]
 800a6fe:	4611      	mov	r1, r2
 800a700:	4618      	mov	r0, r3
 800a702:	f7f8 fa09 	bl	8002b18 <HAL_PCD_EP_ClrStall>
 800a706:	4603      	mov	r3, r0
 800a708:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 f8a7 	bl	800a860 <USBD_Get_USB_Status>
 800a712:	4603      	mov	r3, r0
 800a714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a716:	7bbb      	ldrb	r3, [r7, #14]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800a732:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800a734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	da0c      	bge.n	800a756 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a742:	68f9      	ldr	r1, [r7, #12]
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	440b      	add	r3, r1
 800a750:	3302      	adds	r3, #2
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	e00b      	b.n	800a76e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a75c:	68f9      	ldr	r1, [r7, #12]
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	440b      	add	r3, r1
 800a768:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a76c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3714      	adds	r7, #20
 800a772:	46bd      	mov	sp, r7
 800a774:	bc80      	pop	{r7}
 800a776:	4770      	bx	lr

0800a778 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800a792:	78fa      	ldrb	r2, [r7, #3]
 800a794:	4611      	mov	r1, r2
 800a796:	4618      	mov	r0, r3
 800a798:	f7f7 fff4 	bl	8002784 <HAL_PCD_SetAddress>
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 f85c 	bl	800a860 <USBD_Get_USB_Status>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b086      	sub	sp, #24
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	603b      	str	r3, [r7, #0]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a7d4:	7af9      	ldrb	r1, [r7, #11]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	f7f8 f8fa 	bl	80029d2 <HAL_PCD_EP_Transmit>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 f83b 	bl	800a860 <USBD_Get_USB_Status>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	607a      	str	r2, [r7, #4]
 800a802:	603b      	str	r3, [r7, #0]
 800a804:	460b      	mov	r3, r1
 800a806:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800a816:	7af9      	ldrb	r1, [r7, #11]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	f7f8 f885 	bl	800292a <HAL_PCD_EP_Receive>
 800a820:	4603      	mov	r3, r0
 800a822:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f81a 	bl	800a860 <USBD_Get_USB_Status>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a830:	7dbb      	ldrb	r3, [r7, #22]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3718      	adds	r7, #24
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800a84c:	78fa      	ldrb	r2, [r7, #3]
 800a84e:	4611      	mov	r1, r2
 800a850:	4618      	mov	r0, r3
 800a852:	f7f8 f8a7 	bl	80029a4 <HAL_PCD_EP_GetRxCount>
 800a856:	4603      	mov	r3, r0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	2b03      	cmp	r3, #3
 800a872:	d817      	bhi.n	800a8a4 <USBD_Get_USB_Status+0x44>
 800a874:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <USBD_Get_USB_Status+0x1c>)
 800a876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87a:	bf00      	nop
 800a87c:	0800a88d 	.word	0x0800a88d
 800a880:	0800a893 	.word	0x0800a893
 800a884:	0800a899 	.word	0x0800a899
 800a888:	0800a89f 	.word	0x0800a89f
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73fb      	strb	r3, [r7, #15]
    break;
 800a890:	e00b      	b.n	800a8aa <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800a892:	2303      	movs	r3, #3
 800a894:	73fb      	strb	r3, [r7, #15]
    break;
 800a896:	e008      	b.n	800a8aa <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800a898:	2301      	movs	r3, #1
 800a89a:	73fb      	strb	r3, [r7, #15]
    break;
 800a89c:	e005      	b.n	800a8aa <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a2:	e002      	b.n	800a8aa <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a8:	bf00      	nop
  }
  return usb_status;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop

0800a8b8 <__errno>:
 800a8b8:	4b01      	ldr	r3, [pc, #4]	; (800a8c0 <__errno+0x8>)
 800a8ba:	6818      	ldr	r0, [r3, #0]
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	20000348 	.word	0x20000348

0800a8c4 <__libc_init_array>:
 800a8c4:	b570      	push	{r4, r5, r6, lr}
 800a8c6:	2600      	movs	r6, #0
 800a8c8:	4d0c      	ldr	r5, [pc, #48]	; (800a8fc <__libc_init_array+0x38>)
 800a8ca:	4c0d      	ldr	r4, [pc, #52]	; (800a900 <__libc_init_array+0x3c>)
 800a8cc:	1b64      	subs	r4, r4, r5
 800a8ce:	10a4      	asrs	r4, r4, #2
 800a8d0:	42a6      	cmp	r6, r4
 800a8d2:	d109      	bne.n	800a8e8 <__libc_init_array+0x24>
 800a8d4:	f000 fcd0 	bl	800b278 <_init>
 800a8d8:	2600      	movs	r6, #0
 800a8da:	4d0a      	ldr	r5, [pc, #40]	; (800a904 <__libc_init_array+0x40>)
 800a8dc:	4c0a      	ldr	r4, [pc, #40]	; (800a908 <__libc_init_array+0x44>)
 800a8de:	1b64      	subs	r4, r4, r5
 800a8e0:	10a4      	asrs	r4, r4, #2
 800a8e2:	42a6      	cmp	r6, r4
 800a8e4:	d105      	bne.n	800a8f2 <__libc_init_array+0x2e>
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ec:	4798      	blx	r3
 800a8ee:	3601      	adds	r6, #1
 800a8f0:	e7ee      	b.n	800a8d0 <__libc_init_array+0xc>
 800a8f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8f6:	4798      	blx	r3
 800a8f8:	3601      	adds	r6, #1
 800a8fa:	e7f2      	b.n	800a8e2 <__libc_init_array+0x1e>
 800a8fc:	0800b37c 	.word	0x0800b37c
 800a900:	0800b37c 	.word	0x0800b37c
 800a904:	0800b37c 	.word	0x0800b37c
 800a908:	0800b380 	.word	0x0800b380

0800a90c <memcpy>:
 800a90c:	440a      	add	r2, r1
 800a90e:	4291      	cmp	r1, r2
 800a910:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a914:	d100      	bne.n	800a918 <memcpy+0xc>
 800a916:	4770      	bx	lr
 800a918:	b510      	push	{r4, lr}
 800a91a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a91e:	4291      	cmp	r1, r2
 800a920:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a924:	d1f9      	bne.n	800a91a <memcpy+0xe>
 800a926:	bd10      	pop	{r4, pc}

0800a928 <memset>:
 800a928:	4603      	mov	r3, r0
 800a92a:	4402      	add	r2, r0
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d100      	bne.n	800a932 <memset+0xa>
 800a930:	4770      	bx	lr
 800a932:	f803 1b01 	strb.w	r1, [r3], #1
 800a936:	e7f9      	b.n	800a92c <memset+0x4>

0800a938 <sniprintf>:
 800a938:	b40c      	push	{r2, r3}
 800a93a:	b530      	push	{r4, r5, lr}
 800a93c:	4b17      	ldr	r3, [pc, #92]	; (800a99c <sniprintf+0x64>)
 800a93e:	1e0c      	subs	r4, r1, #0
 800a940:	681d      	ldr	r5, [r3, #0]
 800a942:	b09d      	sub	sp, #116	; 0x74
 800a944:	da08      	bge.n	800a958 <sniprintf+0x20>
 800a946:	238b      	movs	r3, #139	; 0x8b
 800a948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a94c:	602b      	str	r3, [r5, #0]
 800a94e:	b01d      	add	sp, #116	; 0x74
 800a950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a954:	b002      	add	sp, #8
 800a956:	4770      	bx	lr
 800a958:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a95c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a960:	bf0c      	ite	eq
 800a962:	4623      	moveq	r3, r4
 800a964:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	9307      	str	r3, [sp, #28]
 800a96c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a970:	9002      	str	r0, [sp, #8]
 800a972:	9006      	str	r0, [sp, #24]
 800a974:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a978:	4628      	mov	r0, r5
 800a97a:	ab21      	add	r3, sp, #132	; 0x84
 800a97c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a97e:	a902      	add	r1, sp, #8
 800a980:	9301      	str	r3, [sp, #4]
 800a982:	f000 f889 	bl	800aa98 <_svfiprintf_r>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	bfbc      	itt	lt
 800a98a:	238b      	movlt	r3, #139	; 0x8b
 800a98c:	602b      	strlt	r3, [r5, #0]
 800a98e:	2c00      	cmp	r4, #0
 800a990:	d0dd      	beq.n	800a94e <sniprintf+0x16>
 800a992:	2200      	movs	r2, #0
 800a994:	9b02      	ldr	r3, [sp, #8]
 800a996:	701a      	strb	r2, [r3, #0]
 800a998:	e7d9      	b.n	800a94e <sniprintf+0x16>
 800a99a:	bf00      	nop
 800a99c:	20000348 	.word	0x20000348

0800a9a0 <siprintf>:
 800a9a0:	b40e      	push	{r1, r2, r3}
 800a9a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9a6:	b500      	push	{lr}
 800a9a8:	b09c      	sub	sp, #112	; 0x70
 800a9aa:	ab1d      	add	r3, sp, #116	; 0x74
 800a9ac:	9002      	str	r0, [sp, #8]
 800a9ae:	9006      	str	r0, [sp, #24]
 800a9b0:	9107      	str	r1, [sp, #28]
 800a9b2:	9104      	str	r1, [sp, #16]
 800a9b4:	4808      	ldr	r0, [pc, #32]	; (800a9d8 <siprintf+0x38>)
 800a9b6:	4909      	ldr	r1, [pc, #36]	; (800a9dc <siprintf+0x3c>)
 800a9b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9bc:	9105      	str	r1, [sp, #20]
 800a9be:	6800      	ldr	r0, [r0, #0]
 800a9c0:	a902      	add	r1, sp, #8
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	f000 f868 	bl	800aa98 <_svfiprintf_r>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	9b02      	ldr	r3, [sp, #8]
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	b01c      	add	sp, #112	; 0x70
 800a9d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9d4:	b003      	add	sp, #12
 800a9d6:	4770      	bx	lr
 800a9d8:	20000348 	.word	0x20000348
 800a9dc:	ffff0208 	.word	0xffff0208

0800a9e0 <__ssputs_r>:
 800a9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e4:	688e      	ldr	r6, [r1, #8]
 800a9e6:	4682      	mov	sl, r0
 800a9e8:	429e      	cmp	r6, r3
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	4690      	mov	r8, r2
 800a9ee:	461f      	mov	r7, r3
 800a9f0:	d838      	bhi.n	800aa64 <__ssputs_r+0x84>
 800a9f2:	898a      	ldrh	r2, [r1, #12]
 800a9f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9f8:	d032      	beq.n	800aa60 <__ssputs_r+0x80>
 800a9fa:	6825      	ldr	r5, [r4, #0]
 800a9fc:	6909      	ldr	r1, [r1, #16]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	eba5 0901 	sub.w	r9, r5, r1
 800aa04:	6965      	ldr	r5, [r4, #20]
 800aa06:	444b      	add	r3, r9
 800aa08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa10:	106d      	asrs	r5, r5, #1
 800aa12:	429d      	cmp	r5, r3
 800aa14:	bf38      	it	cc
 800aa16:	461d      	movcc	r5, r3
 800aa18:	0553      	lsls	r3, r2, #21
 800aa1a:	d531      	bpl.n	800aa80 <__ssputs_r+0xa0>
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	f000 fb61 	bl	800b0e4 <_malloc_r>
 800aa22:	4606      	mov	r6, r0
 800aa24:	b950      	cbnz	r0, 800aa3c <__ssputs_r+0x5c>
 800aa26:	230c      	movs	r3, #12
 800aa28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa2c:	f8ca 3000 	str.w	r3, [sl]
 800aa30:	89a3      	ldrh	r3, [r4, #12]
 800aa32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa36:	81a3      	strh	r3, [r4, #12]
 800aa38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3c:	464a      	mov	r2, r9
 800aa3e:	6921      	ldr	r1, [r4, #16]
 800aa40:	f7ff ff64 	bl	800a90c <memcpy>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	6126      	str	r6, [r4, #16]
 800aa52:	444e      	add	r6, r9
 800aa54:	6026      	str	r6, [r4, #0]
 800aa56:	463e      	mov	r6, r7
 800aa58:	6165      	str	r5, [r4, #20]
 800aa5a:	eba5 0509 	sub.w	r5, r5, r9
 800aa5e:	60a5      	str	r5, [r4, #8]
 800aa60:	42be      	cmp	r6, r7
 800aa62:	d900      	bls.n	800aa66 <__ssputs_r+0x86>
 800aa64:	463e      	mov	r6, r7
 800aa66:	4632      	mov	r2, r6
 800aa68:	4641      	mov	r1, r8
 800aa6a:	6820      	ldr	r0, [r4, #0]
 800aa6c:	f000 fab8 	bl	800afe0 <memmove>
 800aa70:	68a3      	ldr	r3, [r4, #8]
 800aa72:	2000      	movs	r0, #0
 800aa74:	1b9b      	subs	r3, r3, r6
 800aa76:	60a3      	str	r3, [r4, #8]
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	4433      	add	r3, r6
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	e7db      	b.n	800aa38 <__ssputs_r+0x58>
 800aa80:	462a      	mov	r2, r5
 800aa82:	f000 fba3 	bl	800b1cc <_realloc_r>
 800aa86:	4606      	mov	r6, r0
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1e1      	bne.n	800aa50 <__ssputs_r+0x70>
 800aa8c:	4650      	mov	r0, sl
 800aa8e:	6921      	ldr	r1, [r4, #16]
 800aa90:	f000 fac0 	bl	800b014 <_free_r>
 800aa94:	e7c7      	b.n	800aa26 <__ssputs_r+0x46>
	...

0800aa98 <_svfiprintf_r>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	4698      	mov	r8, r3
 800aa9e:	898b      	ldrh	r3, [r1, #12]
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	061b      	lsls	r3, r3, #24
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	4614      	mov	r4, r2
 800aaa8:	b09d      	sub	sp, #116	; 0x74
 800aaaa:	d50e      	bpl.n	800aaca <_svfiprintf_r+0x32>
 800aaac:	690b      	ldr	r3, [r1, #16]
 800aaae:	b963      	cbnz	r3, 800aaca <_svfiprintf_r+0x32>
 800aab0:	2140      	movs	r1, #64	; 0x40
 800aab2:	f000 fb17 	bl	800b0e4 <_malloc_r>
 800aab6:	6028      	str	r0, [r5, #0]
 800aab8:	6128      	str	r0, [r5, #16]
 800aaba:	b920      	cbnz	r0, 800aac6 <_svfiprintf_r+0x2e>
 800aabc:	230c      	movs	r3, #12
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac4:	e0d1      	b.n	800ac6a <_svfiprintf_r+0x1d2>
 800aac6:	2340      	movs	r3, #64	; 0x40
 800aac8:	616b      	str	r3, [r5, #20]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9309      	str	r3, [sp, #36]	; 0x24
 800aace:	2320      	movs	r3, #32
 800aad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aad4:	2330      	movs	r3, #48	; 0x30
 800aad6:	f04f 0901 	mov.w	r9, #1
 800aada:	f8cd 800c 	str.w	r8, [sp, #12]
 800aade:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac84 <_svfiprintf_r+0x1ec>
 800aae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aae6:	4623      	mov	r3, r4
 800aae8:	469a      	mov	sl, r3
 800aaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaee:	b10a      	cbz	r2, 800aaf4 <_svfiprintf_r+0x5c>
 800aaf0:	2a25      	cmp	r2, #37	; 0x25
 800aaf2:	d1f9      	bne.n	800aae8 <_svfiprintf_r+0x50>
 800aaf4:	ebba 0b04 	subs.w	fp, sl, r4
 800aaf8:	d00b      	beq.n	800ab12 <_svfiprintf_r+0x7a>
 800aafa:	465b      	mov	r3, fp
 800aafc:	4622      	mov	r2, r4
 800aafe:	4629      	mov	r1, r5
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7ff ff6d 	bl	800a9e0 <__ssputs_r>
 800ab06:	3001      	adds	r0, #1
 800ab08:	f000 80aa 	beq.w	800ac60 <_svfiprintf_r+0x1c8>
 800ab0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab0e:	445a      	add	r2, fp
 800ab10:	9209      	str	r2, [sp, #36]	; 0x24
 800ab12:	f89a 3000 	ldrb.w	r3, [sl]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 80a2 	beq.w	800ac60 <_svfiprintf_r+0x1c8>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab26:	f10a 0a01 	add.w	sl, sl, #1
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	9307      	str	r3, [sp, #28]
 800ab2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab32:	931a      	str	r3, [sp, #104]	; 0x68
 800ab34:	4654      	mov	r4, sl
 800ab36:	2205      	movs	r2, #5
 800ab38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab3c:	4851      	ldr	r0, [pc, #324]	; (800ac84 <_svfiprintf_r+0x1ec>)
 800ab3e:	f000 fa41 	bl	800afc4 <memchr>
 800ab42:	9a04      	ldr	r2, [sp, #16]
 800ab44:	b9d8      	cbnz	r0, 800ab7e <_svfiprintf_r+0xe6>
 800ab46:	06d0      	lsls	r0, r2, #27
 800ab48:	bf44      	itt	mi
 800ab4a:	2320      	movmi	r3, #32
 800ab4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab50:	0711      	lsls	r1, r2, #28
 800ab52:	bf44      	itt	mi
 800ab54:	232b      	movmi	r3, #43	; 0x2b
 800ab56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab60:	d015      	beq.n	800ab8e <_svfiprintf_r+0xf6>
 800ab62:	4654      	mov	r4, sl
 800ab64:	2000      	movs	r0, #0
 800ab66:	f04f 0c0a 	mov.w	ip, #10
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab72:	3b30      	subs	r3, #48	; 0x30
 800ab74:	2b09      	cmp	r3, #9
 800ab76:	d94e      	bls.n	800ac16 <_svfiprintf_r+0x17e>
 800ab78:	b1b0      	cbz	r0, 800aba8 <_svfiprintf_r+0x110>
 800ab7a:	9207      	str	r2, [sp, #28]
 800ab7c:	e014      	b.n	800aba8 <_svfiprintf_r+0x110>
 800ab7e:	eba0 0308 	sub.w	r3, r0, r8
 800ab82:	fa09 f303 	lsl.w	r3, r9, r3
 800ab86:	4313      	orrs	r3, r2
 800ab88:	46a2      	mov	sl, r4
 800ab8a:	9304      	str	r3, [sp, #16]
 800ab8c:	e7d2      	b.n	800ab34 <_svfiprintf_r+0x9c>
 800ab8e:	9b03      	ldr	r3, [sp, #12]
 800ab90:	1d19      	adds	r1, r3, #4
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	9103      	str	r1, [sp, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	bfbb      	ittet	lt
 800ab9a:	425b      	neglt	r3, r3
 800ab9c:	f042 0202 	orrlt.w	r2, r2, #2
 800aba0:	9307      	strge	r3, [sp, #28]
 800aba2:	9307      	strlt	r3, [sp, #28]
 800aba4:	bfb8      	it	lt
 800aba6:	9204      	strlt	r2, [sp, #16]
 800aba8:	7823      	ldrb	r3, [r4, #0]
 800abaa:	2b2e      	cmp	r3, #46	; 0x2e
 800abac:	d10c      	bne.n	800abc8 <_svfiprintf_r+0x130>
 800abae:	7863      	ldrb	r3, [r4, #1]
 800abb0:	2b2a      	cmp	r3, #42	; 0x2a
 800abb2:	d135      	bne.n	800ac20 <_svfiprintf_r+0x188>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	3402      	adds	r4, #2
 800abb8:	1d1a      	adds	r2, r3, #4
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	9203      	str	r2, [sp, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bfb8      	it	lt
 800abc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800abc6:	9305      	str	r3, [sp, #20]
 800abc8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ac88 <_svfiprintf_r+0x1f0>
 800abcc:	2203      	movs	r2, #3
 800abce:	4650      	mov	r0, sl
 800abd0:	7821      	ldrb	r1, [r4, #0]
 800abd2:	f000 f9f7 	bl	800afc4 <memchr>
 800abd6:	b140      	cbz	r0, 800abea <_svfiprintf_r+0x152>
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	eba0 000a 	sub.w	r0, r0, sl
 800abde:	fa03 f000 	lsl.w	r0, r3, r0
 800abe2:	9b04      	ldr	r3, [sp, #16]
 800abe4:	3401      	adds	r4, #1
 800abe6:	4303      	orrs	r3, r0
 800abe8:	9304      	str	r3, [sp, #16]
 800abea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abee:	2206      	movs	r2, #6
 800abf0:	4826      	ldr	r0, [pc, #152]	; (800ac8c <_svfiprintf_r+0x1f4>)
 800abf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abf6:	f000 f9e5 	bl	800afc4 <memchr>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d038      	beq.n	800ac70 <_svfiprintf_r+0x1d8>
 800abfe:	4b24      	ldr	r3, [pc, #144]	; (800ac90 <_svfiprintf_r+0x1f8>)
 800ac00:	bb1b      	cbnz	r3, 800ac4a <_svfiprintf_r+0x1b2>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	3307      	adds	r3, #7
 800ac06:	f023 0307 	bic.w	r3, r3, #7
 800ac0a:	3308      	adds	r3, #8
 800ac0c:	9303      	str	r3, [sp, #12]
 800ac0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac10:	4433      	add	r3, r6
 800ac12:	9309      	str	r3, [sp, #36]	; 0x24
 800ac14:	e767      	b.n	800aae6 <_svfiprintf_r+0x4e>
 800ac16:	460c      	mov	r4, r1
 800ac18:	2001      	movs	r0, #1
 800ac1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac1e:	e7a5      	b.n	800ab6c <_svfiprintf_r+0xd4>
 800ac20:	2300      	movs	r3, #0
 800ac22:	f04f 0c0a 	mov.w	ip, #10
 800ac26:	4619      	mov	r1, r3
 800ac28:	3401      	adds	r4, #1
 800ac2a:	9305      	str	r3, [sp, #20]
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac32:	3a30      	subs	r2, #48	; 0x30
 800ac34:	2a09      	cmp	r2, #9
 800ac36:	d903      	bls.n	800ac40 <_svfiprintf_r+0x1a8>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0c5      	beq.n	800abc8 <_svfiprintf_r+0x130>
 800ac3c:	9105      	str	r1, [sp, #20]
 800ac3e:	e7c3      	b.n	800abc8 <_svfiprintf_r+0x130>
 800ac40:	4604      	mov	r4, r0
 800ac42:	2301      	movs	r3, #1
 800ac44:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac48:	e7f0      	b.n	800ac2c <_svfiprintf_r+0x194>
 800ac4a:	ab03      	add	r3, sp, #12
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4638      	mov	r0, r7
 800ac52:	4b10      	ldr	r3, [pc, #64]	; (800ac94 <_svfiprintf_r+0x1fc>)
 800ac54:	a904      	add	r1, sp, #16
 800ac56:	f3af 8000 	nop.w
 800ac5a:	1c42      	adds	r2, r0, #1
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	d1d6      	bne.n	800ac0e <_svfiprintf_r+0x176>
 800ac60:	89ab      	ldrh	r3, [r5, #12]
 800ac62:	065b      	lsls	r3, r3, #25
 800ac64:	f53f af2c 	bmi.w	800aac0 <_svfiprintf_r+0x28>
 800ac68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac6a:	b01d      	add	sp, #116	; 0x74
 800ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac70:	ab03      	add	r3, sp, #12
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	462a      	mov	r2, r5
 800ac76:	4638      	mov	r0, r7
 800ac78:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <_svfiprintf_r+0x1fc>)
 800ac7a:	a904      	add	r1, sp, #16
 800ac7c:	f000 f87c 	bl	800ad78 <_printf_i>
 800ac80:	e7eb      	b.n	800ac5a <_svfiprintf_r+0x1c2>
 800ac82:	bf00      	nop
 800ac84:	0800b348 	.word	0x0800b348
 800ac88:	0800b34e 	.word	0x0800b34e
 800ac8c:	0800b352 	.word	0x0800b352
 800ac90:	00000000 	.word	0x00000000
 800ac94:	0800a9e1 	.word	0x0800a9e1

0800ac98 <_printf_common>:
 800ac98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac9c:	4616      	mov	r6, r2
 800ac9e:	4699      	mov	r9, r3
 800aca0:	688a      	ldr	r2, [r1, #8]
 800aca2:	690b      	ldr	r3, [r1, #16]
 800aca4:	4607      	mov	r7, r0
 800aca6:	4293      	cmp	r3, r2
 800aca8:	bfb8      	it	lt
 800acaa:	4613      	movlt	r3, r2
 800acac:	6033      	str	r3, [r6, #0]
 800acae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acb2:	460c      	mov	r4, r1
 800acb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acb8:	b10a      	cbz	r2, 800acbe <_printf_common+0x26>
 800acba:	3301      	adds	r3, #1
 800acbc:	6033      	str	r3, [r6, #0]
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	0699      	lsls	r1, r3, #26
 800acc2:	bf42      	ittt	mi
 800acc4:	6833      	ldrmi	r3, [r6, #0]
 800acc6:	3302      	addmi	r3, #2
 800acc8:	6033      	strmi	r3, [r6, #0]
 800acca:	6825      	ldr	r5, [r4, #0]
 800accc:	f015 0506 	ands.w	r5, r5, #6
 800acd0:	d106      	bne.n	800ace0 <_printf_common+0x48>
 800acd2:	f104 0a19 	add.w	sl, r4, #25
 800acd6:	68e3      	ldr	r3, [r4, #12]
 800acd8:	6832      	ldr	r2, [r6, #0]
 800acda:	1a9b      	subs	r3, r3, r2
 800acdc:	42ab      	cmp	r3, r5
 800acde:	dc28      	bgt.n	800ad32 <_printf_common+0x9a>
 800ace0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ace4:	1e13      	subs	r3, r2, #0
 800ace6:	6822      	ldr	r2, [r4, #0]
 800ace8:	bf18      	it	ne
 800acea:	2301      	movne	r3, #1
 800acec:	0692      	lsls	r2, r2, #26
 800acee:	d42d      	bmi.n	800ad4c <_printf_common+0xb4>
 800acf0:	4649      	mov	r1, r9
 800acf2:	4638      	mov	r0, r7
 800acf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acf8:	47c0      	blx	r8
 800acfa:	3001      	adds	r0, #1
 800acfc:	d020      	beq.n	800ad40 <_printf_common+0xa8>
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	68e5      	ldr	r5, [r4, #12]
 800ad02:	f003 0306 	and.w	r3, r3, #6
 800ad06:	2b04      	cmp	r3, #4
 800ad08:	bf18      	it	ne
 800ad0a:	2500      	movne	r5, #0
 800ad0c:	6832      	ldr	r2, [r6, #0]
 800ad0e:	f04f 0600 	mov.w	r6, #0
 800ad12:	68a3      	ldr	r3, [r4, #8]
 800ad14:	bf08      	it	eq
 800ad16:	1aad      	subeq	r5, r5, r2
 800ad18:	6922      	ldr	r2, [r4, #16]
 800ad1a:	bf08      	it	eq
 800ad1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad20:	4293      	cmp	r3, r2
 800ad22:	bfc4      	itt	gt
 800ad24:	1a9b      	subgt	r3, r3, r2
 800ad26:	18ed      	addgt	r5, r5, r3
 800ad28:	341a      	adds	r4, #26
 800ad2a:	42b5      	cmp	r5, r6
 800ad2c:	d11a      	bne.n	800ad64 <_printf_common+0xcc>
 800ad2e:	2000      	movs	r0, #0
 800ad30:	e008      	b.n	800ad44 <_printf_common+0xac>
 800ad32:	2301      	movs	r3, #1
 800ad34:	4652      	mov	r2, sl
 800ad36:	4649      	mov	r1, r9
 800ad38:	4638      	mov	r0, r7
 800ad3a:	47c0      	blx	r8
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d103      	bne.n	800ad48 <_printf_common+0xb0>
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad48:	3501      	adds	r5, #1
 800ad4a:	e7c4      	b.n	800acd6 <_printf_common+0x3e>
 800ad4c:	2030      	movs	r0, #48	; 0x30
 800ad4e:	18e1      	adds	r1, r4, r3
 800ad50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad5a:	4422      	add	r2, r4
 800ad5c:	3302      	adds	r3, #2
 800ad5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad62:	e7c5      	b.n	800acf0 <_printf_common+0x58>
 800ad64:	2301      	movs	r3, #1
 800ad66:	4622      	mov	r2, r4
 800ad68:	4649      	mov	r1, r9
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	47c0      	blx	r8
 800ad6e:	3001      	adds	r0, #1
 800ad70:	d0e6      	beq.n	800ad40 <_printf_common+0xa8>
 800ad72:	3601      	adds	r6, #1
 800ad74:	e7d9      	b.n	800ad2a <_printf_common+0x92>
	...

0800ad78 <_printf_i>:
 800ad78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7c:	7e0f      	ldrb	r7, [r1, #24]
 800ad7e:	4691      	mov	r9, r2
 800ad80:	2f78      	cmp	r7, #120	; 0x78
 800ad82:	4680      	mov	r8, r0
 800ad84:	460c      	mov	r4, r1
 800ad86:	469a      	mov	sl, r3
 800ad88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad8e:	d807      	bhi.n	800ada0 <_printf_i+0x28>
 800ad90:	2f62      	cmp	r7, #98	; 0x62
 800ad92:	d80a      	bhi.n	800adaa <_printf_i+0x32>
 800ad94:	2f00      	cmp	r7, #0
 800ad96:	f000 80d9 	beq.w	800af4c <_printf_i+0x1d4>
 800ad9a:	2f58      	cmp	r7, #88	; 0x58
 800ad9c:	f000 80a4 	beq.w	800aee8 <_printf_i+0x170>
 800ada0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ada4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ada8:	e03a      	b.n	800ae20 <_printf_i+0xa8>
 800adaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800adae:	2b15      	cmp	r3, #21
 800adb0:	d8f6      	bhi.n	800ada0 <_printf_i+0x28>
 800adb2:	a101      	add	r1, pc, #4	; (adr r1, 800adb8 <_printf_i+0x40>)
 800adb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800adb8:	0800ae11 	.word	0x0800ae11
 800adbc:	0800ae25 	.word	0x0800ae25
 800adc0:	0800ada1 	.word	0x0800ada1
 800adc4:	0800ada1 	.word	0x0800ada1
 800adc8:	0800ada1 	.word	0x0800ada1
 800adcc:	0800ada1 	.word	0x0800ada1
 800add0:	0800ae25 	.word	0x0800ae25
 800add4:	0800ada1 	.word	0x0800ada1
 800add8:	0800ada1 	.word	0x0800ada1
 800addc:	0800ada1 	.word	0x0800ada1
 800ade0:	0800ada1 	.word	0x0800ada1
 800ade4:	0800af33 	.word	0x0800af33
 800ade8:	0800ae55 	.word	0x0800ae55
 800adec:	0800af15 	.word	0x0800af15
 800adf0:	0800ada1 	.word	0x0800ada1
 800adf4:	0800ada1 	.word	0x0800ada1
 800adf8:	0800af55 	.word	0x0800af55
 800adfc:	0800ada1 	.word	0x0800ada1
 800ae00:	0800ae55 	.word	0x0800ae55
 800ae04:	0800ada1 	.word	0x0800ada1
 800ae08:	0800ada1 	.word	0x0800ada1
 800ae0c:	0800af1d 	.word	0x0800af1d
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	1d1a      	adds	r2, r3, #4
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	602a      	str	r2, [r5, #0]
 800ae18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae20:	2301      	movs	r3, #1
 800ae22:	e0a4      	b.n	800af6e <_printf_i+0x1f6>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	6829      	ldr	r1, [r5, #0]
 800ae28:	0606      	lsls	r6, r0, #24
 800ae2a:	f101 0304 	add.w	r3, r1, #4
 800ae2e:	d50a      	bpl.n	800ae46 <_printf_i+0xce>
 800ae30:	680e      	ldr	r6, [r1, #0]
 800ae32:	602b      	str	r3, [r5, #0]
 800ae34:	2e00      	cmp	r6, #0
 800ae36:	da03      	bge.n	800ae40 <_printf_i+0xc8>
 800ae38:	232d      	movs	r3, #45	; 0x2d
 800ae3a:	4276      	negs	r6, r6
 800ae3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae40:	230a      	movs	r3, #10
 800ae42:	485e      	ldr	r0, [pc, #376]	; (800afbc <_printf_i+0x244>)
 800ae44:	e019      	b.n	800ae7a <_printf_i+0x102>
 800ae46:	680e      	ldr	r6, [r1, #0]
 800ae48:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae4c:	602b      	str	r3, [r5, #0]
 800ae4e:	bf18      	it	ne
 800ae50:	b236      	sxthne	r6, r6
 800ae52:	e7ef      	b.n	800ae34 <_printf_i+0xbc>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	6820      	ldr	r0, [r4, #0]
 800ae58:	1d19      	adds	r1, r3, #4
 800ae5a:	6029      	str	r1, [r5, #0]
 800ae5c:	0601      	lsls	r1, r0, #24
 800ae5e:	d501      	bpl.n	800ae64 <_printf_i+0xec>
 800ae60:	681e      	ldr	r6, [r3, #0]
 800ae62:	e002      	b.n	800ae6a <_printf_i+0xf2>
 800ae64:	0646      	lsls	r6, r0, #25
 800ae66:	d5fb      	bpl.n	800ae60 <_printf_i+0xe8>
 800ae68:	881e      	ldrh	r6, [r3, #0]
 800ae6a:	2f6f      	cmp	r7, #111	; 0x6f
 800ae6c:	bf0c      	ite	eq
 800ae6e:	2308      	moveq	r3, #8
 800ae70:	230a      	movne	r3, #10
 800ae72:	4852      	ldr	r0, [pc, #328]	; (800afbc <_printf_i+0x244>)
 800ae74:	2100      	movs	r1, #0
 800ae76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae7a:	6865      	ldr	r5, [r4, #4]
 800ae7c:	2d00      	cmp	r5, #0
 800ae7e:	bfa8      	it	ge
 800ae80:	6821      	ldrge	r1, [r4, #0]
 800ae82:	60a5      	str	r5, [r4, #8]
 800ae84:	bfa4      	itt	ge
 800ae86:	f021 0104 	bicge.w	r1, r1, #4
 800ae8a:	6021      	strge	r1, [r4, #0]
 800ae8c:	b90e      	cbnz	r6, 800ae92 <_printf_i+0x11a>
 800ae8e:	2d00      	cmp	r5, #0
 800ae90:	d04d      	beq.n	800af2e <_printf_i+0x1b6>
 800ae92:	4615      	mov	r5, r2
 800ae94:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae98:	fb03 6711 	mls	r7, r3, r1, r6
 800ae9c:	5dc7      	ldrb	r7, [r0, r7]
 800ae9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aea2:	4637      	mov	r7, r6
 800aea4:	42bb      	cmp	r3, r7
 800aea6:	460e      	mov	r6, r1
 800aea8:	d9f4      	bls.n	800ae94 <_printf_i+0x11c>
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d10b      	bne.n	800aec6 <_printf_i+0x14e>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	07de      	lsls	r6, r3, #31
 800aeb2:	d508      	bpl.n	800aec6 <_printf_i+0x14e>
 800aeb4:	6923      	ldr	r3, [r4, #16]
 800aeb6:	6861      	ldr	r1, [r4, #4]
 800aeb8:	4299      	cmp	r1, r3
 800aeba:	bfde      	ittt	le
 800aebc:	2330      	movle	r3, #48	; 0x30
 800aebe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aec2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aec6:	1b52      	subs	r2, r2, r5
 800aec8:	6122      	str	r2, [r4, #16]
 800aeca:	464b      	mov	r3, r9
 800aecc:	4621      	mov	r1, r4
 800aece:	4640      	mov	r0, r8
 800aed0:	f8cd a000 	str.w	sl, [sp]
 800aed4:	aa03      	add	r2, sp, #12
 800aed6:	f7ff fedf 	bl	800ac98 <_printf_common>
 800aeda:	3001      	adds	r0, #1
 800aedc:	d14c      	bne.n	800af78 <_printf_i+0x200>
 800aede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aee2:	b004      	add	sp, #16
 800aee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee8:	4834      	ldr	r0, [pc, #208]	; (800afbc <_printf_i+0x244>)
 800aeea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aeee:	6829      	ldr	r1, [r5, #0]
 800aef0:	6823      	ldr	r3, [r4, #0]
 800aef2:	f851 6b04 	ldr.w	r6, [r1], #4
 800aef6:	6029      	str	r1, [r5, #0]
 800aef8:	061d      	lsls	r5, r3, #24
 800aefa:	d514      	bpl.n	800af26 <_printf_i+0x1ae>
 800aefc:	07df      	lsls	r7, r3, #31
 800aefe:	bf44      	itt	mi
 800af00:	f043 0320 	orrmi.w	r3, r3, #32
 800af04:	6023      	strmi	r3, [r4, #0]
 800af06:	b91e      	cbnz	r6, 800af10 <_printf_i+0x198>
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	f023 0320 	bic.w	r3, r3, #32
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	2310      	movs	r3, #16
 800af12:	e7af      	b.n	800ae74 <_printf_i+0xfc>
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	f043 0320 	orr.w	r3, r3, #32
 800af1a:	6023      	str	r3, [r4, #0]
 800af1c:	2378      	movs	r3, #120	; 0x78
 800af1e:	4828      	ldr	r0, [pc, #160]	; (800afc0 <_printf_i+0x248>)
 800af20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af24:	e7e3      	b.n	800aeee <_printf_i+0x176>
 800af26:	0659      	lsls	r1, r3, #25
 800af28:	bf48      	it	mi
 800af2a:	b2b6      	uxthmi	r6, r6
 800af2c:	e7e6      	b.n	800aefc <_printf_i+0x184>
 800af2e:	4615      	mov	r5, r2
 800af30:	e7bb      	b.n	800aeaa <_printf_i+0x132>
 800af32:	682b      	ldr	r3, [r5, #0]
 800af34:	6826      	ldr	r6, [r4, #0]
 800af36:	1d18      	adds	r0, r3, #4
 800af38:	6961      	ldr	r1, [r4, #20]
 800af3a:	6028      	str	r0, [r5, #0]
 800af3c:	0635      	lsls	r5, r6, #24
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	d501      	bpl.n	800af46 <_printf_i+0x1ce>
 800af42:	6019      	str	r1, [r3, #0]
 800af44:	e002      	b.n	800af4c <_printf_i+0x1d4>
 800af46:	0670      	lsls	r0, r6, #25
 800af48:	d5fb      	bpl.n	800af42 <_printf_i+0x1ca>
 800af4a:	8019      	strh	r1, [r3, #0]
 800af4c:	2300      	movs	r3, #0
 800af4e:	4615      	mov	r5, r2
 800af50:	6123      	str	r3, [r4, #16]
 800af52:	e7ba      	b.n	800aeca <_printf_i+0x152>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	2100      	movs	r1, #0
 800af58:	1d1a      	adds	r2, r3, #4
 800af5a:	602a      	str	r2, [r5, #0]
 800af5c:	681d      	ldr	r5, [r3, #0]
 800af5e:	6862      	ldr	r2, [r4, #4]
 800af60:	4628      	mov	r0, r5
 800af62:	f000 f82f 	bl	800afc4 <memchr>
 800af66:	b108      	cbz	r0, 800af6c <_printf_i+0x1f4>
 800af68:	1b40      	subs	r0, r0, r5
 800af6a:	6060      	str	r0, [r4, #4]
 800af6c:	6863      	ldr	r3, [r4, #4]
 800af6e:	6123      	str	r3, [r4, #16]
 800af70:	2300      	movs	r3, #0
 800af72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af76:	e7a8      	b.n	800aeca <_printf_i+0x152>
 800af78:	462a      	mov	r2, r5
 800af7a:	4649      	mov	r1, r9
 800af7c:	4640      	mov	r0, r8
 800af7e:	6923      	ldr	r3, [r4, #16]
 800af80:	47d0      	blx	sl
 800af82:	3001      	adds	r0, #1
 800af84:	d0ab      	beq.n	800aede <_printf_i+0x166>
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	079b      	lsls	r3, r3, #30
 800af8a:	d413      	bmi.n	800afb4 <_printf_i+0x23c>
 800af8c:	68e0      	ldr	r0, [r4, #12]
 800af8e:	9b03      	ldr	r3, [sp, #12]
 800af90:	4298      	cmp	r0, r3
 800af92:	bfb8      	it	lt
 800af94:	4618      	movlt	r0, r3
 800af96:	e7a4      	b.n	800aee2 <_printf_i+0x16a>
 800af98:	2301      	movs	r3, #1
 800af9a:	4632      	mov	r2, r6
 800af9c:	4649      	mov	r1, r9
 800af9e:	4640      	mov	r0, r8
 800afa0:	47d0      	blx	sl
 800afa2:	3001      	adds	r0, #1
 800afa4:	d09b      	beq.n	800aede <_printf_i+0x166>
 800afa6:	3501      	adds	r5, #1
 800afa8:	68e3      	ldr	r3, [r4, #12]
 800afaa:	9903      	ldr	r1, [sp, #12]
 800afac:	1a5b      	subs	r3, r3, r1
 800afae:	42ab      	cmp	r3, r5
 800afb0:	dcf2      	bgt.n	800af98 <_printf_i+0x220>
 800afb2:	e7eb      	b.n	800af8c <_printf_i+0x214>
 800afb4:	2500      	movs	r5, #0
 800afb6:	f104 0619 	add.w	r6, r4, #25
 800afba:	e7f5      	b.n	800afa8 <_printf_i+0x230>
 800afbc:	0800b359 	.word	0x0800b359
 800afc0:	0800b36a 	.word	0x0800b36a

0800afc4 <memchr>:
 800afc4:	4603      	mov	r3, r0
 800afc6:	b510      	push	{r4, lr}
 800afc8:	b2c9      	uxtb	r1, r1
 800afca:	4402      	add	r2, r0
 800afcc:	4293      	cmp	r3, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	d101      	bne.n	800afd6 <memchr+0x12>
 800afd2:	2000      	movs	r0, #0
 800afd4:	e003      	b.n	800afde <memchr+0x1a>
 800afd6:	7804      	ldrb	r4, [r0, #0]
 800afd8:	3301      	adds	r3, #1
 800afda:	428c      	cmp	r4, r1
 800afdc:	d1f6      	bne.n	800afcc <memchr+0x8>
 800afde:	bd10      	pop	{r4, pc}

0800afe0 <memmove>:
 800afe0:	4288      	cmp	r0, r1
 800afe2:	b510      	push	{r4, lr}
 800afe4:	eb01 0402 	add.w	r4, r1, r2
 800afe8:	d902      	bls.n	800aff0 <memmove+0x10>
 800afea:	4284      	cmp	r4, r0
 800afec:	4623      	mov	r3, r4
 800afee:	d807      	bhi.n	800b000 <memmove+0x20>
 800aff0:	1e43      	subs	r3, r0, #1
 800aff2:	42a1      	cmp	r1, r4
 800aff4:	d008      	beq.n	800b008 <memmove+0x28>
 800aff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800affa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800affe:	e7f8      	b.n	800aff2 <memmove+0x12>
 800b000:	4601      	mov	r1, r0
 800b002:	4402      	add	r2, r0
 800b004:	428a      	cmp	r2, r1
 800b006:	d100      	bne.n	800b00a <memmove+0x2a>
 800b008:	bd10      	pop	{r4, pc}
 800b00a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b00e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b012:	e7f7      	b.n	800b004 <memmove+0x24>

0800b014 <_free_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4605      	mov	r5, r0
 800b018:	2900      	cmp	r1, #0
 800b01a:	d040      	beq.n	800b09e <_free_r+0x8a>
 800b01c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b020:	1f0c      	subs	r4, r1, #4
 800b022:	2b00      	cmp	r3, #0
 800b024:	bfb8      	it	lt
 800b026:	18e4      	addlt	r4, r4, r3
 800b028:	f000 f910 	bl	800b24c <__malloc_lock>
 800b02c:	4a1c      	ldr	r2, [pc, #112]	; (800b0a0 <_free_r+0x8c>)
 800b02e:	6813      	ldr	r3, [r2, #0]
 800b030:	b933      	cbnz	r3, 800b040 <_free_r+0x2c>
 800b032:	6063      	str	r3, [r4, #4]
 800b034:	6014      	str	r4, [r2, #0]
 800b036:	4628      	mov	r0, r5
 800b038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b03c:	f000 b90c 	b.w	800b258 <__malloc_unlock>
 800b040:	42a3      	cmp	r3, r4
 800b042:	d908      	bls.n	800b056 <_free_r+0x42>
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	1821      	adds	r1, r4, r0
 800b048:	428b      	cmp	r3, r1
 800b04a:	bf01      	itttt	eq
 800b04c:	6819      	ldreq	r1, [r3, #0]
 800b04e:	685b      	ldreq	r3, [r3, #4]
 800b050:	1809      	addeq	r1, r1, r0
 800b052:	6021      	streq	r1, [r4, #0]
 800b054:	e7ed      	b.n	800b032 <_free_r+0x1e>
 800b056:	461a      	mov	r2, r3
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	b10b      	cbz	r3, 800b060 <_free_r+0x4c>
 800b05c:	42a3      	cmp	r3, r4
 800b05e:	d9fa      	bls.n	800b056 <_free_r+0x42>
 800b060:	6811      	ldr	r1, [r2, #0]
 800b062:	1850      	adds	r0, r2, r1
 800b064:	42a0      	cmp	r0, r4
 800b066:	d10b      	bne.n	800b080 <_free_r+0x6c>
 800b068:	6820      	ldr	r0, [r4, #0]
 800b06a:	4401      	add	r1, r0
 800b06c:	1850      	adds	r0, r2, r1
 800b06e:	4283      	cmp	r3, r0
 800b070:	6011      	str	r1, [r2, #0]
 800b072:	d1e0      	bne.n	800b036 <_free_r+0x22>
 800b074:	6818      	ldr	r0, [r3, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	4401      	add	r1, r0
 800b07a:	6011      	str	r1, [r2, #0]
 800b07c:	6053      	str	r3, [r2, #4]
 800b07e:	e7da      	b.n	800b036 <_free_r+0x22>
 800b080:	d902      	bls.n	800b088 <_free_r+0x74>
 800b082:	230c      	movs	r3, #12
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	e7d6      	b.n	800b036 <_free_r+0x22>
 800b088:	6820      	ldr	r0, [r4, #0]
 800b08a:	1821      	adds	r1, r4, r0
 800b08c:	428b      	cmp	r3, r1
 800b08e:	bf01      	itttt	eq
 800b090:	6819      	ldreq	r1, [r3, #0]
 800b092:	685b      	ldreq	r3, [r3, #4]
 800b094:	1809      	addeq	r1, r1, r0
 800b096:	6021      	streq	r1, [r4, #0]
 800b098:	6063      	str	r3, [r4, #4]
 800b09a:	6054      	str	r4, [r2, #4]
 800b09c:	e7cb      	b.n	800b036 <_free_r+0x22>
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	20001164 	.word	0x20001164

0800b0a4 <sbrk_aligned>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	4e0e      	ldr	r6, [pc, #56]	; (800b0e0 <sbrk_aligned+0x3c>)
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	6831      	ldr	r1, [r6, #0]
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	b911      	cbnz	r1, 800b0b6 <sbrk_aligned+0x12>
 800b0b0:	f000 f8bc 	bl	800b22c <_sbrk_r>
 800b0b4:	6030      	str	r0, [r6, #0]
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f000 f8b7 	bl	800b22c <_sbrk_r>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	d00a      	beq.n	800b0d8 <sbrk_aligned+0x34>
 800b0c2:	1cc4      	adds	r4, r0, #3
 800b0c4:	f024 0403 	bic.w	r4, r4, #3
 800b0c8:	42a0      	cmp	r0, r4
 800b0ca:	d007      	beq.n	800b0dc <sbrk_aligned+0x38>
 800b0cc:	1a21      	subs	r1, r4, r0
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f000 f8ac 	bl	800b22c <_sbrk_r>
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d101      	bne.n	800b0dc <sbrk_aligned+0x38>
 800b0d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b0dc:	4620      	mov	r0, r4
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
 800b0e0:	20001168 	.word	0x20001168

0800b0e4 <_malloc_r>:
 800b0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e8:	1ccd      	adds	r5, r1, #3
 800b0ea:	f025 0503 	bic.w	r5, r5, #3
 800b0ee:	3508      	adds	r5, #8
 800b0f0:	2d0c      	cmp	r5, #12
 800b0f2:	bf38      	it	cc
 800b0f4:	250c      	movcc	r5, #12
 800b0f6:	2d00      	cmp	r5, #0
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	db01      	blt.n	800b100 <_malloc_r+0x1c>
 800b0fc:	42a9      	cmp	r1, r5
 800b0fe:	d905      	bls.n	800b10c <_malloc_r+0x28>
 800b100:	230c      	movs	r3, #12
 800b102:	2600      	movs	r6, #0
 800b104:	603b      	str	r3, [r7, #0]
 800b106:	4630      	mov	r0, r6
 800b108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10c:	4e2e      	ldr	r6, [pc, #184]	; (800b1c8 <_malloc_r+0xe4>)
 800b10e:	f000 f89d 	bl	800b24c <__malloc_lock>
 800b112:	6833      	ldr	r3, [r6, #0]
 800b114:	461c      	mov	r4, r3
 800b116:	bb34      	cbnz	r4, 800b166 <_malloc_r+0x82>
 800b118:	4629      	mov	r1, r5
 800b11a:	4638      	mov	r0, r7
 800b11c:	f7ff ffc2 	bl	800b0a4 <sbrk_aligned>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	4604      	mov	r4, r0
 800b124:	d14d      	bne.n	800b1c2 <_malloc_r+0xde>
 800b126:	6834      	ldr	r4, [r6, #0]
 800b128:	4626      	mov	r6, r4
 800b12a:	2e00      	cmp	r6, #0
 800b12c:	d140      	bne.n	800b1b0 <_malloc_r+0xcc>
 800b12e:	6823      	ldr	r3, [r4, #0]
 800b130:	4631      	mov	r1, r6
 800b132:	4638      	mov	r0, r7
 800b134:	eb04 0803 	add.w	r8, r4, r3
 800b138:	f000 f878 	bl	800b22c <_sbrk_r>
 800b13c:	4580      	cmp	r8, r0
 800b13e:	d13a      	bne.n	800b1b6 <_malloc_r+0xd2>
 800b140:	6821      	ldr	r1, [r4, #0]
 800b142:	3503      	adds	r5, #3
 800b144:	1a6d      	subs	r5, r5, r1
 800b146:	f025 0503 	bic.w	r5, r5, #3
 800b14a:	3508      	adds	r5, #8
 800b14c:	2d0c      	cmp	r5, #12
 800b14e:	bf38      	it	cc
 800b150:	250c      	movcc	r5, #12
 800b152:	4638      	mov	r0, r7
 800b154:	4629      	mov	r1, r5
 800b156:	f7ff ffa5 	bl	800b0a4 <sbrk_aligned>
 800b15a:	3001      	adds	r0, #1
 800b15c:	d02b      	beq.n	800b1b6 <_malloc_r+0xd2>
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	442b      	add	r3, r5
 800b162:	6023      	str	r3, [r4, #0]
 800b164:	e00e      	b.n	800b184 <_malloc_r+0xa0>
 800b166:	6822      	ldr	r2, [r4, #0]
 800b168:	1b52      	subs	r2, r2, r5
 800b16a:	d41e      	bmi.n	800b1aa <_malloc_r+0xc6>
 800b16c:	2a0b      	cmp	r2, #11
 800b16e:	d916      	bls.n	800b19e <_malloc_r+0xba>
 800b170:	1961      	adds	r1, r4, r5
 800b172:	42a3      	cmp	r3, r4
 800b174:	6025      	str	r5, [r4, #0]
 800b176:	bf18      	it	ne
 800b178:	6059      	strne	r1, [r3, #4]
 800b17a:	6863      	ldr	r3, [r4, #4]
 800b17c:	bf08      	it	eq
 800b17e:	6031      	streq	r1, [r6, #0]
 800b180:	5162      	str	r2, [r4, r5]
 800b182:	604b      	str	r3, [r1, #4]
 800b184:	4638      	mov	r0, r7
 800b186:	f104 060b 	add.w	r6, r4, #11
 800b18a:	f000 f865 	bl	800b258 <__malloc_unlock>
 800b18e:	f026 0607 	bic.w	r6, r6, #7
 800b192:	1d23      	adds	r3, r4, #4
 800b194:	1af2      	subs	r2, r6, r3
 800b196:	d0b6      	beq.n	800b106 <_malloc_r+0x22>
 800b198:	1b9b      	subs	r3, r3, r6
 800b19a:	50a3      	str	r3, [r4, r2]
 800b19c:	e7b3      	b.n	800b106 <_malloc_r+0x22>
 800b19e:	6862      	ldr	r2, [r4, #4]
 800b1a0:	42a3      	cmp	r3, r4
 800b1a2:	bf0c      	ite	eq
 800b1a4:	6032      	streq	r2, [r6, #0]
 800b1a6:	605a      	strne	r2, [r3, #4]
 800b1a8:	e7ec      	b.n	800b184 <_malloc_r+0xa0>
 800b1aa:	4623      	mov	r3, r4
 800b1ac:	6864      	ldr	r4, [r4, #4]
 800b1ae:	e7b2      	b.n	800b116 <_malloc_r+0x32>
 800b1b0:	4634      	mov	r4, r6
 800b1b2:	6876      	ldr	r6, [r6, #4]
 800b1b4:	e7b9      	b.n	800b12a <_malloc_r+0x46>
 800b1b6:	230c      	movs	r3, #12
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	f000 f84c 	bl	800b258 <__malloc_unlock>
 800b1c0:	e7a1      	b.n	800b106 <_malloc_r+0x22>
 800b1c2:	6025      	str	r5, [r4, #0]
 800b1c4:	e7de      	b.n	800b184 <_malloc_r+0xa0>
 800b1c6:	bf00      	nop
 800b1c8:	20001164 	.word	0x20001164

0800b1cc <_realloc_r>:
 800b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d0:	4680      	mov	r8, r0
 800b1d2:	4614      	mov	r4, r2
 800b1d4:	460e      	mov	r6, r1
 800b1d6:	b921      	cbnz	r1, 800b1e2 <_realloc_r+0x16>
 800b1d8:	4611      	mov	r1, r2
 800b1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1de:	f7ff bf81 	b.w	800b0e4 <_malloc_r>
 800b1e2:	b92a      	cbnz	r2, 800b1f0 <_realloc_r+0x24>
 800b1e4:	f7ff ff16 	bl	800b014 <_free_r>
 800b1e8:	4625      	mov	r5, r4
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1f0:	f000 f838 	bl	800b264 <_malloc_usable_size_r>
 800b1f4:	4284      	cmp	r4, r0
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	d802      	bhi.n	800b200 <_realloc_r+0x34>
 800b1fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1fe:	d812      	bhi.n	800b226 <_realloc_r+0x5a>
 800b200:	4621      	mov	r1, r4
 800b202:	4640      	mov	r0, r8
 800b204:	f7ff ff6e 	bl	800b0e4 <_malloc_r>
 800b208:	4605      	mov	r5, r0
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d0ed      	beq.n	800b1ea <_realloc_r+0x1e>
 800b20e:	42bc      	cmp	r4, r7
 800b210:	4622      	mov	r2, r4
 800b212:	4631      	mov	r1, r6
 800b214:	bf28      	it	cs
 800b216:	463a      	movcs	r2, r7
 800b218:	f7ff fb78 	bl	800a90c <memcpy>
 800b21c:	4631      	mov	r1, r6
 800b21e:	4640      	mov	r0, r8
 800b220:	f7ff fef8 	bl	800b014 <_free_r>
 800b224:	e7e1      	b.n	800b1ea <_realloc_r+0x1e>
 800b226:	4635      	mov	r5, r6
 800b228:	e7df      	b.n	800b1ea <_realloc_r+0x1e>
	...

0800b22c <_sbrk_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	2300      	movs	r3, #0
 800b230:	4d05      	ldr	r5, [pc, #20]	; (800b248 <_sbrk_r+0x1c>)
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	f7f5 fcc4 	bl	8000bc4 <_sbrk>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_sbrk_r+0x1a>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_sbrk_r+0x1a>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	2000116c 	.word	0x2000116c

0800b24c <__malloc_lock>:
 800b24c:	4801      	ldr	r0, [pc, #4]	; (800b254 <__malloc_lock+0x8>)
 800b24e:	f000 b811 	b.w	800b274 <__retarget_lock_acquire_recursive>
 800b252:	bf00      	nop
 800b254:	20001170 	.word	0x20001170

0800b258 <__malloc_unlock>:
 800b258:	4801      	ldr	r0, [pc, #4]	; (800b260 <__malloc_unlock+0x8>)
 800b25a:	f000 b80c 	b.w	800b276 <__retarget_lock_release_recursive>
 800b25e:	bf00      	nop
 800b260:	20001170 	.word	0x20001170

0800b264 <_malloc_usable_size_r>:
 800b264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b268:	1f18      	subs	r0, r3, #4
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	bfbc      	itt	lt
 800b26e:	580b      	ldrlt	r3, [r1, r0]
 800b270:	18c0      	addlt	r0, r0, r3
 800b272:	4770      	bx	lr

0800b274 <__retarget_lock_acquire_recursive>:
 800b274:	4770      	bx	lr

0800b276 <__retarget_lock_release_recursive>:
 800b276:	4770      	bx	lr

0800b278 <_init>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr

0800b284 <_fini>:
 800b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b286:	bf00      	nop
 800b288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b28a:	bc08      	pop	{r3}
 800b28c:	469e      	mov	lr, r3
 800b28e:	4770      	bx	lr
